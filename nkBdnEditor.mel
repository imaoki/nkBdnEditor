/*! © 2024 imaoki | MIT License | https://github.com/imaoki */

// /////////////////////////////////////////////////////////////////////////////
// ボイラープレート
// /////////////////////////////////////////////////////////////////////////////
/*1.1.0:Assertion*/proc string assertTrue(int $a) {return ($a == true) ? "" : ("Assert: expected 1, got " + $a);}proc string assertFalse(int $a) {return ($a == false) ? "" : ("Assert: expected 0, got " + $a);}proc string assertFloatEqual(float $e, float $a, float $t) {return (`abs ($e - $a)` <= $t) ? "" : ("Assert: expected " + $e + ", got " + $a);}proc string assertFloatNotEqual(float $e, float $a, float $t) {return (`abs ($e - $a)` > $t) ? "" : ("Assert: expected " + $e + ", got " + $a);}proc string assertIntEqual(int $e, int $a) {return ($a == $e) ? "" : ("Assert: expected " + $e + ", got " + $a);}proc string assertIntNotEqual(int $e, int $a) {return ($a != $e) ? "" : ("Assert: expected " + $e + ", got " + $a);}proc string assertStringEqual(string $e, string $a) {return ($a == $e) ? "" : ("Assert: expected " + $e + ", got " + $a);}proc string assertStringNotEqual(string $e, string $a) {return ($a != $e) ? "" : ("Assert: expected " + $e + ", got " + $a);}proc string assertFloatArrayEqual(float $es[], float $as[], float $t) {int $numAs = `size $as`;int $isEqual = $numAs == `size $es`;if ($isEqual) {for ($i = 0; $i < $numAs; $i++) {$isEqual = `abs ($es[$i] - $as[$i])` <= $t;if (!$isEqual) break;}}return ($isEqual) ? "" : ("Assert: expected {" + floatArrayToString($es, ", ") + "}, got {" + floatArrayToString($as, ", ") + "}");}proc string assertIntArrayEqual(int $es[], int $as[]) {int $numAs = `size $as`;int $isEqual = $numAs == `size $es`;if ($isEqual) {for ($i = 0; $i < $numAs; $i++) {$isEqual = $as[$i] == $es[$i];if (!$isEqual) break;}}return ($isEqual) ? "" : ("Assert: expected {" + intArrayToString($es, ", ") + "}, got {" + intArrayToString($as, ", ") + "}");}proc string assertStringArrayEqual(string $es[], string $as[]) {int $numAs = `size $as`;int $isEqual = $numAs == `size $es`;if ($isEqual) {for ($i = 0; $i < $numAs; $i++) {$isEqual = $as[$i] == $es[$i];if (!$isEqual) break;}}return ($isEqual) ? "" : ("Assert: expected {" + stringArrayToString($es, ", ") + "}, got {" + stringArrayToString($as, ", ") + "}");}proc testNewScene() {file -f -new;}proc testOpenScene(string $filename) {file -f -op "v=0;"  -iv  -typ "mayaAscii" -pmt false -o $filename;}
/*1.14.0:Attribute*/proc int existsAttribute(string $node, string $attribute) {if (!`objExists $node`) return false;if (`gmatch $attribute "*.*"`) {string $buffer[];int $numBuffer = `tokenize $attribute "." $buffer`;if ($numBuffer < 2) return false;string $parentAttribute = $node;for ($i = 0; $i < $numBuffer - 1; $i++) {$parentAttribute += "." + $buffer[$i];}string $targetAttribute = $buffer[$numBuffer - 1];return `attributeQuery -ex -n $parentAttribute $targetAttribute`;}else {return `attributeQuery -ex -n $node $attribute`;}}proc string getAttributeType(string $node, string $attribute) {if (!existsAttribute($node, $attribute)) return "";return `getAttr -typ ($node + "." + $attribute)`;}proc int isAttributeType(string $node, string $attribute, string $type) {return (getAttributeType($node, $attribute) == $type);}proc int isIndependentAttribute(string $node, string $attribute) {return (existsAttribute($node, $attribute) && !`connectionInfo -id ($node + "." + $attribute)`);}proc int isAttributeLocked(string $node, string $attribute) {if (!existsAttribute($node, $attribute)) return true;return `getAttr -l ($node + "." + $attribute)`;}proc setAttributeLock(string $node, string $attribute, int $state) {if (!existsAttribute($node, $attribute)) return;setAttr -l $state ($node + "." + $attribute);}proc batchSetAttributeLock(string $nodes[], string $attributes[], int $state) {for ($n in $nodes) {for ($attribute in $attributes) {setAttributeLock($n, $attribute, $state);}}}proc int isAttributeKeyable(string $node, string $attribute) {if (!existsAttribute($node, $attribute)) return false;return `getAttr -k ($node + "." + $attribute)`;}proc setAttributeKeyable(string $node, string $attribute, int $state) {if (!existsAttribute($node, $attribute)) return;setAttr -k $state ($node + "." + $attribute);}proc batchSetAttributeKeyable(string $nodes[], string $attributes[], int $state) {for ($n in $nodes) {for ($attribute in $attributes) {setAttributeKeyable($n, $attribute, $state);}}}proc int isAttributeChannelBox(string $node, string $attribute) {if (!existsAttribute($node, $attribute)) return false;return `getAttr -cb ($node + "." + $attribute)`;}proc setAttributeChannelBox(string $node, string $attribute, int $state) {if (!existsAttribute($node, $attribute)) return;if (!$state) {setAttributeKeyable($node, $attribute, $state);}setAttr -cb $state ($node + "." + $attribute);}proc batchSetAttributeChannelBox(string $nodes[], string $attributes[], int $state) {for ($n in $nodes) {for ($attribute in $attributes) {setAttributeChannelBox($n, $attribute, $state);}}}proc string[] getEnumLabels(string $node, string $attribute) {string $labels[];if (!isAttributeType($node, $attribute, "enum")) return $labels;string $enumLabels[] = `attributeQuery -le -n $node $attribute`;if (!(`size $enumLabels` && `size $enumLabels[0]`)) return $labels;tokenize $enumLabels[0] ":" $labels;if (`size $labels` == 1 && !`size $labels[0]`) clear $labels;return $labels;}proc string attributeNameInPascalCase(string $node, string $attribute) {string $pascalName;if (!existsAttribute($node, $attribute)) return $pascalName;$pascalName = `attributeName -n ($node + "." + $attribute)`;$pascalName = substituteAllString($pascalName, " ", "");return $pascalName;}proc int addProxyAttributes(string $sourceNode,string $attributes[],string $proxyNode) {if ( !`objExists $sourceNode` || !`size $attributes` || !`objExists $proxyNode`) return false;for ($attribute in $attributes) {if ( !existsAttribute($sourceNode, $attribute) || existsAttribute($proxyNode, $attribute)) continue;addAttr -ln $attribute -pxy ($sourceNode + "." + $attribute) $proxyNode;}return true;}proc float getFloatAttribute(string $node, string $attribute, float $default) {if (!existsAttribute($node, $attribute)) return $default;return `getAttr ($node + "." + $attribute)`;}proc setFloatAttribute(string $node, string $attribute, float $value) {if (!isIndependentAttribute($node, $attribute)) return;if (`attributeQuery -mxe -n $node $attribute`) {float $max[] = `attributeQuery -max -n $node $attribute`;if ($value > $max[0]) $value = $max[0];}if (`attributeQuery -mne -n $node $attribute`) {float $min[] = `attributeQuery -min -n $node $attribute`;if ($value < $min[0]) $value = $min[0];}setAttr ($node + "." + $attribute) $value;}proc batchSetFloatAttribute(string $nodes[], string $attribute, float $value) {for ($n in $nodes) {setFloatAttribute($n, $attribute, $value);}}proc float[] getFloat3Attribute(string $node, string $attribute, float $defaults[]) {if (!existsAttribute($node, $attribute)) return $defaults;return `getAttr ($node + "." + $attribute)`;}proc setFloat3Attribute(string $node, string $attribute, float $values[]) {if (!isIndependentAttribute($node, $attribute) || `size $values` != 3) return;if (`attributeQuery -mxe -n $node $attribute`) {float $max[] = `attributeQuery -max -n $node $attribute`;if ($values[0] > $max[0]) $values[0] = $max[0];if ($values[1] > $max[1]) $values[1] = $max[1];if ($values[2] > $max[2]) $values[2] = $max[2];}if (`attributeQuery -mne -n $node $attribute`) {float $min[] = `attributeQuery -min -n $node $attribute`;if ($values[0] < $min[0]) $values[0] = $min[0];if ($values[1] < $min[1]) $values[1] = $min[1];if ($values[2] < $min[2]) $values[2] = $min[2];}setAttr ($node + "." + $attribute) $values[0] $values[1] $values[2];}proc batchSetFloat3Attribute(string $nodes[], string $attribute, float $values[]) {for ($n in $nodes) {setFloat3Attribute($n, $attribute, $values);}}proc int getIntAttribute(string $node, string $attribute, int $default) {if (!existsAttribute($node, $attribute)) return $default;return `getAttr ($node + "." + $attribute)`;}proc setIntAttribute(string $node, string $attribute, int $value) {if (!isIndependentAttribute($node, $attribute)) return;if (`attributeQuery -mxe -n $node $attribute`) {float $max[] = `attributeQuery -max -n $node $attribute`;if ($value > $max[0]) $value = (int) $max[0];}if (`attributeQuery -mne -n $node $attribute`) {float $min[] = `attributeQuery -min -n $node $attribute`;if ($value < $min[0]) $value = (int) $min[0];}setAttr ($node + "." + $attribute) $value;}proc batchSetIntAttribute(string $nodes[], string $attribute, int $value) {for ($n in $nodes) {setIntAttribute($n, $attribute, $value);}}proc int[] getInt3Attribute(string $node, string $attribute, int $defaults[]) {if (!existsAttribute($node, $attribute)) return $defaults;return `getAttr ($node + "." + $attribute)`;}proc setInt3Attribute(string $node, string $attribute, int $values[]) {if (!isIndependentAttribute($node, $attribute) || `size $values` != 3) return;if (`attributeQuery -mxe -n $node $attribute`) {float $max[] = `attributeQuery -max -n $node $attribute`;if ($values[0] > $max[0]) $values[0] = (int) $max[0];if ($values[1] > $max[1]) $values[1] = (int) $max[1];if ($values[2] > $max[2]) $values[2] = (int) $max[2];}if (`attributeQuery -mne -n $node $attribute`) {float $min[] = `attributeQuery -min -n $node $attribute`;if ($values[0] < $min[0]) $values[0] = (int) $min[0];if ($values[1] < $min[1]) $values[1] = (int) $min[1];if ($values[2] < $min[2]) $values[2] = (int) $min[2];}setAttr ($node + "." + $attribute) $values[0] $values[1] $values[2];}proc batchSetInt3Attribute(string $nodes[], string $attribute, int $values[]) {for ($n in $nodes) {setInt3Attribute($n, $attribute, $values);}}proc string getStringAttribute(string $node, string $attribute, string $default) {string $value = $default;if (!existsAttribute($node, $attribute)) return $value;$value = `getAttr ($node + "." + $attribute)`;if (!`size $value`) $value = "";return $value;}proc setStringAttribute(string $node, string $attribute, string $value) {if (!isIndependentAttribute($node, $attribute)) return;setAttr ($node + "." + $attribute) -typ "string" $value;}proc batchSetStringAttribute(string $nodes[], string $attribute, string $value) {for ($n in $nodes) {setStringAttribute($n, $attribute, $value);}}proc string[] getSourceConnections(string $n,string $attributes[],string $type,string $sourceAttributes[],string $targetAttributes[]) {string $sourceNodes[];clear $sourceAttributes;clear $targetAttributes;if (!`objExists $n`) return $sourceNodes;$n = longNameOf($n);int $typeFlag = `size $type` > 0;if (`size $attributes`) {for ($attribute in $attributes) {if (!existsAttribute($n, $attribute)) continue;string $destPath = $n + "." + $attribute;string $nodes[];if ($typeFlag) {$nodes = `listConnections -d false -p false -s true -t $type $destPath`;}else {$nodes = `listConnections -d false -p false -s true $destPath`;}$sourceNodes = stringArrayCatenate($sourceNodes, $nodes);string $plugs[];if ($typeFlag) {$plugs = `listConnections -d false -p true -s true -t $type $destPath`;}else {$plugs = `listConnections -d false -p true -s true $destPath`;}$plugs = stringArrayRemoveDuplicates($plugs);for ($plug in $plugs) {string $buffer[];if (`tokenize $plug "." $buffer` != 2) continue;string $sourcePath = longNameOf($buffer[0]) + "." + $buffer[1];$sourceAttributes[`size $sourceAttributes`] = $sourcePath;$targetAttributes[`size $targetAttributes`] = $destPath;}}}else {string $plugs[];if ($typeFlag) {$sourceNodes = `listConnections -d false -p false -s true -t $type $n`;$plugs = `listConnections -d false -p true -s true -t $type $n`;}else {$sourceNodes = `listConnections -d false -p false -s true $n`;$plugs = `listConnections -d false -p true -s true $n`;}$plugs = stringArrayRemoveDuplicates($plugs);for ($plug in $plugs) {string $buffer[];if (`tokenize $plug "." $buffer` != 2) continue;string $sourcePath = longNameOf($buffer[0]) + "." + $buffer[1];string $targetPlugs[] = `listConnections -d true -p true -s false $sourcePath`;$targetPlugs = stringArrayRemoveDuplicates($targetPlugs);for ($targetPlug in $targetPlugs) {string $targetBuffer[];if (`tokenize $targetPlug "." $targetBuffer` != 2) continue;string $targetNode = longNameOf($targetBuffer[0]);if ($targetNode != $n) continue;string $destPath = $targetNode + "." + $targetBuffer[1];$sourceAttributes[`size $sourceAttributes`] = $sourcePath;$targetAttributes[`size $targetAttributes`] = $destPath;}}}$sourceNodes = stringArrayRemoveDuplicates($sourceNodes);for ($i = 0; $i < `size $sourceNodes`; $i++) {$sourceNodes[$i] = longNameOf($sourceNodes[$i]);}return $sourceNodes;}proc string[] getDestConnections(string $n,string $attributes[],string $type,string $sourceAttributes[],string $targetAttributes[]) {string $destNodes[];clear $sourceAttributes;clear $targetAttributes;if (!`objExists $n`) return $destNodes;$n = longNameOf($n);int $typeFlag = `size $type` > 0;if (`size $attributes`) {for ($attribute in $attributes) {if (!existsAttribute($n, $attribute)) continue;string $sourcePath = $n + "." + $attribute;string $nodes[];if ($typeFlag) {$nodes = `listConnections -d true -p false -s false -t $type $sourcePath`;}else {$nodes = `listConnections -d true -p false -s false $sourcePath`;}$destNodes = stringArrayCatenate($destNodes, $nodes);string $plugs[];if ($typeFlag) {$plugs = `listConnections -d true -p true -s false -t $type $sourcePath`;}else {$plugs = `listConnections -d true -p true -s false $sourcePath`;}$plugs = stringArrayRemoveDuplicates($plugs);for ($plug in $plugs) {string $buffer[];if (`tokenize $plug "." $buffer` != 2) continue;string $destPath = longNameOf($buffer[0]) + "." + $buffer[1];$sourceAttributes[`size $sourceAttributes`] = $sourcePath;$targetAttributes[`size $targetAttributes`] = $destPath;}}}else {string $plugs[];if ($typeFlag) {$destNodes = `listConnections -d true -p false -s false -t $type $n`;$plugs = `listConnections -d true -p true -s false -t $type $n`;}else {$destNodes = `listConnections -d true -p false -s false $n`;$plugs = `listConnections -d true -p true -s false $n`;}$plugs = stringArrayRemoveDuplicates($plugs);for ($plug in $plugs) {string $buffer[];if (`tokenize $plug "." $buffer` != 2) continue;string $destPath = longNameOf($buffer[0]) + "." + $buffer[1];string $sourcePlugs[] = `listConnections -d false -p true -s true $destPath`;$sourcePlugs = stringArrayRemoveDuplicates($sourcePlugs);for ($sourcePlug in $sourcePlugs) {string $sourceBuffer[];if (`tokenize $sourcePlug "." $sourceBuffer` != 2) continue;string $sourceNode = longNameOf($sourceBuffer[0]);if ($sourceNode != $n) continue;string $sourcePath = $sourceNode + "." + $sourceBuffer[1];$sourceAttributes[`size $sourceAttributes`] = $sourcePath;$targetAttributes[`size $targetAttributes`] = $destPath;}}}$destNodes = stringArrayRemoveDuplicates($destNodes);for ($i = 0; $i < `size $destNodes`; $i++) {$destNodes[$i] = longNameOf($destNodes[$i]);}return $destNodes;}proc connectAttributes(string $sourceAttributes[],string $targetAttributes[],int $force) {int $numAttributes = `size $sourceAttributes`;if (`size $targetAttributes` != $numAttributes) return;for ($i = 0; $i < $numAttributes; $i++) {string $sourceAttribute = $sourceAttributes[$i];string $targetAttribute = $targetAttributes[$i];if (`isConnected -iuc $sourceAttribute $targetAttribute`) continue;if ($force) {connectAttr -f $sourceAttribute $targetAttribute;}else {connectAttr $sourceAttribute $targetAttribute;}}}proc disconnectAttributes(string $sourceAttributes[],string $targetAttributes[]) {int $numAttributes = `size $sourceAttributes`;if (`size $targetAttributes` != $numAttributes) return;for ($i = 0; $i < $numAttributes; $i++) {string $sourceAttribute = $sourceAttributes[$i];string $targetAttribute = $targetAttributes[$i];if (!`isConnected -iuc $sourceAttribute $targetAttribute`) continue;disconnectAttr $sourceAttribute $targetAttribute;}}proc initializeRenderStats(string $nodes[]) {if (!`size $nodes`) return;for ($n in $nodes) {if (!`objExists $n`) continue;setIntAttribute($n, "castsShadows", true);setIntAttribute($n, "receiveShadows", true);setIntAttribute($n, "holdOut", false);setIntAttribute($n, "motionBlur", true);setIntAttribute($n, "primaryVisibility", true);setIntAttribute($n, "smoothShading", true);setIntAttribute($n, "visibleInReflections", true);setIntAttribute($n, "visibleInRefractions", true);setIntAttribute($n, "doubleSided", true);setIntAttribute($n, "opposite", false);setIntAttribute($n, "geometryAntialiasingOverride", false);setIntAttribute($n, "antialiasingLevel", 1);setIntAttribute($n, "shadingSamplesOverride", false);setIntAttribute($n, "shadingSamples", 1);setIntAttribute($n, "maxShadingSamples", 1);}}proc disableRenderStats(string $nodes[]) {if (!`size $nodes`) return;for ($n in $nodes) {if (!`objExists $n`) continue;setIntAttribute($n, "castsShadows", false);setIntAttribute($n, "receiveShadows", false);setIntAttribute($n, "holdOut", false);setIntAttribute($n, "motionBlur", false);setIntAttribute($n, "primaryVisibility", false);setIntAttribute($n, "smoothShading", false);setIntAttribute($n, "visibleInReflections", false);setIntAttribute($n, "visibleInRefractions", false);setIntAttribute($n, "doubleSided", false);setIntAttribute($n, "opposite", false);setIntAttribute($n, "geometryAntialiasingOverride", false);setIntAttribute($n, "shadingSamplesOverride", false);}}proc setOutlinerColor(string $nodes[], float $color[]) {if (!`size $nodes` || `size $color` != 3) return;for ($n in $nodes) {if (!`objExists $n`) continue;setIntAttribute($n, "uocol", true);setFloat3Attribute($n, "oclr", $color);}}proc setOverrideColor(string $nodes[], int $index) {if (!(0 <= $index && $index <= 31)) return;for ($n in $nodes) {if (!`objExists $n`) continue;setIntAttribute($n, "ove", true);setIntAttribute($n, "ovrgbf", 0);setIntAttribute($n, "ovc", $index);}}proc int hasShapeTransformAttributes(string $n) {return (isAttributeType($n, "shapeTranslate", "double3") && isAttributeType($n, "shapeTranslateX", "doubleLinear") && isAttributeType($n, "shapeTranslateY", "doubleLinear") && isAttributeType($n, "shapeTranslateZ", "doubleLinear") && isAttributeType($n, "shapeRotate", "double3") && isAttributeType($n, "shapeRotateX", "doubleAngle") && isAttributeType($n, "shapeRotateY", "doubleAngle") && isAttributeType($n, "shapeRotateZ", "doubleAngle") && isAttributeType($n, "shapeScale", "double3") && isAttributeType($n, "shapeScaleX", "double") && isAttributeType($n, "shapeScaleY", "double") && isAttributeType($n, "shapeScaleZ", "double"));}proc addShapeTransformAttributes(string $n) {if (!`objExists $n` || hasShapeTransformAttributes($n)) return;addAttr -at "double3"      -k false -ln "shapeTranslate"  -sn "st" $n;addAttr -at "doubleLinear" -k false -ln "shapeTranslateX" -sn "stx" -p "shapeTranslate" $n;addAttr -at "doubleLinear" -k false -ln "shapeTranslateY" -sn "sty" -p "shapeTranslate" $n;addAttr -at "doubleLinear" -k false -ln "shapeTranslateZ" -sn "stz" -p "shapeTranslate" $n;addAttr -at "double3"      -k false -ln "shapeRotate"     -sn "sr" $n;addAttr -at "doubleAngle"  -k false -ln "shapeRotateX"    -sn "srx" -p "shapeRotate" $n;addAttr -at "doubleAngle"  -k false -ln "shapeRotateY"    -sn "sry" -p "shapeRotate" $n;addAttr -at "doubleAngle"  -k false -ln "shapeRotateZ"    -sn "srz" -p "shapeRotate" $n;addAttr -at "double3"      -k false -ln "shapeScale"      -sn "ss" $n;addAttr -at "double"       -k false -ln "shapeScaleX"     -sn "ssx" -p "shapeScale" $n;addAttr -at "double"       -k false -ln "shapeScaleY"     -sn "ssy" -p "shapeScale" $n;addAttr -at "double"       -k false -ln "shapeScaleZ"     -sn "ssz" -p "shapeScale" $n;setAttr ($n + ".ss") -typ "double3" 1.0 1.0 1.0;}proc int hasCurveNameAttribute(string $n) {return isAttributeType($n, "curveName", "string");}proc addCurveNameAttribute(string $n) {if (!`objExists $n` || hasCurveNameAttribute($n)) return;addAttr -dt "string" -ln "curveName" -sn "cn" $n;}
/*1.18.0:Node*/proc int nodesExists(string $nodes[]) {int $numNodes = `size $nodes`;if (!$numNodes) return false;int $count;for ($n in $nodes) {if (`objExists $n`) $count += 1;}return ($count == $numNodes);}proc int isSelected(string $n) {if (!`objExists $n`) return false;string $nodes[] = `ls -l -sl $n`;return (`size $nodes` > 0);}proc string[] getShapeNodes(string $n, string $type) {if (!`objExists $n`) return {};if (`size $type`) {return `listRelatives -f -s -typ $type $n`;}else {return `listRelatives -f -s $n`;}}proc int isType(string $n, string $types[], int $isExact) {if (!`objExists $n`) return false;if (!`size $types`) return true;if ($isExact) {if (stringArrayContains(`nodeType $n`, $types)) return true;}else {string $subtypes[] = `nodeType -i $n`;for ($subtype in $subtypes) {if (stringArrayContains($subtype, $types)) return true;}}return false;}proc int hasType(string $n, string $types[], int $isExact) {if (isType($n, $types, $isExact)) return true;string $shapeNodes[] = getShapeNodes($n, "");for ($shapeNode in $shapeNodes) {if (isType($shapeNode, $types, $isExact)) return true;}return false;}proc int isTypeContains(string $nodes[], string $types[], int $isExact) {if (!`size $nodes`) return false;if (!`size $types`) return true;for ($n in $nodes) {if (isType($n, $types, $isExact)) return true;}return false;}proc int isNodeReferenced(string $n) {return (`objExists $n` && `referenceQuery -inr $n`);}proc int isConstraintNode(string $n) {return isType($n, {"constraint"}, false);}proc int isDagNode(string $n) {return isType($n, {"dagNode"}, false);}proc int isTransformNode(string $n) {return isType($n, {"transform"}, true);}proc int isJointNode(string $n) {return isType($n, {"joint"}, true);}proc int isShapeNode(string $n) {return isType($n, {"shape"}, false);}proc int isLocatorNode(string $n) {return isType($n, {"locator"}, true);}proc int hasLocatorNode(string $n) {return hasType($n, {"locator"}, true);}proc int isNurbsSurfaceNode(string $n) {return isType($n, {"nurbsSurface"}, true);}proc int hasNurbsSurfaceNode(string $n) {return hasType($n, {"nurbsSurface"}, true);}proc int isNurbsCurveNode(string $n) {return isType($n, {"nurbsCurve"}, true);}proc int hasNurbsCurveNode(string $n) {return hasType($n, {"nurbsCurve"}, true);}proc int isBezierCurveNode(string $n) {return isType($n, {"bezierCurve"}, true);}proc int hasBezierCurveNode(string $n) {return hasType($n, {"bezierCurve"}, true);}proc int isMeshNode(string $n) {return isType($n, {"mesh"}, true);}proc int hasMeshNode(string $n) {return hasType($n, {"mesh"}, true);}proc int isLightNode(string $n) {return isType($n, {"light"}, false);}proc int hasLightNode(string $n) {return hasType($n, {"light"}, false);}proc int isCameraNode(string $n) {return isType($n, {"camera"}, false);}proc int hasCameraNode(string $n) {return hasType($n, {"camera"}, false);}proc int isUUID(string $input) {string $hex = "[A-F0-9]";string $digit4 = $hex + $hex + $hex + $hex;string $digit8 = $digit4 + $digit4;string $digit12 = $digit8 + $digit4;return (isValidString($input,$digit8 + "-" + $digit4 + "-" + $digit4 + "-" + $digit4 + "-" + $digit12));}proc string toShortName(string $path) {string $shortName;if (!`size $path`) return $shortName;string $buffer1[];int $numBuffer1 = `tokenize $path "|" $buffer1`;if ($numBuffer1 > 0) {string $buffer2[];int $numBuffer2 = `tokenize $buffer1[$numBuffer1 - 1] ":" $buffer2`;if ($numBuffer2 > 0) {$shortName = $buffer2[$numBuffer2 - 1];}}return $shortName;}proc string toUUID(string $n) {string $uuid;if (!`objExists $n`) return $uuid;string $uuids[] = `ls -uid $n`;if (`size $uuids` == 1) $uuid = $uuids[0];return $uuid;}proc string uuidToLongName(string $uuid) {string $longName;if (!isUUID($uuid)) return $longName;string $longNames[] = `ls -l $uuid`;if (`size $longNames` == 1) $longName = $longNames[0];return $longName;}proc string setNodeName(string $n, string $name) {if (!`objExists $n` || !`size $name` || isNodeReferenced($n)) return "";string $nodeId = toUUID($n);$n = uuidToLongName($nodeId);rename $n $name;$n = uuidToLongName($nodeId);return $n;}proc string getParentNode(string $n) {if (!`objExists $n`) return "";string $parents[] = `listRelatives -f -p $n`;if (!`size $parents`) return "";return $parents[0];}proc string[] setParentNode(string $nodes[], string $parentNode) {int $toWorld = `size $parentNode` == 0;int $parentIsDagNode = isDagNode($parentNode);if (!$toWorld && !$parentIsDagNode) return $nodes;string $nodeIds[];string $dagNodes[];for ($n in $nodes) {$nodeIds[`size $nodeIds`] = toUUID($n);if (isDagNode($n) && !isNodeReferenced($n)) {$dagNodes[`size $dagNodes`] = $n;}}int $numDagNodes = `size $dagNodes`;if (!$numDagNodes) return $nodes;string $selectedNodes[] = `ls -l -sl`;string $selectedNodeIds[];for ($n in $selectedNodes) {$selectedNodeIds[`size $selectedNodeIds`] = toUUID($n);}if ($numDagNodes) {if ($toWorld) {parent -w $dagNodes;}else if ($parentIsDagNode) {parent -a $dagNodes $parentNode;}}string $newNodes[];for ($id in $nodeIds) {$newNodes[`size $newNodes`] = uuidToLongName($id);}string $newSelectedNodes[];for ($id in $selectedNodeIds) {$newSelectedNodes[`size $newSelectedNodes`] = uuidToLongName($id);}select -r $newSelectedNodes;return $newNodes;}proc string getRootNode(string $n) {string $rootNode;if (!`objExists $n`) return $rootNode;$rootNode = $n;string $parentNode = getParentNode($rootNode);while (`objExists $parentNode`) {$rootNode = $parentNode;$parentNode = getParentNode($rootNode);}return $rootNode;}proc string[] collectRootNodes(string $nodes[]) {string $rootNodes[];if (!`size $nodes`) return $rootNodes;for ($n in $nodes) {string $rootNode = getRootNode($n);if (`objExists $rootNode`) {$rootNodes[`size $rootNodes`] = $rootNode;}}$rootNodes = stringArrayRemoveDuplicates($rootNodes);return $rootNodes;}proc string[] collectChildNodes(string $n) {string $childNodes[];if (!`objExists $n`) return $childNodes;$childNodes = `listRelatives -f -c $n`;return $childNodes;}proc string[] collectDescendantNodes(string $n,string $parentNode,string $types[],int $isExact,string $script) {string $descendantNodes[];if (!`objExists $n`) return $descendantNodes;$n = longNameOf($n);$parentNode = longNameOf($parentNode);string $sourceNode = $n;string $nextNode = $sourceNode;if (`exists $script` && isType($sourceNode, $types, $isExact)) {string $arg1 = "\"" + toUUID($sourceNode) + "\"";string $arg2 = "\"" + toUUID($parentNode) + "\"";string $result[] = `eval $script $arg1 $arg2`;if (`size $result` == 2 && (!`size $result[0]` || isUUID($result[0])) && (!`size $result[1]` || isUUID($result[1]))) {$sourceNode = uuidToLongName($result[0]);$nextNode = uuidToLongName($result[1]);}}if (`objExists $sourceNode`) {$descendantNodes[`size $descendantNodes`] = $sourceNode;}string $childNodes[] = collectChildNodes($nextNode);for ($c in $childNodes) {$descendantNodes = stringArrayCatenate($descendantNodes,collectDescendantNodes($c, $sourceNode, $types, $isExact, $script));}if (`size $types`) {for ($i = `size $descendantNodes` - 1; $i >= 0; $i--) {if (!isType($descendantNodes[$i], $types, $isExact)) {stringArrayRemoveAtIndex($i, $descendantNodes);}}}return $descendantNodes;}proc string[] collectHierarchyNodes(string $nodes[],string $parentNode,string $types[],int $isExact,string $script) {string $hierarchyNodes[];if (!`size $nodes`) return $hierarchyNodes;string $rootNodes[] = collectRootNodes($nodes);for ($n in $rootNodes) {$hierarchyNodes = stringArrayCatenate($hierarchyNodes,collectDescendantNodes($n, $parentNode, $types, $isExact, $script));}$hierarchyNodes = stringArrayRemoveDuplicates($hierarchyNodes);return $hierarchyNodes;}proc string[] gatherNodes(string $types[],int $isExact,int $selectedOnly,string $pattern) {if (!`size $pattern`) $pattern = "*";string $nodes[];if (`size $types`) {for ($type in $types) {if ($selectedOnly) {if ($isExact) {$nodes = stringArrayCatenate($nodes, `ls -l -sl -et $type $pattern`);}else {$nodes = stringArrayCatenate($nodes, `ls -l -sl -typ $type $pattern`);}}else {if ($isExact) {$nodes = stringArrayCatenate($nodes, `ls -l -et $type $pattern`);}else {$nodes = stringArrayCatenate($nodes, `ls -l -typ $type $pattern`);}}}}else {if ($selectedOnly) {$nodes = `ls -l -sl $pattern`;}else {$nodes = `ls -l $pattern`;}}$nodes = stringArrayRemoveDuplicates($nodes);return $nodes;}proc string nodesAsCSV(string $types[],int $isExact,int $selectedOnly,string $pattern,int $singleNodeOnly) {string $nodes[] = gatherNodes($types, $isExact, $selectedOnly, $pattern);if (`size $nodes` > 1 && $singleNodeOnly) clear $nodes;return stringArrayToString($nodes, ",");}proc string[] csvAsNodes(string $input) {string $nodes[];tokenize $input "," $nodes;if (`size $nodes` == 1 && !`size $nodes[0]`) clear $nodes;return $nodes;}proc string[] getSourceConnectionNodes(string $nodes[],string $types[],int $isExact) {string $tmpNodes[];for ($n in $nodes) {if (!`objExists $n`) continue;$tmpNodes = stringArrayCatenate($tmpNodes,`listConnections -d false -p false -s true $n`);}$tmpNodes = stringArrayRemoveDuplicates($tmpNodes);string $sourceNodes[];for ($i = 0; $i < `size $tmpNodes`; $i++) {string $tmpNode = longNameOf($tmpNodes[$i]);if (isType($tmpNode, $types, $isExact)) {$sourceNodes[`size $sourceNodes`] = $tmpNode;}}$sourceNodes = `sort $sourceNodes`;return $sourceNodes;}proc string[] getDestConnectionNodes(string $nodes[],string $types[],int $isExact) {string $tmpNodes[];for ($n in $nodes) {if (!`objExists $n`) continue;$tmpNodes = stringArrayCatenate($tmpNodes,`listConnections -d true -p false -s false $n`);}$tmpNodes = stringArrayRemoveDuplicates($tmpNodes);string $destNodes[];for ($i = 0; $i < `size $tmpNodes`; $i++) {string $tmpNode = longNameOf($tmpNodes[$i]);if (isType($tmpNode, $types, $isExact)) {$destNodes[`size $destNodes`] = $tmpNode;}}$destNodes = `sort $destNodes`;return $destNodes;}proc string buildDagNode(string $n,string $name,string $parentNode,int $maintainOffset,string $matchTransformNode,int $matchFlags[]) {if (!isDagNode($n) || isNodeReferenced($n)) return $n;string $nodeId = toUUID($n);$n = uuidToLongName($nodeId);if (isDagNode($matchTransformNode)) {int $numMatchFlags = `size $matchFlags`;if (!`size $matchFlags`) {matchTransform $n $matchTransformNode;}else {if ($matchFlags[0]) matchTransform -pos $n $matchTransformNode;if ($matchFlags[1]) matchTransform -rot $n $matchTransformNode;if ($matchFlags[2]) matchTransform -scl $n $matchTransformNode;}}string $selection[] = `ls -l -sl`;int $shouldSelect = isSelected($n);if ($shouldSelect) {$selection = stringArrayRemove({$n}, $selection);}if (isDagNode($parentNode)) {if ($maintainOffset) {parent -a $n $parentNode;}else {parent -r $n $parentNode;}$n = uuidToLongName($nodeId);}if ($shouldSelect) {$selection[`size $selection`] = $n;}select -r $selection;if (`size $name`) {rename $n $name;$n = uuidToLongName($nodeId);}return $n;}proc string createJoint(string $name,string $parentNode,int $maintainOffset,string $matchTransformNode,int $matchFlags[]) {return (buildDagNode(longNameOf(`createNode -ss "joint"`),$name,$parentNode,$maintainOffset,$matchTransformNode,$matchFlags));}proc string createLocator(string $name,string $parentNode,int $maintainOffset,string $matchTransformNode,int $matchFlags[]) {return (buildDagNode(getParentNode(longNameOf(`createNode -ss "locator"`)),$name,$parentNode,$maintainOffset,$matchTransformNode,$matchFlags));}proc string createTransform(string $name,string $parentNode,int $maintainOffset,string $matchTransformNode,int $matchFlags[]) {return (buildDagNode(longNameOf(`createNode -ss "transform"`),$name,$parentNode,$maintainOffset,$matchTransformNode,$matchFlags));}proc string getTopLevelNode(string $topLevelName, int $shouldCreate) {string $n;if (!`size $topLevelName`) return "";string $nodes[] = `ls -l ("::" + $topLevelName)`;int $numNodes = `size $nodes`;if ($numNodes > 1) return "";$n = ($numNodes == 1) ? $nodes[0] : "";if (`objExists $n`) return $n;if ($shouldCreate) {$n = createTransform($topLevelName, "", true, "", {});}return $n;}proc string getSecondLevelNode(string $topLevelName,string $secondLevelName,int $shouldCreate) {string $n;if (!`size $topLevelName` || !`size $secondLevelName`) return "";string $nodes[] = `ls -l ("|::" + $topLevelName + "|::" + $secondLevelName)`;int $numNodes = `size $nodes`;if ($numNodes > 1) return "";$n = ($numNodes == 1) ? $nodes[0] : "";if (`objExists $n`) return $n;if ($shouldCreate) {string $topLevelNode = getTopLevelNode($topLevelName, $shouldCreate);if (!`objExists $topLevelNode`) return "";$n = createTransform($secondLevelName, $topLevelNode, true, "", {});}return $n;}proc string getThirdLevelNode(string $topLevelName,string $secondLevelName,string $thirdLevelName,int $shouldCreate) {string $n;if ( !`size $topLevelName` || !`size $secondLevelName` || !`size $thirdLevelName`) return "";string $nodes[] = `ls -l ("|::" + $topLevelName + "|::" + $secondLevelName + "|::" + $thirdLevelName)`;int $numNodes = `size $nodes`;if ($numNodes > 1) return "";$n = ($numNodes == 1) ? $nodes[0] : "";if (`objExists $n`) return $n;if ($shouldCreate) {string $secondLevelNode = getSecondLevelNode($topLevelName,$secondLevelName,$shouldCreate);if (!`objExists $secondLevelNode`) return "";$n = createTransform($thirdLevelName, $secondLevelNode, true, "", {});}return $n;}proc freezeTransform(string $nodes[], int $preserveFlags[]) {string $dagNodes[];for ($n in $nodes) {if (isDagNode($n)) $dagNodes[`size $dagNodes`] = $n;}if (`size $dagNodes`) {makeIdentity -a true -n 0 -pn true -t (!$preserveFlags[0]) -r (!$preserveFlags[1]) -s (!$preserveFlags[2])$dagNodes;}}
/*1.0.1:Observer*/global string $nkObservers[];proc string escapeStringParam(string $input) {string $escapedText;int $size = `size $input`;for ($i = 1; $i <= $size; $i++) {string $c = `substring $input $i $i`;switch ($c) {case "\\": $escapedText += "\\\\"; break;case "\"": $escapedText += "\\\""; break;case "\n": $escapedText += "\\n"; break;case "\r": $escapedText += "\\r"; break;case "\t": $escapedText += "\\t"; break;default: $escapedText += $c; break;}}return $escapedText;}proc string[] escapeStringParams(string $input[]) {string $escapedArray[];for ($s in $input) {$escapedArray[`size $escapedArray`] = escapeStringParam($s);}return $escapedArray;}proc string floatParamsToString(float $params[]) {string $param = "{";int $numParams = `size $params`;for ($i = 0; $i < $numParams; $i++) {string $floatString = (string) $params[$i];if (!`gmatch $floatString "*.*"`) $floatString += ".0";$param += $floatString + (($i < $numParams - 1) ? ", " : "");}$param += "}";return $param;}proc string intParamsToString(int $params[]) {string $param = "{}";if (`size $param`) {$param = "{" + intArrayToString($params, ", ") + "}";}return $param;}proc string stringParamsToString(string $params[]) {string $param = "{}";if (`size $params`) {$param = "{\"" + stringArrayToString(escapeStringParams($params), "\", \"") + "\"}";}return $param;}proc clearObservers() {global string $nkObservers[];clear $nkObservers;}proc int isValidEvent(string $event) {return (isValidString($event, "^[^;]+$"));}proc int isValidProc(string $proc) {return (isValidString($proc, "^[a-zA-Z\|:\._][a-zA-Z0-9\|:\._]*$"));}proc int isValidObserver(string $observer) {return (isValidString($observer, "^[^;]+;[a-zA-Z\|:\._][a-zA-Z0-9\|:\._]*$"));}proc string makeObserver(string $event, string $proc) {string $observer;if (isValidEvent($event) && isValidProc($proc)) {$observer = $event + ";" + $proc;}return $observer;}proc string extractEvent(string $observer) {string $event;string $buffer[];if (`tokenize $observer ";" $buffer` == 2) {$event = $buffer[0];}return $event;}proc string extractProc(string $observer) {string $proc;string $buffer[];if (`tokenize $observer ";" $buffer` == 2) {$proc = $buffer[1];}return $proc;}proc int findObserver(string $observer) {global string $nkObservers[];int $index = -1;for ($i = 0; $i < `size $nkObservers`; $i++) {if ($observer == $nkObservers[$i]) {$index = $i;break;}}return $index;}proc int existsObserver(string $observer) {return (findObserver($observer) >= 0);}proc string[] getObserverProcs(string $event) {global string $nkObservers[];string $procs[];if (!isValidEvent($event)) return $procs;for ($observer in $nkObservers) {if (extractEvent($observer) == $event) {$procs[`size $procs`] = extractProc($observer);}}return $procs;}proc int subscribe(string $event, string $proc) {global string $nkObservers[];string $observer = makeObserver($event, $proc);if (!isValidObserver($observer)) return false;if (existsObserver($observer)) return false;$nkObservers[`size $nkObservers`] = $observer;return true;}proc int unsubscribe(string $event, string $proc) {global string $nkObservers[];string $observer = makeObserver($event, $proc);if (!isValidObserver($observer)) return false;int $index = findObserver($observer);if ($index < 0) return false;stringArrayRemoveAtIndex($index, $nkObservers);return true;}proc notify(string $event) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc;}}}proc notifyFloat(string $event, float $param) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc $param;}}}proc notifyInt(string $event, int $param) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc $param;}}}proc notifyString(string $event, string $param) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc $param;}}}proc notifyFloatArray(string $event, float $params[]) {string $param = floatParamsToString($params);string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval ($proc + "(" + $param + ")");}}}proc notifyIntArray(string $event, int $params[]) {string $param = intParamsToString($params);string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval ($proc + "(" + $param + ")");}}}proc notifyStringArray(string $event, string $params[]) {string $param = stringParamsToString($params);string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval ($proc + "(" + $param + ")");}}}
/*1.5.0:String*/proc string escapeStringForLiteral(string $input) {string $escapedText;int $size = `size $input`;for ($i = 1; $i <= $size; $i++) {string $c = `substring $input $i $i`;switch ($c) {case "\"": $escapedText += "\\\""; break;case "\\": $escapedText += "\\\\"; break;case "\n": $escapedText += "\\n"; break;case "\r": $escapedText += "\\r"; break;case "\t": $escapedText += "\\t"; break;default: $escapedText += $c; break;}}return $escapedText;}proc string escapeStringForPythonAtString(string $input) {string $escapedText;int $size = `size $input`;for ($i = 1; $i <= $size; $i++) {string $c = `substring $input $i $i`;switch ($c) {case "\\": $escapedText += "\\\\"; break;case "'": $escapedText += "\\'"; break;case "\n": $escapedText += "\\n"; break;case "\r": $escapedText += "\\r"; break;default: $escapedText += $c; break;}}return $escapedText;}proc string booleanAsStringLiteral(int $value) {return (($value == 0) ? "false" : "true");}proc string floatAsStringLiteral(float $value) {string $literal = (string) $value;if (!`gmatch $literal "*e*"` && !`gmatch $literal "*.*"`) $literal += ".0";return $literal;}proc string intAsStringLiteral(int $value) {return ((string) $value);}proc string stringAsStringLiteral(string $value) {return ("\"" + escapeStringForLiteral($value) + "\"");}proc string booleanArrayAsStringLiteral(int $values[]) {string $stringValues[];for ($i = 0; $i < `size $values`; $i++) {$stringValues[$i] = booleanAsStringLiteral($values[$i]);}return ("{" + stringArrayToString($stringValues, ", ") + "}");}proc string floatArrayAsStringLiteral(float $values[]) {string $stringValues[];for ($i = 0; $i < `size $values`; $i++) {$stringValues[$i] = floatAsStringLiteral($values[$i]);}return ("{" + stringArrayToString($stringValues, ", ") + "}");}proc string intArrayAsStringLiteral(int $values[]) {return ("{" + intArrayToString($values, ", ") + "}");}proc string stringArrayAsStringLiteral(string $values[]) {string $stringValues[];for ($i = 0; $i < `size $values`; $i++) {$stringValues[$i] = stringAsStringLiteral($values[$i]);}return ("{" + stringArrayToString($stringValues, ", ") + "}");}proc string join(string $inputs[], string $separator, int $ignoreEmpty) {int $numInputs = `size $inputs`;if (!$numInputs || ($numInputs == 1 && !`size $inputs[0]`)) return "";if ($ignoreEmpty) {string $buffer[];for ($input in $inputs) {if (`size $input`) $buffer[`size $buffer`] = $input;}return stringArrayToString($buffer, $separator);}else {return stringArrayToString($inputs, $separator);}}proc string strip(string $input) {return `python("'" + escapeStringForPythonAtString($input) + "'.strip()")`;}proc string regexSearchGroup(string $pattern, string $input, string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");string $result = `python("(lambda m: m.group() if m else None)(re.search(" + $pattern + ", " + $input + "))")`;return $result;}proc int[] regexSearchSpan(string $pattern, string $input, string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");int $result[] = `python("(lambda m: m.span() if m else None)(re.search(" + $pattern + ", " + $input + "))")`;return $result;}proc string[] regexMatchGroups(string $pattern, string $input, string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");string $result[] = `python("tuple([m.group() for m in re.finditer(" + $pattern + ", " + $input + ")])")`;return $result;}proc string[] regexMatchSubGroups(string $pattern, string $input, string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");string $result[] = `python("sum([m.groups() for m in re.finditer(" + $pattern + ", " + $input + ")], ())")`;return $result;}proc int[] regexMatchSpans(string $pattern, string $input, string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");int $result[] = `python("sum([m.span() for m in re.finditer(" + $pattern + ", " + $input + ")], ())")`;return $result;}proc int regexIsMatch(string $pattern, string $input, string $flags) {return (`size (regexSearchGroup($pattern, $input, $flags))` > 0);}proc string[] regexSplit(string $pattern, string $input, string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");string $result[] = `python("tuple(re.split(" + $pattern + ", " + $input + "))")`;return $result;}proc string regexReplace(string $pattern,string $replacement,string $input,string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$replacement = "'" + escapeStringForPythonAtString($replacement) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");string $result = `python("re.sub(" + $pattern + ", " + $replacement + ", " + $input + ")")`;return $result;}proc string getClipboardText() {python("from PySide2 import QtGui");python("cb = QtGui.QClipboard()");return python("cb.text()");}proc setClipboardText(string $text) {python("from PySide2 import QtGui");python("cb = QtGui.QClipboard()");python("cb.setText('" + escapeStringForPythonAtString($text) + "')");}proc string dictSanitize(string $input) {string $pattern = "[=;]";if (regexIsMatch($pattern, $input, "")) {return regexReplace($pattern, "_", $input, "");}else {return $input;}}proc string[] dictSanitizeArray(string $input[]) {string $result[];for ($i = 0; $i < `size $input`; $i++) {$result[$i] = dictSanitize($input[$i]);}return $result;}proc string[] dictExtractItems(string $dict) {string $items[];string $buffer[] = regexSplit(";", $dict, "");for ($item in $buffer) {if (!`size $item`) continue;$items[`size $items`] = $item;}return $items;}proc int dictIsKeyEquals(string $item, string $key) {return (`size $key` && `gmatch $item ($key + "=*")`);}proc string dictExtractKey(string $item) {if (!`gmatch $item "?*=*"`) return "";return regexReplace("^([^=]+)=.*", "\\1", $item, "");}proc string dictExtractValue(string $item) {if (!`gmatch $item "?*=*"`) return "";return regexReplace("^[^=]+=", "", $item, "");}proc string dictGetValue(string $dict, string $key) {string $value;if (!`size $key`) return $value;string $items[] = dictExtractItems($dict);for ($item in $items) {if (dictIsKeyEquals($item, $key)) {$value = dictExtractValue($item);break;}}return $value;}proc string[] dictKeys(string $dict) {string $keys[];string $items[] = dictExtractItems($dict);for ($item in $items) {string $key = dictExtractKey($item);if (!`size $key`) continue;$keys[`size $keys`] = $key;}return $keys;}proc int dictContainsKey(string $dict, string $key) {if (!`size $key`) return false;string $keys[] = dictKeys($dict);return stringArrayContains($key, $keys);}proc string dictAddItem(string $dict, string $key, string $value) {if (!`size $key`) return $dict;string $newDict;int $isOverwrite;string $items[] = dictExtractItems($dict);for ($item in $items) {if (dictIsKeyEquals($item, $key)) {$isOverwrite = true;$newDict += $key + "=" + $value + ";";}else {$newDict += $item + ";";}}if (!$isOverwrite) {$newDict += $key + "=" + $value + ";";}return $newDict;}proc string dictAddBoolean(string $dict, string $key, int $value) {return dictAddItem($dict, dictSanitize($key), booleanAsStringLiteral($value));}proc string dictAddFloat(string $dict, string $key, float $value) {return dictAddItem($dict, dictSanitize($key), floatAsStringLiteral($value));}proc string dictAddInt(string $dict, string $key, int $value) {return dictAddItem($dict, dictSanitize($key), intAsStringLiteral($value));}proc string dictAddString(string $dict, string $key, string $value) {$value = dictSanitize($value);return dictAddItem($dict, dictSanitize($key), stringAsStringLiteral($value));}proc string dictAddBooleanArray(string $dict, string $key, int $value[]) {return dictAddItem($dict, dictSanitize($key), booleanArrayAsStringLiteral($value));}proc string dictAddFloatArray(string $dict, string $key, float $value[]) {return dictAddItem($dict, dictSanitize($key), floatArrayAsStringLiteral($value));}proc string dictAddIntArray(string $dict, string $key, int $value[]) {return dictAddItem($dict, dictSanitize($key), intArrayAsStringLiteral($value));}proc string dictAddStringArray(string $dict, string $key, string $value[]) {$value = dictSanitizeArray($value);return dictAddItem($dict, dictSanitize($key), stringArrayAsStringLiteral($value));}proc int dictGetBoolean(string $dict, string $key, int $default) {string $value = dictGetValue($dict, $key);if ($value == "true") {return true;}else if ($value == "false") {return false;}return $default;}proc float dictGetFloat(string $dict, string $key, float $default) {string $value = dictGetValue($dict, $key);if (`size $value`) return ((float) $value);return $default;}proc int dictGetInt(string $dict, string $key, int $default) {string $value = dictGetValue($dict, $key);if (`size $value`) return ((int) $value);return $default;}proc string dictGetString(string $dict, string $key, string $default) {string $value = dictGetValue($dict, $key);if (`size $value`) return `eval ("format -s " + $value + " \"^1s\";")`;return $default;}global int $dictBooleanArrayBuffer[];global float $dictFloatArrayBuffer[];global int $dictIntArrayBuffer[];global string $dictStringArrayBuffer[];proc int[] dictGetBooleanArray(string $dict, string $key, int $default[]) {global int $dictBooleanArrayBuffer[];clear $dictBooleanArrayBuffer;string $value = dictGetValue($dict, $key);if (`size $value`) {eval ("$dictBooleanArrayBuffer = " + $value + ";");return $dictBooleanArrayBuffer;}return $default;}proc float[] dictGetFloatArray(string $dict, string $key, float $default[]) {global float $dictFloatArrayBuffer[];clear $dictFloatArrayBuffer;string $value = dictGetValue($dict, $key);if (`size $value`) {eval ("$dictFloatArrayBuffer = " + $value + ";");return $dictFloatArrayBuffer;}return $default;}proc int[] dictGetIntArray(string $dict, string $key, int $default[]) {global int $dictIntArrayBuffer[];clear $dictIntArrayBuffer;string $value = dictGetValue($dict, $key);if (`size $value`) {eval ("$dictIntArrayBuffer = " + $value + ";");return $dictIntArrayBuffer;}return $default;}proc string[] dictGetStringArray(string $dict, string $key, string $default[]) {global string $dictStringArrayBuffer[];clear $dictStringArrayBuffer;string $value = dictGetValue($dict, $key);if (`size $value`) {eval ("$dictStringArrayBuffer = " + $value + ";");return $dictStringArrayBuffer;}return $default;}proc string dictRemove(string $dict, string $key) {if (!`size $key`) return $dict;string $newDict;string $items[] = dictExtractItems($dict);for ($item in $items) {string $itemKey = dictExtractKey($item);if ($itemKey == $key) continue;$newDict += $item + ";";}return $newDict;}
/*2.1.0:UIControl*/global string $nkUIControls[];proc appendUIControls(string $controls[]) {global string $nkUIControls[];for ($control in $controls) {$nkUIControls[`size $nkUIControls`] = $control;}}proc string getUIControl(string $root, string $end) {global string $nkUIControls[];string $path;for ($control in $nkUIControls) {string $buffer[];int $depth = `tokenize $control "|" $buffer`;string $first = ($depth > 0) ? $buffer[0] : "";string $last = ($depth > 0) ? $buffer[$depth - 1] : "";if ($first == $root && $last == $end) {$path = $control;break;}}return $path;}proc removeUIControls(string $root, string $end) {global string $nkUIControls[];string $paths[];for ($control in $nkUIControls) {string $buffer[];int $depth = `tokenize $control "|" $buffer`;string $first = ($depth > 0) ? $buffer[0] : "";string $last = ($depth > 0) ? $buffer[$depth - 1] : "";int $shouldRemove = (!`size $end`) ? $first == $root : $first == $root && $last == $end;if ($shouldRemove) $paths[`size $paths`] = $control;}if (`size $paths` > 0) {$nkUIControls = stringArrayRemove($paths, $nkUIControls);}}proc string uiControlTypeOf(string $control) {string $type = `objectTypeUI $control`;if ($type == "floatingWindow") $type = "window";return $type;}proc int qEnable(string $control) {string $type = uiControlTypeOf($control);if ($type == "window" || $type == "workspaceControl") return true;return `control -q -en $control`;}proc eEnable(int $bValue, string $control) {string $type = uiControlTypeOf($control);if ($type == "window" || $type == "workspaceControl") return;control -e -en $bValue $control;}proc int qExists(string $control) {return `control -q -ex $control`;}proc int qVisible(string $control) {return `control -q -vis $control`;}proc eVisible(int $bValue, string $control) {control -e -vis $bValue $control;}proc float qFloat(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eFloat(string $type, string $flag, float $fValue, string $control) {eval $type "-e" $flag $fValue $control;}proc int qInt(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eInt(string $type, string $flag, int $iValue, string $control) {eval $type "-e" $flag $iValue $control;}proc string qString(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eString(string $type, string $flag, string $sValue, string $control) {eval $type "-e" $flag ("\"" + $sValue + "\"") $control;}proc float[] qFloatArray(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc int[] qIntArray(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc string[] qStringArray(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eStringArray(string $type, string $flag, string $sValues[], string $control) {for ($sValue in $sValues) {eString($type, $flag, $sValue, $control);}}proc eOrderedFloat(string $type, string $flag, float $fValues[], string $control) {for ($i = 0; $i < `size $fValues`; $i++) {eFloat($type, ($flag + ($i + 1)), $fValues[$i], $control);}}proc eOrderedInt(string $type, string $flag, int $iValues[], string $control) {for ($i = 0; $i < `size $iValues`; $i++) {eInt($type, ($flag + ($i + 1)), $iValues[$i], $control);}}proc eOrderedString(string $type, string $flag, string $sValues[], string $control) {for ($i = 0; $i < `size $sValues`; $i++) {eString($type, ($flag + ($i + 1)), $sValues[$i], $control);}}proc int qIndex(string $type, string $flag, string $control) {return (qInt($type, $flag, $control) - 1);}proc eIndex(string $type, string $flag, int $index, string $control) {eInt($type, $flag, ($index + 1), $control);}proc int[] qIndexArray(string $type, string $flag, string $control) {int $indices[] = qIntArray($type, $flag, $control);for ($i = 0; $i < `size $indices`; $i++) $indices[$i] -= 1;return $indices;}proc eIndexArray(string $type, string $flag, int $indices[], string $control) {for ($i in $indices) {eInt($type, $flag, $i + 1, $control);}}proc int qFirstIndex(string $type, string $flag, string $control) {int $indices[] = qIndexArray($type, $flag, $control);return  ((`size $indices`) ? $indices[0] : -1);}proc string qFirstString(string $type, string $flag, string $control) {string $sValues[] = qStringArray($type, $flag, $control);return  ((`size $sValues`) ? $sValues[0] : "");}proc eIntString(string $type, string $flag, int $iValue, string $sValue, string $control) {eval $type "-e" $flag $iValue ("\"" + $sValue + "\"") $control;}proc eIndexString(string $type, string $flag, int $index, string $sValue, string $control) {eIntString($type, $flag, $index + 1, $sValue, $control);}proc eStringInt(string $type, string $flag, string $sValue, int $iValue, string $control) {eval $type "-e" $flag ("\"" + $sValue + "\"") $iValue $control;}proc executeUIControl(string $type, string $flag, string $control) {eval $type "-e" $flag $control;}proc string getParentableWindow(string $control) {if (uiControlTypeOf($control) == "workspaceControl" && !qInt("workspaceControl", "-fl", $control)) {return "MayaWindow";}else {return $control;}}proc windowClose(string $control) {if (qExists($control)) {string $type = uiControlTypeOf($control);switch ($type) {case "window": deleteUI $control; break;case "workspaceControl": executeUIControl("workspaceControl", "-cl", $control);break;default: break;}}}proc windowPrefRemove(string $type, string $control) {if (qExists($control)) windowClose($control);switch ($type) {case "window": if (qInt("windowPref", "-ex", $control)) {windowPref -r $control;}break;case "workspaceControl": if (qInt("workspaceControlState", "-ex", $control)) {workspaceControlState -r $control;}break;default: break;}}proc string buildWorkspaceControl(string $workspaceControlName,string $label,string $buildProcName,string $buildProcFilename) {string $control = $workspaceControlName;if (!qExists($workspaceControlName)) {string $uiScript = "if (!`exists " + $buildProcName + "`)" + " source \"" + $buildProcFilename + "\"; " + $buildProcName + "();";$control = `workspaceControl -dup false -fl true -l $label -rt false -ui $uiScript$workspaceControlName`;}return $control;}
// -----------------------------------------------------------------------------
/*1.0.0:DictAttribute*/proc int hasDictAttribute(string $n, string $attribute) {return existsAttribute($n, $attribute);}proc int lockDictAttribute(string $n, string $attribute, int $state) {if (!hasDictAttribute($n, $attribute)) return false;setAttributeLock($n, $attribute, $state);return true;}proc string addDictAttribute(string $n, string $attribute) {string $path;if (!`objExists $n`) return $path;if (!hasDictAttribute($n, $attribute)) {addAttr -dt "string" -ln $attribute $n;lockDictAttribute($n, $attribute, true);}if (hasDictAttribute($n, $attribute)) $path = $n + "." + $attribute;return $path;}proc string getDictValue(string $n, string $attribute) {return ((hasDictAttribute($n, $attribute)) ? getStringAttribute($n, $attribute, "") : "");}proc int setDictValue(string $n, string $attribute, string $value) {if (!hasDictAttribute($n, $attribute)) return false;lockDictAttribute($n, $attribute, false);setStringAttribute($n, $attribute, $value);lockDictAttribute($n, $attribute, true);return true;}proc int removeFromDict(string $n, string $attribute, string $key) {if (!hasDictAttribute($n, $attribute) || !`size $key`) return false;string $dict = getDictValue($n, $attribute);$dict = dictRemove($dict, $key);return setDictValue($n, $attribute, $dict);}proc int getBooleanFromDict(string $n, string $attribute, string $key, int $default) {return dictGetBoolean(getDictValue($n, $attribute), $key, $default);}proc float getFloatFromDict(string $n, string $attribute, string $key, float $default) {return dictGetFloat(getDictValue($n, $attribute), $key, $default);}proc int getIntFromDict(string $n, string $attribute, string $key, int $default) {return dictGetInt(getDictValue($n, $attribute), $key, $default);}proc string getStringFromDict(string $n, string $attribute, string $key, string $default) {return dictGetString(getDictValue($n, $attribute), $key, $default);}proc int setBooleanToDict(string $n, string $attribute, string $key, int $value) {if (!hasDictAttribute($n, $attribute) || !`size $key`) return false;string $dict = getDictValue($n, $attribute);$dict = dictAddBoolean($dict, $key, $value);return setDictValue($n, $attribute, $dict);}proc int setFloatToDict(string $n, string $attribute, string $key, float $value) {if (!hasDictAttribute($n, $attribute) || !`size $key`) return false;string $dict = getDictValue($n, $attribute);$dict = dictAddFloat($dict, $key, $value);return setDictValue($n, $attribute, $dict);}proc int setIntToDict(string $n, string $attribute, string $key, int $value) {if (!hasDictAttribute($n, $attribute) || !`size $key`) return false;string $dict = getDictValue($n, $attribute);$dict = dictAddInt($dict, $key, $value);return setDictValue($n, $attribute, $dict);}proc int setStringToDict(string $n, string $attribute, string $key, string $value) {if (!hasDictAttribute($n, $attribute) || !`size $key`) return false;string $dict = getDictValue($n, $attribute);$dict = dictAddString($dict, $key, $value);return setDictValue($n, $attribute, $dict);}

// /////////////////////////////////////////////////////////////////////////////
// ドメイン
// /////////////////////////////////////////////////////////////////////////////
// /*-
// @var <boolean>
// */
// global int $nkBdnToolEditorWindowVisibility;

// /*-
// @returns <>
// */
// proc initializeEditorWindowParameters() {
//   global int $nkBdnToolEditorWindowVisibility;
//   $nkBdnToolEditorWindowVisibility = false;
// }

// /*-
// @param $state <boolean>
// @returns <>
// */
// proc setEditorWindowVisibility(int $state) {
//   print("setEditorWindowVisibility\n"); // debug
//   print("  state:" + $state + "\n"); // debug
//   global int $nkBdnToolEditorWindowVisibility;
//   $nkBdnToolEditorWindowVisibility = $state == true;
//   notifyInt(
//     "nkBdnToolEditorWindowVisibilityChanged",
//     $nkBdnToolEditorWindowVisibility
//   );
// }

// -----------------------------------------------------------------------------
// プラグイン
// -----------------------------------------------------------------------------
/*-
@returns <boolean>
*/
proc int isPluginLoaded() {
  // print("isPluginLoaded\n"); // debug
  return `pluginInfo -q -l "boneDynamicsNode"`;
}

/*-
@returns <>
*/
proc loadBdnPlugin() {
  // print("loadBdnPlugin\n"); // debug
  if (isPluginLoaded()) return;
  loadPlugin "boneDynamicsNode";
}

/*-
@returns <>
*/
proc unloadBdnPlugin() {
  // print("unloadBdnPlugin\n"); // debug
  if (!isPluginLoaded()) return;

  string $bdnNodes[] = `ls -typ "boneDynamicsNode"`;
  if (!`size $bdnNodes`) {
    unloadPlugin -f "boneDynamicsNode";
  }
  else {
    confirmDialog
        -b "OK" -cb "OK" -db "OK" -ds "OK"
        -m "Cannot unload because a bondDynamicsNode exists in the scene."
        -t "nkBdnTool";
  }
}

// -----------------------------------------------------------------------------
// アトリビュート
// -----------------------------------------------------------------------------
/*-
@param $sourceNodes <string[]>
@param $destNode <string>
@returns <>
*/
proc appendColliderAffectedBy(string $sourceNodes[], string $destNode) {
  // print("appendColliderAffectedBy\n"); // debug
  // print("  sourceNodes:{\n    " + stringArrayToString($sourceNodes, ",\n    ") + "\n  }\n"); // debug
  // print("  destNode   :" + $destNode + "\n"); // debug
  if (!existsAttribute($destNode, "colliderAffectedBy")) {
    addAttr -at "message" -ln "colliderAffectedBy" -m $destNode;
  }
  if (!existsAttribute($destNode, "colliderAffectedBy")) return;

  int $index = `getAttr -s ($destNode + ".colliderAffectedBy")`;
  for ($sourceNode in $sourceNodes) {
    if (!existsAttribute($sourceNode, "message")) continue;

    connectAttr -f
        ($sourceNode + ".message")
        ($destNode + ".colliderAffectedBy[" + $index + "]");
    $index++;
  }
}

/*-
translateとrotateのロックを解除する。
@param $node <string>
@returns <boolean> translateとrotateのロックが全て解除されているかどうか。
@remarks リファレンスの場合は解除しない。
*/
proc int unlockTransformAttributes(string $node) {
  // print("unlockTransformAttributes\n"); // debug
  // print("  node:" + $node + "\n"); // debug
  if (!`objExists $node`) return false;

  if (!isNodeReferenced($node)) {
    batchSetAttributeLock({$node}, {"tx", "ty", "tz", "rx", "ry", "rz"}, false);
  }
  return (
    !isAttributeLocked($node, "tx")
        && !isAttributeLocked($node, "ty")
        && !isAttributeLocked($node, "tz")
        && !isAttributeLocked($node, "rx")
        && !isAttributeLocked($node, "ry")
        && !isAttributeLocked($node, "rz")
  );
}

/*-
@param $bdnNode <string>
@returns <string>
*/
proc string bdnAttributesToDict(string $bdnNode) {
  // print("bdnAttributesToDict\n"); // debug
  // print("  bdnNode:" + $bdnNode + "\n"); // debug
  string $dict;
  if (!isPluginLoaded()) return $dict;
  if (!isType($bdnNode, {"boneDynamicsNode"}, true)) return $dict;

  $dict = dictAddFloat($dict, "damping", getFloatAttribute($bdnNode, "damping", 0.1));
  $dict = dictAddFloat($dict, "elasticity", getFloatAttribute($bdnNode, "elasticity", 30.0));
  $dict = dictAddInt($dict, "elasticForceFunction", getIntAttribute($bdnNode, "elasticForceFunction", 0));
  $dict = dictAddFloat($dict, "stiffness", getFloatAttribute($bdnNode, "stiffness", 0.0));
  $dict = dictAddFloat($dict, "mass", getFloatAttribute($bdnNode, "mass", 1.0));
  $dict = dictAddFloat($dict, "gravityX", getFloatAttribute($bdnNode, "gravityX", 0.0));
  $dict = dictAddFloat($dict, "gravityY", getFloatAttribute($bdnNode, "gravityY", -980.0));
  $dict = dictAddFloat($dict, "gravityZ", getFloatAttribute($bdnNode, "gravityZ", 0.0));
  $dict = dictAddFloat($dict, "gravityMultiply", getFloatAttribute($bdnNode, "gravityMultiply", 0.0));
  $dict = dictAddFloat($dict, "additionalForceScale", getFloatAttribute($bdnNode, "additionalForceScale", 1.0));
  $dict = dictAddBoolean($dict, "enableTurbulence", getIntAttribute($bdnNode, "enableTurbulence", false));
  $dict = dictAddInt($dict, "turbulenceSeed", getIntAttribute($bdnNode, "turbulenceSeed", 0));
  $dict = dictAddFloat($dict, "turbulenceStrength", getFloatAttribute($bdnNode, "turbulenceStrength", 10.0));
  $dict = dictAddFloat($dict, "turbulenceVectorChangeScale", getFloatAttribute($bdnNode, "turbulenceVectorChangeScale", 0.05));
  $dict = dictAddFloat($dict, "turbulenceVectorChangeMax", getFloatAttribute($bdnNode, "turbulenceVectorChangeMax", 0.1));
  $dict = dictAddBoolean($dict, "enableAngleLimit", getIntAttribute($bdnNode, "enableAngleLimit", false));
  $dict = dictAddFloat($dict, "angleLimit", getFloatAttribute($bdnNode, "angleLimit", 60.0));
  $dict = dictAddFloat($dict, "radius", getFloatAttribute($bdnNode, "radius", 0.0));
  $dict = dictAddInt($dict, "iterations", getIntAttribute($bdnNode, "iterations", 5));
  $dict = dictAddBoolean($dict, "enableGroundCol", getIntAttribute($bdnNode, "enableGroundCol", false));
  $dict = dictAddFloat($dict, "groundHeight", getFloatAttribute($bdnNode, "groundHeight", 0.0));
  $dict = dictAddFloat($dict, "meshColCutoff", getFloatAttribute($bdnNode, "meshColCutoff", 10.0));
  return $dict;
}

/*-
@param $dict <string>
@param $bdnNodes <string[]>
@returns <>
*/
proc applyDictToBdnAttributes(string $dict, string $bdnNodes[]) {
  // print("applyDictToBdnAttributes\n"); // debug
  // print("  dict    :" + $dict + "\n"); // debug
  // print("  bdnNodes:{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n"); // debug
  if (!isPluginLoaded() || !`size $dict`) return;

  float $damping = dictGetFloat($dict, "damping", 0.1);
  float $elasticity = dictGetFloat($dict, "elasticity", 30.0);
  int $elasticForceFunction = dictGetInt($dict, "elasticForceFunction", 0);
  float $stiffness = dictGetFloat($dict, "stiffness", 0.0);
  float $mass = dictGetFloat($dict, "mass", 1.0);
  float $gravityX = dictGetFloat($dict, "gravityX", 0.0);
  float $gravityY = dictGetFloat($dict, "gravityY", -980.0);
  float $gravityZ = dictGetFloat($dict, "gravityZ", 0.0);
  float $gravityMultiply = dictGetFloat($dict, "gravityMultiply", 0.0);
  float $additionalForceScale = dictGetFloat($dict, "additionalForceScale", 1.0);
  int $enableTurbulence = dictGetBoolean($dict, "enableTurbulence", false);
  int $turbulenceSeed = dictGetInt($dict, "turbulenceSeed", 0);
  float $turbulenceStrength = dictGetFloat($dict, "turbulenceStrength", 10.0);
  float $turbulenceVectorChangeScale = dictGetFloat($dict, "turbulenceVectorChangeScale", 0.05);
  float $turbulenceVectorChangeMax = dictGetFloat($dict, "turbulenceVectorChangeMax", 0.1);
  int $enableAngleLimit = dictGetBoolean($dict, "enableAngleLimit", false);
  float $angleLimit = dictGetFloat($dict, "angleLimit", 60.0);
  float $radius = dictGetFloat($dict, "radius", 0.0);
  int $iterations = dictGetInt($dict, "iterations", 5);
  int $enableGroundCol = dictGetBoolean($dict, "enableGroundCol", false);
  float $groundHeight = dictGetFloat($dict, "groundHeight", 0.0);
  float $meshColCutoff = dictGetFloat($dict, "meshColCutoff", 10.0);

  for ($bdnNode in $bdnNodes) {
    if (!isType($bdnNode, {"boneDynamicsNode"}, true)) continue;

    setFloatAttribute($bdnNode, "damping", $damping);
    setFloatAttribute($bdnNode, "elasticity", $elasticity);
    setIntAttribute($bdnNode, "elasticForceFunction", $elasticForceFunction);
    setFloatAttribute($bdnNode, "stiffness", $stiffness);
    setFloatAttribute($bdnNode, "mass", $mass);
    setFloatAttribute($bdnNode, "gravityX", $gravityX);
    setFloatAttribute($bdnNode, "gravityY", $gravityY);
    setFloatAttribute($bdnNode, "gravityZ", $gravityZ);
    setFloatAttribute($bdnNode, "gravityMultiply", $gravityMultiply);
    setFloatAttribute($bdnNode, "additionalForceScale", $additionalForceScale);
    setIntAttribute($bdnNode, "enableTurbulence", $enableTurbulence);
    setIntAttribute($bdnNode, "turbulenceSeed", $turbulenceSeed);
    setFloatAttribute($bdnNode, "turbulenceStrength", $turbulenceStrength);
    setFloatAttribute($bdnNode, "turbulenceVectorChangeScale", $turbulenceVectorChangeScale);
    setFloatAttribute($bdnNode, "turbulenceVectorChangeMax", $turbulenceVectorChangeMax);
    setIntAttribute($bdnNode, "enableAngleLimit", $enableAngleLimit);
    setFloatAttribute($bdnNode, "angleLimit", $angleLimit);
    setFloatAttribute($bdnNode, "radius", $radius);
    setIntAttribute($bdnNode, "iterations", $iterations);
    setIntAttribute($bdnNode, "enableGroundCol", $enableGroundCol);
    setFloatAttribute($bdnNode, "groundHeight", $groundHeight);
    setFloatAttribute($bdnNode, "meshColCutoff", $meshColCutoff);
  }
}

/*-
@param $bdnNodes <string[]>
@returns <>
*/
proc initializeBdnAttributes(string $bdnNodes[]) {
  // print("initializeBdnAttributes\n"); // debug
  // print("  bdnNodes:{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n"); // debug
  if (!isPluginLoaded()) return;

  string $dict = "damping=0.1;elasticity=30.0;elasticForceFunction=0;stiffness=0.0;mass=1.0;gravityX=0.0;gravityY=-980.0;gravityZ=0.0;gravityMultiply=0.0;additionalForceScale=1.0;enableTurbulence=false;turbulenceSeed=0;turbulenceStrength=10.0;turbulenceVectorChangeScale=0.05;turbulenceVectorChangeMax=0.1;enableAngleLimit=false;angleLimit=60.0;radius=0.0;iterations=5;enableGroundCol=false;groundHeight=0.0;meshColCutoff=10.0;";
  applyDictToBdnAttributes($dict, $bdnNodes);
}

// -----------------------------------------------------------------------------
// ノード
// -----------------------------------------------------------------------------
/*-
@returns <string>
*/
proc string getTimeNode() {
  string $timeNodes[] = gatherNodes({"time"}, true, false, "");
  return ((`size $timeNodes`) ? $timeNodes[0] : "");
}

// -----------------------------------------------------------------------------
// BDNノード
// -----------------------------------------------------------------------------
/*-
@param $n <string>
@returns <string>
*/
proc string initBDNNode(string $n) {
  if (`objExists $n`) {
    if (!hasDictAttribute($n, "bdnData")) {
      addDictAttribute($n, "bdnData");
    }
    setStringToDict($n, "bdnData", "type", "bdn");
  }
  return $n;
}

/*-
@param $n <string>
@param $type <string>
@returns <string>
*/
proc string initGroupNode(string $n, string $type) {
  if (`objExists $n`) {
    if (!hasDictAttribute($n, "bdnData")) {
      addDictAttribute($n, "bdnData");
    }
    setStringToDict($n, "bdnData", "type", $type + "Group");
  }
  return $n;
}

/*-
@param $n <string>
@param $spaceType <string>
| 値         | 種類       |
| ---------- | ---------- |
| `proxy`    | プロキシ   |
| `target`   | ターゲット |
| `collider` | コライダ   |
@returns <string>
*/
proc string initSpaceNode(string $n, string $spaceType) {
  if (`objExists $n`) {
    if (!hasDictAttribute($n, "bdnData")) {
      addDictAttribute($n, "bdnData");
    }
    setStringToDict($n, "bdnData", "type", "space");
    setStringToDict($n, "bdnData", "spaceType", $spaceType);
  }
  return $n;
}

/*-
@param $n <string>
@param $jointKind <string>
| 値       | 種類           |
| -------- | -------------- |
| `proxy`  | ダイナミクス用 |
| `target` | 目標姿勢用     |
@param $jointType <string>
| 値       | 種類 |
| -------- | ---- |
| `normal` | 通常 |
| `branch` | 分岐 |
| `end`    | 終端 |
`
@returns <string>
*/
proc string initJointNode(string $n, string $jointKind, string $jointType) {
  if (`objExists $n`) {
    if (!hasDictAttribute($n, "bdnData")) {
      addDictAttribute($n, "bdnData");
    }
    setStringToDict($n, "bdnData", "type", "joint");
    setStringToDict($n, "bdnData", "jointKind", $jointKind);
    setStringToDict($n, "bdnData", "jointType", $jointType);
  }
  return $n;
}

/*-
@param $n <string>
@returns <string>
*/
proc string initRadiusNode(string $n) {
  if (`objExists $n`) {
    if (!hasDictAttribute($n, "bdnData")) {
      addDictAttribute($n, "bdnData");
    }
    setStringToDict($n, "bdnData", "type", "radius");
  }
  return $n;
}

/*-
@param $n <string>
@param $colliderType <string>
| 値              | 種類     |
| --------------- | -------- |
| `infinitePlane` | 無限平面 |
| `sphere`        | 球       |
| `capsule`       | カプセル |
@returns <string>
*/
proc string initColliderNode(string $n, string $colliderType) {
  if (`objExists $n`) {
    if (!hasDictAttribute($n, "bdnData")) {
      addDictAttribute($n, "bdnData");
    }
    setStringToDict($n, "bdnData", "type", "collider");
    setStringToDict($n, "bdnData", "colliderType", $colliderType);
  }
  return $n;
}

/*-
@param $n <string>
@returns <string>
*/
proc string initColliderComponentNode(string $n) {
  if (`objExists $n`) {
    if (!hasDictAttribute($n, "bdnData")) {
      addDictAttribute($n, "bdnData");
    }
    setStringToDict($n, "bdnData", "type", "colliderComponent");
  }
  return $n;
}

/*-
@param $n <string>
@returns <string>
*/
proc string getBdnType(string $n) {
  return getStringFromDict($n, "bdnData", "type", "");
}

/*-
@param $n <string>
@param $type <string>
@returns <boolean>
*/
proc int isBdnType(string $n, string $type) {
  return (getBdnType($n) == $type);
}

/*-
@param $n <string>
@returns <string>
*/
proc string getSpaceType(string $n) {
  return getStringFromDict($n, "bdnData", "spaceType", "");
}

/*-
@param $n <string>
@param $type <string>
@returns <boolean>
*/
proc int isSpaceType(string $n, string $type) {
  return (getSpaceType($n) == $type);
}

/*-
@param $n <string>
@returns <string>
*/
proc string getJointKind(string $n) {
  return getStringFromDict($n, "bdnData", "jointKind", "");
}

/*-
@param $n <string>
@param $kind <string>
@returns <boolean>
*/
proc int isJointKind(string $n, string $kind) {
  return (getJointKind($n) == $kind);
}

/*-
@param $n <string>
@returns <string>
*/
proc string getJointType(string $n) {
  return getStringFromDict($n, "bdnData", "jointType", "");
}

/*-
@param $n <string>
@param $type <string>
@returns <boolean>
*/
proc int isJointType(string $n, string $type) {
  return (getJointType($n) == $type);
}

/*-
@param $n <string>
@returns <string>
*/
proc string getColliderType(string $n) {
  return getStringFromDict($n, "bdnData", "colliderType", "");
}

/*-
@param $n <string>
@param $type <string>
@returns <boolean>
*/
proc int isColliderType(string $n, string $type) {
  return (getColliderType($n) == $type);
}

/*-
@param $selectedOnly <boolean>
@returns <string[]>
*/
proc string[] gatherBdnNodes(int $selectedOnly) {
  string $bdnNodes[];
  if (!isPluginLoaded()) return $bdnNodes;

  $bdnNodes = gatherNodes({"boneDynamicsNode"}, true, $selectedOnly, "");
  return $bdnNodes;
}

/*-
@param $selectedOnly <boolean>
@returns <string[]>
*/
proc string[] gatherDynamicsNodes(int $selectedOnly) {
  string $dynamicsNodes[];
  return $dynamicsNodes;
}

/*-
@param $selectedOnly <boolean>
@returns <string[]>
*/
proc string[] gatherColliderNodes(int $selectedOnly) {
  string $colliderNodes[];
  string $transformNodes[] = gatherNodes({"transform"}, true, $selectedOnly, "");
  for ($node in $transformNodes) {
    string $bdnType = getBdnType($node);
    if ($bdnType == "collider") {
      $colliderNodes[`size $colliderNodes`] = $node;
    }
    else if ($bdnType == "colliderComponent") {
      string $parentNode = getParentNode($node);
      if (isBdnType($parentNode, "collider")) {
        $colliderNodes[`size $colliderNodes`] = $parentNode;
      }
    }
    else if ($bdnType == "space" && isSpaceType($node, "collider")) {
      string $childNodes[] = collectChildNodes($node);
      for ($childNode in $childNodes) {
        if (isBdnType($childNode, "collider")) {
          $colliderNodes[`size $colliderNodes`] = $childNode;
        }
      }
    }
  }
  $colliderNodes = stringArrayRemoveDuplicates($colliderNodes);
  return $colliderNodes;
}

/*-
@returns <>
*/
proc deleteAllBdnNodes() {
  print("deleteAllBdnNodes\n"); // debug
  // string $bdnNodes[] = gatherBdnNodes(false);
  // select -r $bdnNodes;
}

// -----------------------------------------------------------------------------
// 階層探索用スクリプト
// -----------------------------------------------------------------------------
/*-
@param $sourceId <string>
@param $parentId <string>
@returns <string[]>
*/
global proc string[] nkBdnToolGenerateProxyScript(
  string $sourceId,
  string $parentId
) {
  string $sourceNode = uuidToLongName($sourceId);
  string $parentNode = uuidToLongName($parentId);
  if (!`objExists $sourceNode`) return {$sourceId, $parentId};

  string $nodeId = $parentId;
  if (isSelected($sourceNode)) {
    // print("sourceNode:" + $sourceNode + "\n"); // debug
    // print("parentNode:" + $parentNode + "\n"); // debug
    string $name = toShortName($sourceNode);
    if (!`objExists $parentNode`) {
      $parentNode = initSpaceNode(createTransform($name + "_Proxy_SPC", $parentNode, true, $sourceNode, {}), "proxy");

      // ノード接続
      addAttr -at "message" -ln "bdnBindSource" $parentNode;
      // addAttr -at "message" -ln "proxyTarget" $parentNode;
      string $parentSourceNode = getParentNode($sourceNode);
      if (`objExists $parentSourceNode`) {
        connectAttr -f ($parentSourceNode + ".message") ($parentNode + ".bdnBindSource");
      }
    }
    string $node = initJointNode(createJoint($name + "_Proxy", $parentNode, true, $sourceNode, {}), "proxy", "normal");
    $nodeId = toUUID($node);
    // setFloatAttribute($node, "radi", 0.5);

    // ノード接続
    addAttr -at "message" -ln "bdnBindTarget" $node;
    // addAttr -at "message" -ln "proxyTarget" $node;
    connectAttr -f ($sourceNode + ".message") ($node + ".bdnBindTarget");

    // sscをここで設定してもなぜか反映されない
    // setIntAttribute($node, "ssc", false);
  }
  return {$nodeId, $sourceId};
}

/*-
@param $sourceId <string>
@param $parentId <string>
@returns <string[]>
*/
global proc string[] nkBdnToolGenerateTargetScript(
  string $sourceId,
  string $parentId
) {
  string $sourceNode = uuidToLongName($sourceId);
  string $parentNode = uuidToLongName($parentId);
  if (!`objExists $sourceNode`) return {$sourceId, $parentId};

  string $nodeId = $parentId;
  if (isSelected($sourceNode)) {
    // print("sourceNode:" + $sourceNode + "\n"); // debug
    // print("parentNode:" + $parentNode + "\n"); // debug
    string $name = toShortName($sourceNode);
    if (!`objExists $parentNode`) {
      $parentNode = initSpaceNode(createTransform($name + "_Target_SPC", $parentNode, true, $sourceNode, {}), "target");

      // ノード接続
      addAttr -at "message" -ln "bdnBindSource" $parentNode;
      string $parentSourceNode = getParentNode($sourceNode);
      if (`objExists $parentSourceNode`) {
        connectAttr -f ($parentSourceNode + ".message") ($parentNode + ".bdnBindSource");
      }
    }
    string $node = initJointNode(createJoint($name + "_Target", $parentNode, true, $sourceNode, {}), "target", "normal");
    $nodeId = toUUID($node);
    // setFloatAttribute($node, "radi", 1.0);

    // ノード接続
    addAttr -at "message" -ln "bdnSource" $node;
    connectAttr -f ($sourceNode + ".message") ($node + ".bdnSource");

    // sscをここで設定してもなぜか反映されない
    // setIntAttribute($node, "ssc", false);
  }
  return {$nodeId, $sourceId};
}

// -----------------------------------------------------------------------------
// ダイナミクスユニット
// -----------------------------------------------------------------------------
/*-
スケルトンの分岐を処理する。
@param $nodes <string[]>
@param $branchAimVector <float[3]>
@param $branchUpVector <float[3]>
@returns <string[]>
*/
proc string[] splitSkeletonBranch(
  string $nodes[],
  float $branchAimVector[],
  float $branchUpVector[]
) {
  print("splitSkeletonBranch\n"); // debug
  print("  nodes          :{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  print("  branchAimVector:{" + floatArrayToString($branchAimVector, ", ") + "}\n"); // debug
  print("  branchUpVector :{" + floatArrayToString($branchUpVector, ", ") + "}\n"); // debug

  string $nodeIds[];
  for ($node in $nodes) {
    $nodeIds[`size $nodeIds`] = toUUID($node);
  }

  string $newNodes[];
  for ($nodeId in $nodeIds) {
    string $node = uuidToLongName($nodeId);
    $newNodes[`size $newNodes`] = $node;
    string $childNodes[] = collectChildNodes($node);
    if (`size $childNodes` > 1) {
      for ($childNode in $childNodes) {
        string $jointKind = getJointKind($childNode);
        initJointNode($childNode, $jointKind, "branch");
        string $name = toShortName($childNode);

        string $dummyAimNode = createTransform($name + "_Dummy", "", true, $node, {true, false, false});
        string $constraintNodes[] = `aimConstraint
            -aim $branchAimVector[0] $branchAimVector[1] $branchAimVector[2]
            -u $branchUpVector[0] $branchUpVector[1] $branchUpVector[2]
            -wuo $childNode
            -wut 2
            -wu 0.0 1.0 0.0
            $childNode
            $dummyAimNode`;

        string $branchIdtNode = initSpaceNode(createTransform($name + "_Branch_SPC", "", true, $dummyAimNode, {}), $jointKind);
        string $branchJointNode = initJointNode(createJoint($name + "_Branch", $branchIdtNode, true, $branchIdtNode, {}), $jointKind, "normal");
        // setFloatAttribute($branchJointNode, "radi", 0.5);
        setParentNode({$childNode}, $branchJointNode);
        $newNodes[`size $newNodes`] = $branchIdtNode;
        $newNodes[`size $newNodes`] = $branchJointNode;

        delete $dummyAimNode;

        // ノード接続
        addAttr -at "message" -ln "bdnBindSource" $branchIdtNode;
        addAttr -at "message" -ln "bdnBindTarget" $branchJointNode;
        connectAttr -f ($node + ".message") ($branchIdtNode + ".bdnBindSource");
        // `$branchJointNode`はソース無し
      }
    }
  }
  return $newNodes;
}

/*-
プロキシスケルトンの末端にジョイントを追加する。
@param $nodes <string[]>
@param $endJointOffset <float[3]>
@returns <string[]>
*/
proc string[] generateEndJoint(string $nodes[], float $endJointOffset[]) {
  print("generateDynamicsUnit\n"); // debug
  print("  nodes         :{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  print("  endJointOffset:{" + floatArrayToString($endJointOffset, ", ") + "}\n"); // debug

  string $newNodes[];
  for ($node in $nodes) {
    $newNodes[`size $newNodes`] = $node;
    string $childNodes[] = collectChildNodes($node);
    if (!`size $childNodes`) {
      string $name = toShortName($node);
      string $jointKind = getJointKind($node);
      string $jointNode = initJointNode(createJoint($name + "_End", $node, true, $node, {}), $jointKind, "end");
      // setFloatAttribute($jointNode, "radi", 0.5);
      $newNodes[`size $newNodes`] = $jointNode;

      // ノード接続
      addAttr -at "message" -ln "bdnBindTarget" $jointNode;

      // アトリビュート値設定
      setFloat3Attribute($jointNode, "t", $endJointOffset);
    }
  }
  return $newNodes;
}

/*-
@param $nodes <string[]>
@returns <string[]>
*/
proc string[] constraintSkeleton(string $nodes[]) {
  print("constraintSkeleton\n"); // debug
  print("  nodes:{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  string $constraintNodes[];
  for ($n in $nodes) {
    if (!(
      hasDictAttribute($n, "bdnData")
          && (existsAttribute($n, "bdnBindSource") || existsAttribute($n, "bdnBindTarget"))
    )) continue;

    string $bdnType = getBdnType($n);
    string $nodeName = toShortName($n);

    if ($bdnType == "space") {
      // string $sourceNodes[] = `listConnections -d false -p false -s true ($n + ".bdnBindSource")`;
      string $sourceNodes[] = getSourceConnections($n, {"bdnBindSource"}, "", {}, {});
      if (`size $sourceNodes` != 1) continue;

      string $sourceNode = longNameOf($sourceNodes[0]);
      print("  sourceNode:" + $sourceNode + "\n"); // debug
      string $prcstNodes[] = `parentConstraint -mo $sourceNode $n`;
      if (`size $prcstNodes`) {
        $constraintNodes[`size $constraintNodes`] = setNodeName(
          $prcstNodes[0],
          $nodeName + "_PRCST"
        );
      }
    }
    else if ($bdnType == "joint") {
      string $jointType = getJointType($n);
      // string $targetNodes[] = `listConnections -d false -p false -s true ($n + ".bdnBindTarget")`;
      string $targetNodes[] = getSourceConnections($n, {"bdnBindTarget"}, "", {}, {});
      if (`size $targetNodes` != 1) continue;

      string $targetNode = longNameOf($targetNodes[0]);
      print("  targetNode:" + $targetNode + "\n"); // debug
      if (!unlockTransformAttributes($targetNode)) continue;

      if ($jointType == "branch") {
        string $prcstNodes[] = `parentConstraint $n $targetNode`;
        if (`size $prcstNodes`) {
          $constraintNodes[`size $constraintNodes`] = setNodeName(
            $prcstNodes[0],
            $nodeName + "_PRCST"
          );
        }
      }
      else {
        string $orcstNodes[] = `orientConstraint $n $targetNode`;
        if (`size $orcstNodes`) {
          $constraintNodes[`size $constraintNodes`] = setNodeName(
            $orcstNodes[0],
            $nodeName + "_ORCST"
          );
        }
      }
    }
  }
  return $constraintNodes;
}

/*-
@param $nodes <string[]>
@returns <string[]>
*/
proc string[] generateBdnNodes(string $nodes[]) {
  print("generateBdnNodes\n"); // debug
  print("  nodes:{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  string $bdnNodes[];
  if (!isPluginLoaded()) return $bdnNodes;

  string $timeNode = getTimeNode();
  if (!`objExists $timeNode`) return $bdnNodes;

  string $jointNodes[];
  for ($n in $nodes) {
    if (!isBdnType($n, "joint")) continue;

    $jointNodes[`size $jointNodes`] = $n;
  }
  int $numJointNodes = `size $jointNodes`;
  for ($i = 0; $i < $numJointNodes - 1; $i++) {
    string $joint1Node = $jointNodes[$i];
    string $joint2Node = $jointNodes[$i + 1];
    if (isJointType($joint1Node, "end")) continue;

    string $bdnNode = uuidToLongName(toUUID(`createNode -n (toShortName($joint1Node) + "_BDN") -ss "boneDynamicsNode"`));
    connectAttr -f ($joint1Node + ".translate"          ) ($bdnNode    + ".boneTranslate"          );
    connectAttr -f ($joint1Node + ".jointOrient"        ) ($bdnNode    + ".boneJointOrient"        );
    connectAttr -f ($joint1Node + ".parentMatrix"       ) ($bdnNode    + ".boneParentMatrix"       );
    connectAttr -f ($joint1Node + ".parentInverseMatrix") ($bdnNode    + ".boneParentInverseMatrix");
    connectAttr -f ($joint2Node + ".translate"          ) ($bdnNode    + ".endTranslate"           );
    connectAttr -f ($timeNode   + ".outTime"            ) ($bdnNode    + ".time"                   );
    connectAttr -f ($bdnNode    + ".outputRotate"       ) ($joint1Node + ".rotate"                 );

    $bdnNodes[`size $bdnNodes`] = $bdnNode;
  }
  return $bdnNodes;
}

/*-
@param $nodes <string[]>
@returns <string[]>
*/
proc string[] generateRadiusSphere(string $nodes[]) {
  print("generateRadiusSphere\n"); // debug
  print("  nodes:{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  string $sphereNodes[];
  if (!isPluginLoaded()) return $sphereNodes;

  for ($n in $nodes) {
    if (!isType($n, {"boneDynamicsNode"}, true)) continue;

    string $endNodes[] = getSourceConnections($n, {"endTranslate"}, "", {}, {});
    if (!`size $endNodes`) continue;

    string $endNode = $endNodes[0];
    string $jointName = toShortName($endNode);
    string $shapeNode = longNameOf(`createNode -ss "implicitSphere"`);
    string $shapeId = toUUID($shapeNode);
    string $transformNode = initRadiusNode(buildDagNode(getParentNode($shapeNode), $jointName + "_Radius", $endNode, true, $endNode, {}));
    $shapeNode = uuidToLongName($shapeId);
    $sphereNodes[`size $sphereNodes`] = $transformNode;
    $sphereNodes[`size $sphereNodes`] = $shapeNode;
    setIntAttribute($transformNode, "overrideEnabled", true);
    setIntAttribute($transformNode, "overrideDisplayType", 2);
    connectAttr -f ($n + ".radius") ($shapeNode + ".radius");
  }

  return $sphereNodes;
}

/*-
@param $bdnBaseName <string>
@param $sourceNodes <string[]>
@param $branchAimVector <float[3]>
@param $branchUpVector <float[3]>
@returns <string[]>
*/
proc string[] generateTarget(
  string $bdnBaseName,
  string $sourceNodes[],
  float $branchAimVector[],
  float $branchUpVector[]
) {
  print("generateTarget\n"); // debug
  print("  bdnBaseName    :" + $bdnBaseName + "\n"); // debug
  print("  sourceNodes    :{\n    " + stringArrayToString($sourceNodes, ",\n    ") + "\n  }\n"); // debug
  print("  branchAimVector:{" + floatArrayToString($branchAimVector, ", ") + "}\n"); // debug
  print("  branchUpVector :{" + floatArrayToString($branchUpVector, ", ") + "}\n"); // debug

  string $targetNodes[];
  if (!`size $sourceNodes`) return $targetNodes;

  string $bdnNodeName = join({"BDN", $bdnBaseName}, "_", true);
  string $targetGrpNode = initGroupNode(getSecondLevelNode($bdnNodeName, "Target_GRP", true), "target");
  initBDNNode(getTopLevelNode($bdnNodeName, false));
  print("  targetGrpNode:" + $targetGrpNode + "\n"); // debug
  if (!`objExists $targetGrpNode`) return $targetNodes;

  string $targetSkeletonNodes[] = collectHierarchyNodes(
    $sourceNodes,
    "",
    {"transform"},
    false,
    "nkBdnToolGenerateTargetScript"
  );
  $targetSkeletonNodes = splitSkeletonBranch($targetSkeletonNodes, $branchAimVector, $branchUpVector);

  string $targetIdtNodes[] = collectRootNodes($targetSkeletonNodes);
  $targetIdtNodes = setParentNode($targetIdtNodes, $targetGrpNode);
  print("  targetIdtNodes:{\n    " + stringArrayToString($targetIdtNodes, ",\n    ") + "\n  }\n"); // debug
  setOutlinerColor($targetIdtNodes, {0.0, 0.0, 1.0});
  for ($targetIdtNode in $targetIdtNodes) {
    $targetNodes = stringArrayCatenate(
      $targetNodes,
      collectDescendantNodes($targetIdtNode, "", {}, false, "")
    );
    string $jointNodes[] = collectDescendantNodes($targetIdtNode, "", {"joint"}, true, "");
    batchSetFloatAttribute($jointNodes, "radius", 1.0);
    setOverrideColor($jointNodes, 6);
    freezeTransform($jointNodes, {});
  }

  $targetNodes = stringArrayCatenate($targetNodes, constraintSkeleton($targetNodes));

  for ($targetNode in $targetNodes) {
    if (!isJointKind($targetNode, "target")) continue;

    string $proxyNode;
    string $sourceNodes[] = getSourceConnections($targetNode, {"bdnSource"}, "", {}, {});
    if (`size $sourceNodes` != 1) continue;

    string $sourceNode = $sourceNodes[0];
    string $jointNodes[] = getDestConnections($sourceNode, {"message"}, "", {}, {});
    for ($jointNode in $jointNodes) {
      if (isJointKind($jointNode, "proxy")) {
        $proxyNode = $jointNode;
        break;
      }
    }
    if (!isJointKind($proxyNode, "proxy")) continue;

    string $bdnNodes[] = getSourceConnections($proxyNode, {"rotate"}, "", {}, {});
    if (`size $bdnNodes` != 1) continue;

    string $bdnNode = $bdnNodes[0];
    if (!isType($bdnNode, {"boneDynamicsNode"}, true)) continue;

    connectAttr -f ($targetNode + ".rotate") ($bdnNode + ".rotationOffset");
  }

  return $targetNodes;
}

/*-
@param $bdnBaseName <string>
@param $nodes <string[]>
@returns <string[]>
*/
proc createBdnSet(string $bdnBaseName, string $nodes[]) {
  print("generateDynamicsUnit\n"); // debug
  print("  bdnBaseName:" + $bdnBaseName + "\n"); // debug
  print("  nodes      :{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  if (!isPluginLoaded() || !`size $nodes`) return;

  string $bdnSetNode = join({"BDN", $bdnBaseName, "Set"}, "_", true);
  if (!`objExists $bdnSetNode`) {
    $bdnSetNode = `sets -em -n $bdnSetNode`;
  }
  if (!`objExists $bdnSetNode`) return;

  for ($node in $nodes) {
    if (!isType($node, {"boneDynamicsNode"}, true)) continue;

    if (!`sets -im $bdnSetNode $node`) {
      sets -add $bdnSetNode $node;
    }
  }
}

/*-
@param $bdnBaseName <string>
@param $sourceNodes <string[]>
// @param $generateTargetJoint <boolean>
// @param $generateEndJoint <boolean>
@param $branchAimVector <float[3]>
@param $branchUpVector <float[3]>
@param $endJointOffset <float[3]>
// @param $shouldGenerateRadiusSphere <boolean>
@returns <string[]>
*/
proc string[] generateDynamicsUnit(
  string $bdnBaseName,
  string $sourceNodes[],
  // int $generateTargetJoint,
  // int $generateEndJoint,
  float $branchAimVector[],
  float $branchUpVector[],
  float $endJointOffset[]
  // int $shouldGenerateRadiusSphere
) {
  print("generateDynamicsUnit\n"); // debug
  print("  bdnBaseName               :" + $bdnBaseName + "\n"); // debug
  print("  sourceNodes               :{\n    " + stringArrayToString($sourceNodes, ",\n    ") + "\n  }\n"); // debug
  // print("  generateTargetJoint       :" + $generateTargetJoint + "\n"); // debug
  // print("  generateEndJoint          :" + $generateEndJoint + "\n"); // debug
  print("  branchAimVector           :{" + floatArrayToString($branchAimVector, ", ") + "}\n"); // debug
  print("  branchUpVector            :{" + floatArrayToString($branchUpVector, ", ") + "}\n"); // debug
  print("  endJointOffset            :{" + floatArrayToString($endJointOffset, ", ") + "}\n"); // debug
  // print("  shouldGenerateRadiusSphere:" + $shouldGenerateRadiusSphere + "\n"); // debug

  string $dynamicsNodes[];
  if (!`size $sourceNodes`) return $dynamicsNodes;

  if (!isPluginLoaded()) loadBdnPlugin();
  if (!isPluginLoaded()) return $dynamicsNodes;

  string $bdnNodeName = join({"BDN", $bdnBaseName}, "_", true);
  string $proxyGrpNode = initGroupNode(getSecondLevelNode($bdnNodeName, "Proxy_GRP", true), "proxy");
  initBDNNode(getTopLevelNode($bdnNodeName, false));
  print("  proxyGrpNode:" + $proxyGrpNode + "\n"); // debug
  if (!`objExists $proxyGrpNode`) return $dynamicsNodes;

  string $proxySkeletonNodes[] = collectHierarchyNodes(
    $sourceNodes,
    "",
    {"transform"},
    false,
    "nkBdnToolGenerateProxyScript"
  );
  $proxySkeletonNodes = splitSkeletonBranch($proxySkeletonNodes, $branchAimVector, $branchUpVector);
  $proxySkeletonNodes = generateEndJoint($proxySkeletonNodes, $endJointOffset);

  string $proxyIdtNodes[] = collectRootNodes($proxySkeletonNodes);
  $proxyIdtNodes = setParentNode($proxyIdtNodes, $proxyGrpNode);
  print("  proxyIdtNodes:{\n    " + stringArrayToString($proxyIdtNodes, ",\n    ") + "\n  }\n"); // debug
  setOutlinerColor($proxyIdtNodes, {1.0, 0.0, 0.0});
  for ($proxyIdtNode in $proxyIdtNodes) {
    $dynamicsNodes = stringArrayCatenate(
      $dynamicsNodes,
      collectDescendantNodes($proxyIdtNode, "", {}, false, "")
    );
    string $jointNodes[] = collectDescendantNodes($proxyIdtNode, "", {"joint"}, true, "");
    batchSetFloatAttribute($jointNodes, "radius", 0.5);
    setOverrideColor($jointNodes, 13);
    freezeTransform($jointNodes, {});
  }

  $dynamicsNodes = stringArrayCatenate($dynamicsNodes, constraintSkeleton($dynamicsNodes));
  $dynamicsNodes = stringArrayCatenate($dynamicsNodes, generateBdnNodes($dynamicsNodes));
  // if ($shouldGenerateRadiusSphere) {
    $dynamicsNodes = stringArrayCatenate($dynamicsNodes, generateRadiusSphere($dynamicsNodes));
  // }
  $dynamicsNodes = stringArrayCatenate($dynamicsNodes, generateTarget($bdnBaseName, $sourceNodes, $branchAimVector, $branchUpVector));

  // createBdnSet($bdnBaseName, $dynamicsNodes);

  return $dynamicsNodes;
}

// -----------------------------------------------------------------------------
// コライダー
// -----------------------------------------------------------------------------
/*-
@param $bdnBaseName <string>
@param $sourceNodes <string[]>
@returns <string[]>
*/
proc string[] createInfinitePlaneCollider(
  string $bdnBaseName,
  string $sourceNodes[]
) {
  print("createInfinitePlaneCollider\n"); // debug
  print("  bdnBaseName:" + $bdnBaseName + "\n"); // debug
  print("  sourceNodes:{\n    " + stringArrayToString($sourceNodes, ",\n    ") + "\n  }\n"); // debug

  string $colliderNodes[];
  string $colliderType = "infinitePlane";
  string $colliderName = "InfinitePlaneCollider";

  string $bdnNodeName = join({"BDN", $bdnBaseName}, "_", true);
  string $colliderGrpNode = initGroupNode(getSecondLevelNode($bdnNodeName, "Collider_GRP", true), "collider");
  initBDNNode(getTopLevelNode($bdnNodeName, false));
  print("  colliderGrpNode:" + $colliderGrpNode + "\n"); // debug
  if (!`objExists $colliderGrpNode`) return $colliderNodes;

  if (!`size $sourceNodes`) $sourceNodes = {""};
  int $numSourceNodes = `size $sourceNodes`;
  for ($i = 0; $i < $numSourceNodes; $i++) {
    string $sourceNode = $sourceNodes[$i];
    string $sourceShortName = toShortName($sourceNode);
    string $spcNodeName = join({$sourceShortName, $colliderName, "SPC"}, "_", true);
    string $colliderNodeName = join({$sourceShortName, $colliderName}, "_", true);

    // ノード作成
    string $spcNode = initSpaceNode(createTransform($spcNodeName, $colliderGrpNode, true, $sourceNode, {}), "collider");
    string $planeNodes[] = `nurbsPlane -ax 0.0 1.0 0.0 -d 3 -lr 1.0 -u 1.0 -v 1.0 -w 1.0`;
    string $transformNode = buildDagNode(longNameOf($planeNodes[0]), $colliderNodeName, $spcNode, true, $spcNode, {});
    string $makeNode = longNameOf($planeNodes[1]);
    string $shapeNodes[] = getShapeNodes($transformNode, "");
    $colliderNodes[`size $colliderNodes`] = $spcNode;
    $colliderNodes[`size $colliderNodes`] = $transformNode;
    $colliderNodes[`size $colliderNodes`] = $makeNode;
    $colliderNodes = stringArrayCatenate($colliderNodes, $shapeNodes);

    // ノード初期化
    initColliderNode($transformNode, $colliderType);
    // setOutlinerColor({$transformNode}, {1.0, 1.0, 0.0});
    setOutlinerColor({$spcNode}, {1.0, 1.0, 0.0});
    setOverrideColor($shapeNodes, 17);

    // アトリビュート設定
    addAttr -at "message" -ln "colliderSource" $spcNode;
    // addAttr -at "message" -ln "colliderAffectedBy" -m $transformNode;
    addAttr -at "double" -dv 1.0 -k true -hxv false -hnv true -min 0.001 -ln "colliderWidth" $transformNode;
    addAttr -at "double" -dv 1.0 -k true -hxv false -hnv true -min 0.001 -ln "colliderHeight" $transformNode;

    // アトリビュートエイリアス設定
    string $colliderAttributes[] = {
      "colliderWidth",
      "colliderHeight"
    };
    addProxyAttributes($transformNode, $colliderAttributes, $spcNode);

    // 計算ノード作成
    string $ratioNode = uuidToLongName(toUUID(`createNode -n ($colliderNodeName + "_ratio") -ss "floatMath"`));
    $colliderNodes[`size $colliderNodes`] = $ratioNode;

    // 計算ノード設定
    setAttr ($ratioNode + ".operation") 3;

    // アトリビュート接続
    connectAttr -f ($transformNode + ".colliderWidth" ) ($makeNode  + ".width"      );
    connectAttr -f ($transformNode + ".colliderHeight") ($ratioNode + ".floatA"     );
    connectAttr -f ($transformNode + ".colliderWidth" ) ($ratioNode + ".floatB"     );
    connectAttr -f ($ratioNode     + ".outFloat"      ) ($makeNode  + ".lengthRatio");

    // ノード接続
    appendColliderAffectedBy({$makeNode}, $transformNode);
    appendColliderAffectedBy($shapeNodes, $transformNode);
    appendColliderAffectedBy({$ratioNode}, $transformNode);

    if (`objExists $sourceNode`) {
      connectAttr -f ($sourceNode + ".message") ($spcNode + ".colliderSource");
      // コンストレイント
      string $prcstNodes[] = `parentConstraint $sourceNode $spcNode`;
      if (`size $prcstNodes`) {
        $prcstNodes[0] = setNodeName($prcstNodes[0], $spcNodeName + "_PRCST");
        $colliderNodes[`size $colliderNodes`] = $prcstNodes[0];
      }
    }
  }

  return $colliderNodes;
}

/*-
@param $bdnBaseName <string>
@param $sourceNodes <string[]>
@returns <string[]>
*/
proc string[] createSphereCollider(
  string $bdnBaseName,
  string $sourceNodes[]
) {
  print("createSphereCollider\n"); // debug
  print("  bdnBaseName:" + $bdnBaseName + "\n"); // debug
  print("  sourceNodes:{\n    " + stringArrayToString($sourceNodes, ",\n    ") + "\n  }\n"); // debug

  string $colliderNodes[];
  string $colliderType = "sphere";
  string $colliderName = "SphereCollider";

  string $bdnNodeName = join({"BDN", $bdnBaseName}, "_", true);
  string $colliderGrpNode = initGroupNode(getSecondLevelNode($bdnNodeName, "Collider_GRP", true), "collider");
  initBDNNode(getTopLevelNode($bdnNodeName, false));
  print("  colliderGrpNode:" + $colliderGrpNode + "\n"); // debug
  if (!`objExists $colliderGrpNode`) return $colliderNodes;

  if (!`size $sourceNodes`) $sourceNodes = {""};
  int $numSourceNodes = `size $sourceNodes`;
  for ($i = 0; $i < $numSourceNodes; $i++) {
    string $sourceNode = $sourceNodes[$i];
    string $sourceShortName = toShortName($sourceNode);
    string $spcNodeName = join({$sourceShortName, $colliderName, "SPC"}, "_", true);
    string $colliderNodeName = join({$sourceShortName, $colliderName}, "_", true);

    // ノード作成
    string $spcNode = initSpaceNode(createTransform($spcNodeName, $colliderGrpNode, true, $sourceNode, {}), "collider");
    string $sphereNodes[] = `sphere -ax 0.0 1.0 0.0 -d 3 -hr 2.0 -r 0.5 -s 8 -nsp 4`;
    string $transformNode = buildDagNode(longNameOf($sphereNodes[0]), $colliderNodeName, $spcNode, true, $spcNode, {});
    string $makeNode = longNameOf($sphereNodes[1]);
    string $shapeNodes[] = getShapeNodes($transformNode, "");
    $colliderNodes[`size $colliderNodes`] = $spcNode;
    $colliderNodes[`size $colliderNodes`] = $transformNode;
    $colliderNodes[`size $colliderNodes`] = $makeNode;
    $colliderNodes = stringArrayCatenate($colliderNodes, $shapeNodes);

    // ノード初期化
    initColliderNode($transformNode, $colliderType);
    // setOutlinerColor({$transformNode}, {1.0, 1.0, 0.0});
    setOutlinerColor({$spcNode}, {1.0, 1.0, 0.0});
    setOverrideColor($shapeNodes, 17);

    // アトリビュート設定
    addAttr -at "message" -ln "colliderSource" $spcNode;
    // addAttr -at "message" -ln "colliderAffectedBy" -m $transformNode;
    addAttr -at "double" -dv 0.5 -k true -hxv false -hnv true -min 0.001 -ln "colliderRadius" $transformNode;

    // アトリビュートエイリアス設定
    string $colliderAttributes[] = {
      "colliderRadius"
    };
    addProxyAttributes($transformNode, $colliderAttributes, $spcNode);

    // アトリビュート接続
    connectAttr -f ($transformNode + ".colliderRadius") ($makeNode  + ".radius");

    // ノード接続
    appendColliderAffectedBy({$makeNode}, $transformNode);
    appendColliderAffectedBy($shapeNodes, $transformNode);

    if (`objExists $sourceNode`) {
      connectAttr -f ($sourceNode + ".message") ($spcNode + ".colliderSource");
      // コンストレイント
      string $prcstNodes[] = `parentConstraint $sourceNode $spcNode`;
      if (`size $prcstNodes`) {
        $prcstNodes[0] = setNodeName($prcstNodes[0], $spcNodeName + "_PRCST");
        $colliderNodes[`size $colliderNodes`] = $prcstNodes[0];
      }
    }
  }

  return $colliderNodes;
}

/*-
@param $bdnBaseName <string>
@param $sourceNodes <string[]>
@returns <string[]>
*/
proc string[] createCapsuleCollider(
  string $bdnBaseName,
  string $sourceNodes[]
) {
  print("createCapsuleCollider\n"); // debug
  print("  bdnBaseName:" + $bdnBaseName + "\n"); // debug
  print("  sourceNodes:{\n    " + stringArrayToString($sourceNodes, ",\n    ") + "\n  }\n"); // debug

  string $colliderNodes[];
  string $colliderType = "capsule";
  string $colliderName = "CapsuleCollider";

  string $bdnNodeName = join({"BDN", $bdnBaseName}, "_", true);
  string $colliderGrpNode = initGroupNode(getSecondLevelNode($bdnNodeName, "Collider_GRP", true), "collider");
  initBDNNode(getTopLevelNode($bdnNodeName, false));
  print("  colliderGrpNode:" + $colliderGrpNode + "\n"); // debug
  if (!`objExists $colliderGrpNode`) return $colliderNodes;

  if (!`size $sourceNodes`) $sourceNodes = {""};
  int $numSourceNodes = `size $sourceNodes`;
  for ($i = 0; $i < $numSourceNodes; $i++) {
    string $sourceNode = $sourceNodes[$i];
    string $sourceShortName = toShortName($sourceNode);
    string $spcNodeName = join({$sourceShortName, $colliderName, "SPC"}, "_", true);
    string $colliderNodeName = join({$sourceShortName, $colliderName}, "_", true);

    // ノード作成
    string $spcNode = initSpaceNode(createTransform($spcNodeName, $colliderGrpNode, true, $sourceNode, {}), "collider");
    string $transformNode = createTransform($colliderNodeName, $spcNode, true, $spcNode, {});
    $colliderNodes[`size $colliderNodes`] = $spcNode;
    $colliderNodes[`size $colliderNodes`] = $transformNode;

    string $sphereANodes[] = `sphere -ax 0.0 1.0 0.0 -d 3 -esw 270.0 -hr 2.0 -r 0.5 -s 4 -nsp 4 -ssw 90.0`;
    string $sphereATransformNode = initColliderComponentNode(
      buildDagNode(longNameOf($sphereANodes[0]), $colliderNodeName + "_SphereA", $transformNode, true, $transformNode, {})
    );
    string $makeSphereANode = longNameOf($sphereANodes[1]);
    string $sphereAShapeNodes[] = getShapeNodes($sphereATransformNode, "");
    $colliderNodes[`size $colliderNodes`] = $sphereATransformNode;
    $colliderNodes[`size $colliderNodes`] = $makeSphereANode;
    $colliderNodes = stringArrayCatenate($colliderNodes, $sphereAShapeNodes);

    string $sphereBNodes[] = `sphere -ax 0.0 1.0 0.0 -d 3 -esw 90.0 -hr 2.0 -r 0.5 -s 4 -nsp 4 -ssw -90.0`;
    string $sphereBTransformNode = initColliderComponentNode(
      buildDagNode(longNameOf($sphereBNodes[0]), $colliderNodeName + "_SphereB", $transformNode, true, $transformNode, {})
    );
    string $makeSphereBNode = longNameOf($sphereBNodes[1]);
    string $sphereBShapeNodes[] = getShapeNodes($sphereBTransformNode, "");
    $colliderNodes[`size $colliderNodes`] = $sphereBTransformNode;
    $colliderNodes[`size $colliderNodes`] = $makeSphereBNode;
    $colliderNodes = stringArrayCatenate($colliderNodes, $sphereBShapeNodes);

    string $circleANodes[] = `circle -d 3 -fp 1.0 0.0 0.0 -fc true -nr 1.0 0.0 0.0 -r 0.5 -s 8`;
    string $circleATransformNode = initColliderComponentNode(
      buildDagNode(longNameOf($circleANodes[0]), $colliderNodeName + "_CircleA", $transformNode, true, $transformNode, {})
    );
    string $makeCircleANode = longNameOf($circleANodes[1]);
    string $circleAShapeNodes[] = getShapeNodes($circleATransformNode, "");
    $colliderNodes[`size $colliderNodes`] = $circleATransformNode;
    $colliderNodes[`size $colliderNodes`] = $makeCircleANode;
    $colliderNodes = stringArrayCatenate($colliderNodes, $circleAShapeNodes);

    string $circleBNodes[] = `circle -d 3 -fp 1.0 0.0 0.0 -fc true -nr 1.0 0.0 0.0 -r 0.5 -s 8`;
    string $circleBTransformNode = initColliderComponentNode(
      buildDagNode(longNameOf($circleBNodes[0]), $colliderNodeName + "_CircleB", $transformNode, true, $transformNode, {})
    );
    string $makeCircleBNode = longNameOf($circleBNodes[1]);
    string $circleBShapeNodes[] = getShapeNodes($circleBTransformNode, "");
    $colliderNodes[`size $colliderNodes`] = $circleBTransformNode;
    $colliderNodes[`size $colliderNodes`] = $makeCircleBNode;
    $colliderNodes = stringArrayCatenate($colliderNodes, $circleBShapeNodes);

    string $loftNodes[] = `loft -d 3 -ss 1 $circleBTransformNode $circleATransformNode`;
    string $loftTransformNode = initColliderComponentNode(
      buildDagNode(longNameOf($loftNodes[0]), $colliderNodeName + "_Loft", $transformNode, false, "", {})
    );
    string $loftNode = longNameOf($loftNodes[1]);
    string $loftShapeNodes[] = getShapeNodes($loftTransformNode, "");
    $colliderNodes[`size $colliderNodes`] = $loftTransformNode;
    $colliderNodes[`size $colliderNodes`] = $loftNode;
    $colliderNodes = stringArrayCatenate($colliderNodes, $loftShapeNodes);

    // ノード初期化
    initColliderNode($transformNode, $colliderType);
    // setOutlinerColor({$transformNode}, {1.0, 1.0, 0.0});
    setOutlinerColor({$spcNode}, {1.0, 1.0, 0.0});
    setOverrideColor($sphereAShapeNodes, 17);
    setOverrideColor($sphereBShapeNodes, 17);
    setOverrideColor($circleAShapeNodes, 17);
    setOverrideColor($circleBShapeNodes, 17);
    setOverrideColor($loftShapeNodes, 17);

    // アトリビュート設定
    addAttr -at "message" -ln "colliderSource" $spcNode;
    // addAttr -at "message" -ln "colliderAffectedBy" -m $transformNode;
    addAttr -at "double" -dv 0.5 -k true -hxv false -hnv true -min 0.001 -ln "colliderRadiusA" $transformNode;
    addAttr -at "double" -dv 0.5 -k true -hxv false -hnv true -min 0.001 -ln "colliderRadiusB" $transformNode;
    addAttr -at "double" -dv 2.0 -k true -hxv false -hnv true -min 0.001 -ln "colliderLength" $transformNode;
    addAttr -at "double" -dv 0.0 -k true -hxv false -hnv false -ln "colliderOffset" $transformNode;
    addAttr -at "enum" -dv 0 -k true -en "A:Center:B" -ln "colliderPivot" $transformNode;
    addAttr -at "matrix" -h true -k true -ln "colliderMatrixA" $transformNode;
    addAttr -at "matrix" -h true -k true -ln "colliderMatrixB" $transformNode;

    // アトリビュートエイリアス設定
    string $colliderAttributes[] = {
      "colliderRadiusA",
      "colliderRadiusB",
      "colliderLength",
      "colliderOffset",
      "colliderPivot"
    };
    addProxyAttributes($transformNode, $colliderAttributes, $spcNode);
    addProxyAttributes($transformNode, $colliderAttributes, $sphereATransformNode);
    addProxyAttributes($transformNode, $colliderAttributes, $sphereBTransformNode);
    addProxyAttributes($transformNode, $colliderAttributes, $circleATransformNode);
    addProxyAttributes($transformNode, $colliderAttributes, $circleBTransformNode);
    addProxyAttributes($transformNode, $colliderAttributes, $loftTransformNode);

    // 計算ノード作成
    string $halfLengthNode = uuidToLongName(toUUID(`createNode -n ($colliderNodeName + "_halfLength") -ss "floatMath"`));
    string $pivotNode = uuidToLongName(toUUID(`createNode -n ($colliderNodeName + "_pivot") -ss "floatMath"`));
    string $offsetANode = uuidToLongName(toUUID(`createNode -n ($colliderNodeName + "_offsetA") -ss "floatMath"`));
    string $offsetBNode = uuidToLongName(toUUID(`createNode -n ($colliderNodeName + "_offsetB") -ss "floatMath"`));
    $colliderNodes[`size $colliderNodes`] = $halfLengthNode;
    $colliderNodes[`size $colliderNodes`] = $pivotNode;
    $colliderNodes[`size $colliderNodes`] = $offsetANode;
    $colliderNodes[`size $colliderNodes`] = $offsetBNode;

    // 計算ノード設定
    setAttr ($halfLengthNode + ".operation") 2;
    setAttr ($halfLengthNode + ".floatB") -0.5;
    setAttributeLock($halfLengthNode, "floatB", true);
    setAttr ($pivotNode + ".operation") 2;
    setAttr ($offsetANode + ".operation") 0;
    setAttr ($offsetBNode + ".operation") 0;

    // アトリビュート接続
    connectAttr -f ($transformNode        + ".worldInverseMatrix") ($loftTransformNode    + ".offsetParentMatrix");
    connectAttr -f ($sphereATransformNode + ".worldMatrix"       ) ($transformNode        + ".colliderMatrixA"   );
    connectAttr -f ($sphereBTransformNode + ".worldMatrix"       ) ($transformNode        + ".colliderMatrixB"   );
    connectAttr -f ($transformNode        + ".colliderRadiusA"   ) ($makeSphereANode      + ".radius"            );
    connectAttr -f ($transformNode        + ".colliderRadiusB"   ) ($makeSphereBNode      + ".radius"            );
    connectAttr -f ($transformNode        + ".colliderRadiusA"   ) ($makeCircleANode      + ".radius"            );
    connectAttr -f ($transformNode        + ".colliderRadiusB"   ) ($makeCircleBNode      + ".radius"            );
    connectAttr -f ($transformNode        + ".colliderLength"    ) ($halfLengthNode       + ".floatA"            );
    connectAttr -f ($halfLengthNode       + ".outFloat"          ) ($pivotNode            + ".floatA"            );
    connectAttr -f ($transformNode        + ".colliderPivot"     ) ($pivotNode            + ".floatB"            );
    connectAttr -f ($pivotNode            + ".outFloat"          ) ($offsetANode          + ".floatA"            );
    connectAttr -f ($transformNode        + ".colliderOffset"    ) ($offsetANode          + ".floatB"            );
    connectAttr -f ($offsetANode          + ".outFloat"          ) ($offsetBNode          + ".floatA"            );
    connectAttr -f ($transformNode        + ".colliderLength"    ) ($offsetBNode          + ".floatB"            );
    connectAttr -f ($offsetANode          + ".outFloat"          ) ($sphereATransformNode + ".tx"                );
    connectAttr -f ($offsetANode          + ".outFloat"          ) ($circleATransformNode + ".tx"                );
    connectAttr -f ($offsetBNode          + ".outFloat"          ) ($sphereBTransformNode + ".tx"                );
    connectAttr -f ($offsetBNode          + ".outFloat"          ) ($circleBTransformNode + ".tx"                );

    // アトリビュート状態設定
    string $txNodes[] = {
      $sphereATransformNode,
      $sphereBTransformNode,
      $circleATransformNode,
      $circleBTransformNode
    };
    batchSetAttributeLock($txNodes, {"ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz", "v"}, true);
    batchSetAttributeChannelBox($txNodes, {"ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz", "v"}, false);
    batchSetAttributeLock({$loftTransformNode}, {"tx", "ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz", "v"}, true);
    batchSetAttributeChannelBox({$loftTransformNode}, {"tx", "ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz", "v"}, false);
    disableRenderStats(getShapeNodes($sphereATransformNode, ""));
    disableRenderStats(getShapeNodes($sphereBTransformNode, ""));
    disableRenderStats(getShapeNodes($loftTransformNode, ""));

    // ノード接続
    appendColliderAffectedBy({$sphereATransformNode}, $transformNode);
    appendColliderAffectedBy({$makeSphereANode}, $transformNode);
    appendColliderAffectedBy($sphereAShapeNodes, $transformNode);
    appendColliderAffectedBy({$sphereBTransformNode}, $transformNode);
    appendColliderAffectedBy({$makeSphereBNode}, $transformNode);
    appendColliderAffectedBy($sphereBShapeNodes, $transformNode);
    appendColliderAffectedBy({$circleATransformNode}, $transformNode);
    appendColliderAffectedBy({$makeCircleANode}, $transformNode);
    appendColliderAffectedBy($circleAShapeNodes, $transformNode);
    appendColliderAffectedBy({$circleBTransformNode}, $transformNode);
    appendColliderAffectedBy({$makeCircleBNode}, $transformNode);
    appendColliderAffectedBy($circleBShapeNodes, $transformNode);
    appendColliderAffectedBy({$loftTransformNode}, $transformNode);
    appendColliderAffectedBy({$loftNode}, $transformNode);
    appendColliderAffectedBy($loftShapeNodes, $transformNode);
    appendColliderAffectedBy({$halfLengthNode, $pivotNode, $offsetANode, $offsetBNode}, $transformNode);

    if (`objExists $sourceNode`) {
      connectAttr -f ($sourceNode + ".message") ($spcNode + ".colliderSource");
      // コンストレイント
      string $prcstNodes[] = `parentConstraint $sourceNode $spcNode`;
      if (`size $prcstNodes`) {
        $prcstNodes[0] = setNodeName($prcstNodes[0], $spcNodeName + "_PRCST");
        $colliderNodes[`size $colliderNodes`] = $prcstNodes[0];
      }
    }

    // アトリビュート値設定
    if ($i < $numSourceNodes - 1) {
      string $nextSourceNode = $sourceNodes[$i + 1];
      print("nextSourceNode:" + $nextSourceNode + "\n");
      if (`objExists $nextSourceNode`) {
        setFloatAttribute(
          $transformNode,
          "colliderLength",
          getFloatAttribute($nextSourceNode, "tx", 2.0)
        );
      }
    }
  }

  return $colliderNodes;
}

/*-
@param $bdnNode <string>
@param $index <int>
@param $colliderNode <string>
@returns <>
*/
proc connectCollider(string $bdnNode, int $index, string $colliderNode) {
  print("connectCollider\n"); // debug
  print("  bdnNode     :" + $bdnNode + "\n"); // debug
  print("  index       :" + $index + "\n"); // debug
  print("  colliderNode:" + $colliderNode + "\n"); // debug
  if (!isPluginLoaded()) return;
  if (
    !isType($bdnNode, {"boneDynamicsNode"}, true)
        || $index < 0
        || !isBdnType($colliderNode, "collider")
  ) return;

  string $colliderType = getColliderType($colliderNode);
  if ($colliderType == "infinitePlane") {
    connectAttr -f
        ($colliderNode + ".worldMatrix")
        ($bdnNode + ".infinitePlaneCollider[" + $index + "].infinitePlaneColMatrix");
  }
  else if ($colliderType == "sphere") {
    connectAttr -f
        ($colliderNode + ".worldMatrix")
        ($bdnNode + ".sphereCollider[" + $index + "].sphereColMatrix");
    connectAttr -f
        ($colliderNode + ".colliderRadius")
        ($bdnNode + ".sphereCollider[" + $index + "].sphereColRadius");
  }
  else if ($colliderType == "capsule") {
    connectAttr -f
        ($colliderNode + ".colliderMatrixA")
        ($bdnNode + ".capsuleCollider[" + $index + "].capsuleColMatrixA");
    connectAttr -f
        ($colliderNode + ".colliderMatrixB")
        ($bdnNode + ".capsuleCollider[" + $index + "].capsuleColMatrixB");
    connectAttr -f
        ($colliderNode + ".colliderRadiusA")
        ($bdnNode + ".capsuleCollider[" + $index + "].capsuleColRadiusA");
    connectAttr -f
        ($colliderNode + ".colliderRadiusB")
        ($bdnNode + ".capsuleCollider[" + $index + "].capsuleColRadiusB");
  }
}

/*-
@param $colliderNodes <string[]>
@param $bdnNodes <string[]>
@returns <string[]>
*/
proc appendCollider(string $colliderNodes[], string $bdnNodes[]) {
  print("appendCollider\n"); // debug
  print("  colliderNodes:{\n    " + stringArrayToString($colliderNodes, ",\n    ") + "\n  }\n"); // debug
  print("  bdnNodes     :{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n"); // debug
  if (!isPluginLoaded()) return;

  // 種類ごとにコライダーを分ける
  string $pcNodes[];
  string $scNodes[];
  string $ccNodes[];
  for ($colliderNode in $colliderNodes) {
    if (!isBdnType($colliderNode, "collider")) continue;

    string $colliderType = getColliderType($colliderNode);
    if ($colliderType == "infinitePlane") {
      $pcNodes[`size $pcNodes`] = $colliderNode;
    }
    else if ($colliderType == "sphere") {
      $scNodes[`size $scNodes`] = $colliderNode;
    }
    else if ($colliderType == "capsule") {
      $ccNodes[`size $ccNodes`] = $colliderNode;
    }
  }

  for ($bdnNode in $bdnNodes) {
    if (!isType($bdnNode, {"boneDynamicsNode"}, true)) continue;

    /*
    コライダー配列の最適化
    接続を切っても値が残ると衝突判定されてしまうため、一旦すべての配列アトリビュートの要素を削除する。
    その後既存のコライダーと追加するコライダーとを接続し直す。
    */

    // infinitePlaneCollider
    if (`size $pcNodes`) {
      int $size = `getAttr -s ($bdnNode + ".infinitePlaneCollider")`;
      string $newPcNodes[];
      for ($i = 0; $i < $size; $i++) {
        $newPcNodes = stringArrayCatenate(
          $newPcNodes,
          getSourceConnections(
            $bdnNode,
            {"infinitePlaneCollider[" + $i + "].infinitePlaneColMatrix"},
            "", {}, {}
          )
        );
        removeMultiInstance -b true ($bdnNode + ".infinitePlaneCollider[" + $i + "]");
      }
      $newPcNodes = stringArrayCatenate($newPcNodes, $pcNodes);
      $newPcNodes = stringArrayRemoveDuplicates($newPcNodes);

      for ($i = 0; $i < `size $newPcNodes`; $i++) {
        connectCollider($bdnNode, $i, $newPcNodes[$i]);
      }
    }

    // sphereCollider
    if (`size $scNodes`) {
      int $size = `getAttr -s ($bdnNode + ".sphereCollider")`;
      string $newScNodes[];
      for ($i = 0; $i < $size; $i++) {
        $newScNodes = stringArrayCatenate(
          $newScNodes,
          getSourceConnections(
            $bdnNode,
            {
              "sphereCollider[" + $i + "].sphereColMatrix",
              "sphereCollider[" + $i + "].sphereColRadius"
            },
            "", {}, {}
          )
        );
        removeMultiInstance -b true ($bdnNode + ".sphereCollider[" + $i + "]");
      }
      $newScNodes = stringArrayCatenate($newScNodes, $scNodes);
      $newScNodes = stringArrayRemoveDuplicates($newScNodes);

      for ($i = 0; $i < `size $newScNodes`; $i++) {
        connectCollider($bdnNode, $i, $newScNodes[$i]);
      }
    }

    // capsuleCollider
    if (`size $ccNodes`) {
      int $size = `getAttr -s ($bdnNode + ".capsuleCollider")`;
      string $newCcNodes[];
      for ($i = 0; $i < $size; $i++) {
        $newCcNodes = stringArrayCatenate(
          $newCcNodes,
          getSourceConnections(
            $bdnNode,
            {
              "capsuleCollider[" + $i + "].capsuleColMatrixA",
              "capsuleCollider[" + $i + "].capsuleColMatrixB",
              "capsuleCollider[" + $i + "].capsuleColRadiusA",
              "capsuleCollider[" + $i + "].capsuleColRadiusB"
            },
            "", {}, {}
          )
        );
        removeMultiInstance -b true ($bdnNode + ".capsuleCollider[" + $i + "]");
      }
      $newCcNodes = stringArrayCatenate($newCcNodes, $ccNodes);
      $newCcNodes = stringArrayRemoveDuplicates($newCcNodes);

      for ($i = 0; $i < `size $newCcNodes`; $i++) {
        connectCollider($bdnNode, $i, $newCcNodes[$i]);
      }
    }
  }
}

/*-
@param $colliderNodes <string[]>
@param $bdnNodes <string[]>
@returns <string[]>
*/
proc removeCollider(string $colliderNodes[], string $bdnNodes[]) {
  print("removeCollider\n"); // debug
  print("  colliderNodes:{\n    " + stringArrayToString($colliderNodes, ",\n    ") + "\n  }\n"); // debug
  print("  bdnNodes     :{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n"); // debug
  if (!isPluginLoaded()) return;

  // 種類ごとにコライダーを分ける
  string $pcNodes[];
  string $scNodes[];
  string $ccNodes[];
  for ($colliderNode in $colliderNodes) {
    if (!isBdnType($colliderNode, "collider")) continue;

    string $colliderType = getColliderType($colliderNode);
    if ($colliderType == "infinitePlane") {
      $pcNodes[`size $pcNodes`] = $colliderNode;
    }
    else if ($colliderType == "sphere") {
      $scNodes[`size $scNodes`] = $colliderNode;
    }
    else if ($colliderType == "capsule") {
      $ccNodes[`size $ccNodes`] = $colliderNode;
    }
  }

  for ($bdnNode in $bdnNodes) {
    if (!isType($bdnNode, {"boneDynamicsNode"}, true)) continue;

    // infinitePlaneCollider
    if (`size $pcNodes`) {
      int $size = `getAttr -s ($bdnNode + ".infinitePlaneCollider")`;
      string $newPcNodes[];
      for ($i = 0; $i < $size; $i++) {
        $newPcNodes = stringArrayCatenate(
          $newPcNodes,
          getSourceConnections(
            $bdnNode,
            {"infinitePlaneCollider[" + $i + "].infinitePlaneColMatrix"},
            "", {}, {}
          )
        );
        removeMultiInstance -b true ($bdnNode + ".infinitePlaneCollider[" + $i + "]");
      }
      $newPcNodes = `stringArrayRemove $pcNodes $newPcNodes`;
      $newPcNodes = stringArrayRemoveDuplicates($newPcNodes);

      for ($i = 0; $i < `size $newPcNodes`; $i++) {
        connectCollider($bdnNode, $i, $newPcNodes[$i]);
      }
    }

    // sphereCollider
    if (`size $scNodes`) {
      int $size = `getAttr -s ($bdnNode + ".sphereCollider")`;
      string $newScNodes[];
      for ($i = 0; $i < $size; $i++) {
        $newScNodes = stringArrayCatenate(
          $newScNodes,
          getSourceConnections(
            $bdnNode,
            {
              "sphereCollider[" + $i + "].sphereColMatrix",
              "sphereCollider[" + $i + "].sphereColRadius"
            },
            "", {}, {}
          )
        );
        removeMultiInstance -b true ($bdnNode + ".sphereCollider[" + $i + "]");
      }
      $newScNodes = `stringArrayRemove $scNodes $newScNodes`;
      $newScNodes = stringArrayRemoveDuplicates($newScNodes);

      for ($i = 0; $i < `size $newScNodes`; $i++) {
        connectCollider($bdnNode, $i, $newScNodes[$i]);
      }
    }

    // capsuleCollider
    if (`size $ccNodes`) {
      int $size = `getAttr -s ($bdnNode + ".capsuleCollider")`;
      string $newCcNodes[];
      for ($i = 0; $i < $size; $i++) {
        $newCcNodes = stringArrayCatenate(
          $newCcNodes,
          getSourceConnections(
            $bdnNode,
            {
              "capsuleCollider[" + $i + "].capsuleColMatrixA",
              "capsuleCollider[" + $i + "].capsuleColMatrixB",
              "capsuleCollider[" + $i + "].capsuleColRadiusA",
              "capsuleCollider[" + $i + "].capsuleColRadiusB"
            },
            "", {}, {}
          )
        );
        removeMultiInstance -b true ($bdnNode + ".capsuleCollider[" + $i + "]");
      }
      $newCcNodes = `stringArrayRemove $ccNodes $newCcNodes`;
      $newCcNodes = stringArrayRemoveDuplicates($newCcNodes);

      for ($i = 0; $i < `size $newCcNodes`; $i++) {
        connectCollider($bdnNode, $i, $newCcNodes[$i]);
      }
    }
  }
}

// /////////////////////////////////////////////////////////////////////////////
// API
// /////////////////////////////////////////////////////////////////////////////

// /////////////////////////////////////////////////////////////////////////////
// スクリプトジョブ
// /////////////////////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------------
// イベントジョブ
// -----------------------------------------------------------------------------
// /*-
// @returns <>
// */
// proc registerEventJob() {
//   print("registerEventJob\n"); // debug
// }

// /*-
// @returns <>
// */
// proc unregisterEventJob() {
//   print("unregisterEventJob\n"); // debug
// }

// -----------------------------------------------------------------------------
// ノードジョブ
// -----------------------------------------------------------------------------
// /*-
// @param $n <string>
// @returns <>
// */
// proc registerNodeJob(string $n) {
//   print("registerNodeJob\n"); // debug
//   print("  n:" + $n + "\n"); // debug
// }

// /*-
// @param $nodeId <string>
// @returns <>
// */
// proc unregisterNodeJob(string $nodeId) {
//   print("unregisterNodeJob\n"); // debug
//   print("  nodeId:" + $nodeId + "\n"); // debug
// }

// /////////////////////////////////////////////////////////////////////////////
// プレゼンテーション
// /////////////////////////////////////////////////////////////////////////////
/*-
@var <string[]> 編集ウィンドウ用の一時変数。
*/
global string $nkBdnToolBdnNodes[];

/*-
@var <string> 編集ウィンドウ用の一時変数。
*/
global string $nkBdnToolBdnAttributeCache;

/*-
@var <string[]> 編集ウィンドウ用の一時変数。
*/
global string $nkBdnToolProxyNodes[];

/*-
@var <string[]> 編集ウィンドウ用の一時変数。
*/
global string $nkBdnToolTargetNodes[];

/*-
@var <string[]> 編集ウィンドウ用の一時変数。
*/
global string $nkBdnToolInfluencedColliderNodes[];

/*-
@var <string[]> 編集ウィンドウ用の一時変数。
*/
global string $nkBdnToolAllColliderNodes[];

/*-
@var <string[]> 編集ウィンドウ用の一時変数。
*/
global string $nkBdnToolMeshNodes[];

/*-
@var <string[]> 編集ウィンドウ用の一時変数。
*/
global string $nkBdnToolForceNodes[];

/*-
@var <string[]> 編集ウィンドウ用の一時変数。
*/
global string $nkBdnToolBindNodes[];

/*-
@returns <>
*/
proc initializeEditorParameters() {
  global string $nkBdnToolBdnNodes[];
  global string $nkBdnToolBdnAttributeCache;
  global string $nkBdnToolProxyNodes[];
  global string $nkBdnToolTargetNodes[];
  global string $nkBdnToolInfluencedColliderNodes[];
  global string $nkBdnToolAllColliderNodes[];
  global string $nkBdnToolMeshNodes[];
  global string $nkBdnToolForceNodes[];
  global string $nkBdnToolBindNodes[];
  clear $nkBdnToolBdnNodes;
  $nkBdnToolBdnAttributeCache = "";
  clear $nkBdnToolProxyNodes;
  clear $nkBdnToolTargetNodes;
  clear $nkBdnToolInfluencedColliderNodes;
  clear $nkBdnToolAllColliderNodes;
  clear $nkBdnToolMeshNodes;
  clear $nkBdnToolForceNodes;
  clear $nkBdnToolBindNodes;
}

/*-
@returns <string>
*/
proc string getBdnBaseName() {
  string $bdnBaseNameText = getUIControl("nkBdnToolWindow", "bdnBaseNameText");
  return qString("textFieldGrp", "-tx", $bdnBaseNameText);
}

// /*-
// @param $value <boolean>
// @returns <>
// */
// proc updateToggleEditorWindowCheckBox(int $value) {
//   print("updateToggleEditorWindowCheckBox\n"); // debug
//   print("  value:" + $value + "\n"); // debug
//   string $toggleEditorWindowCheckBox = getUIControl("nkBdnToolWindow", "toggleEditorWindowCheckBox");
//   eInt("iconTextCheckBox", "-v", $value, $toggleEditorWindowCheckBox);
// };

// /*-
// @returns <>
// */
// proc subscribeMainWindowObservers() {
//   print("subscribeMainWindowObservers\n"); // debug
//   subscribe("nkBdnToolEditorWindowVisibilityChanged", "nkBdnToolEditorWindowVisibilityChanged");
// }

// /*-
// @returns <>
// */
// proc unsubscribeMainWindowObservers() {
//   print("unsubscribeMainWindowObservers\n"); // debug
//   unsubscribe("nkBdnToolEditorWindowVisibilityChanged", "nkBdnToolEditorWindowVisibilityChanged");
// }

// /*-
// @returns <>
// */
// proc closeEditorWindow() {
//   print("closeEditorWindow\n"); // debug
//   string $nkBdnToolEditorWindow = getUIControl("nkBdnToolEditorWindow", "nkBdnToolEditorWindow");
//   windowClose($nkBdnToolEditorWindow);
// }

/*-
@returns <string[]>
*/
proc string[] getSelectedBdnNodes() {
  print("getSelectedBdnNodes\n"); // debug
  global string $nkBdnToolBdnNodes[];
  print("  nkBdnToolEditorBdnNodes:{\n    " + stringArrayToString($nkBdnToolBdnNodes, ",\n    ") + "\n  }\n");

  string $bdnNodeList = getUIControl("nkBdnToolWindow", "bdnNodeList");
  // return qStringArray("textScrollList", "-si", $bdnNodeList);
  int $selectedIndices[] = qIndexArray("textScrollList", "-sii", $bdnNodeList);
  string $bdnNodes[];
  for ($i in $selectedIndices) {
    $bdnNodes[`size $bdnNodes`] = $nkBdnToolBdnNodes[$i];
  }
  return $bdnNodes;
}

/*-
@returns <string[]>
*/
proc string[] getSelectedProxyNodes() {
  print("getSelectedProxyNodes\n"); // debug
  global string $nkBdnToolProxyNodes[];
  print("  nkBdnToolEditorProxyNodes:{\n    " + stringArrayToString($nkBdnToolProxyNodes, ",\n    ") + "\n  }\n");

  string $proxyNodeList = getUIControl("nkBdnToolWindow", "proxyNodeList");
  // return qStringArray("textScrollList", "-si", $proxyNodeList);
  int $selectedIndices[] = qIndexArray("textScrollList", "-sii", $proxyNodeList);
  string $proxyNodes[];
  for ($i in $selectedIndices) {
    $proxyNodes[`size $proxyNodes`] = $nkBdnToolProxyNodes[$i];
  }
  return $proxyNodes;
}

/*-
@returns <string[]>
*/
proc string[] getSelectedTargetNodes() {
  print("getSelectedTargetNodes\n"); // debug
  global string $nkBdnToolTargetNodes[];
  print("  nkBdnToolEditorTargetNodes:{\n    " + stringArrayToString($nkBdnToolTargetNodes, ",\n    ") + "\n  }\n");

  string $targetNodeList = getUIControl("nkBdnToolWindow", "targetNodeList");
  // return qStringArray("textScrollList", "-si", $targetNodeList);
  int $selectedIndices[] = qIndexArray("textScrollList", "-sii", $targetNodeList);
  string $targetNodes[];
  for ($i in $selectedIndices) {
    $targetNodes[`size $targetNodes`] = $nkBdnToolTargetNodes[$i];
  }
  return $targetNodes;
}

/*-
@returns <string[]>
*/
proc string[] getSelectedInfluencedColliderNodes() {
  print("getSelectedInfluencedColliderNodes\n"); // debug
  global string $nkBdnToolInfluencedColliderNodes[];
  print("  nkBdnToolEditorInfluencedColliderNodes:{\n    " + stringArrayToString($nkBdnToolInfluencedColliderNodes, ",\n    ") + "\n  }\n");

  string $influencedColliderNodeList = getUIControl("nkBdnToolWindow", "influencedColliderNodeList");
  // return qStringArray("textScrollList", "-si", $influencedColliderNodeList);
  int $selectedIndices[] = qIndexArray("textScrollList", "-sii", $influencedColliderNodeList);
  string $colliderNodes[];
  for ($i in $selectedIndices) {
    $colliderNodes[`size $colliderNodes`] = $nkBdnToolInfluencedColliderNodes[$i];
  }
  return $colliderNodes;
}

/*-
@returns <string[]>
*/
proc string[] getSelectedAllColliderNodes() {
  print("getSelectedAllColliderNodes\n"); // debug
  global string $nkBdnToolAllColliderNodes[];
  print("  nkBdnToolEditorAllColliderNodes:{\n    " + stringArrayToString($nkBdnToolAllColliderNodes, ",\n    ") + "\n  }\n");

  string $allColliderNodeList = getUIControl("nkBdnToolWindow", "allColliderNodeList");
  // return qStringArray("textScrollList", "-si", $allColliderNodeList);
  int $selectedIndices[] = qIndexArray("textScrollList", "-sii", $allColliderNodeList);
  string $colliderNodes[];
  for ($i in $selectedIndices) {
    $colliderNodes[`size $colliderNodes`] = $nkBdnToolAllColliderNodes[$i];
  }
  return $colliderNodes;
}

/*-
@returns <string[]>
*/
proc string[] getSelectedMeshNodes() {
  print("getSelectedMeshNodes\n"); // debug
  global string $nkBdnToolMeshNodes[];
  print("  nkBdnToolEditorMeshNodes:{\n    " + stringArrayToString($nkBdnToolMeshNodes, ",\n    ") + "\n  }\n");

  string $meshNodeList = getUIControl("nkBdnToolWindow", "meshNodeList");
  // return qStringArray("textScrollList", "-si", $meshNodeList);
  int $selectedIndices[] = qIndexArray("textScrollList", "-sii", $meshNodeList);
  string $meshNodes[];
  for ($i in $selectedIndices) {
    $meshNodes[`size $meshNodes`] = $nkBdnToolMeshNodes[$i];
  }
  return $meshNodes;
}

/*-
@returns <string[]>
*/
proc string[] getSelectedForceNodes() {
  print("getSelectedForceNodes\n"); // debug
  global string $nkBdnToolForceNodes[];
  print("  nkBdnToolEditorForceNodes:{\n    " + stringArrayToString($nkBdnToolForceNodes, ",\n    ") + "\n  }\n");

  string $forceNodeList = getUIControl("nkBdnToolWindow", "forceNodeList");
  // return qStringArray("textScrollList", "-si", $forceNodeList);
  int $selectedIndices[] = qIndexArray("textScrollList", "-sii", $forceNodeList);
  string $forceNodes[];
  for ($i in $selectedIndices) {
    $forceNodes[`size $forceNodes`] = $nkBdnToolForceNodes[$i];
  }
  return $forceNodes;
}

/*-
@returns <string[]>
*/
proc string[] getSelectedBindNodes() {
  print("getSelectedBindNodes\n"); // debug
  global string $nkBdnToolBindNodes[];
  print("  nkBdnToolEditorBindNodes:{\n    " + stringArrayToString($nkBdnToolBindNodes, ",\n    ") + "\n  }\n");

  string $bindNodeList = getUIControl("nkBdnToolWindow", "bindNodeList");
  // return qStringArray("textScrollList", "-si", $bindNodeList);
  int $selectedIndices[] = qIndexArray("textScrollList", "-sii", $bindNodeList);
  string $bindNodes[];
  for ($i in $selectedIndices) {
    $bindNodes[`size $bindNodes`] = $nkBdnToolBindNodes[$i];
  }
  return $bindNodes;
}

/*-
@param $bdnNodes <string[]>
@returns <>
*/
proc updateProxyNodeList(string $bdnNodes[]) {
  print("updateProxyNodeList\n"); // debug
  print("  bdnNodes:{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n");
  global string $nkBdnToolProxyNodes[];
  string $proxyNodeList = getUIControl("nkBdnToolWindow", "proxyNodeList");

  string $proxyNodes[];
  for ($bdnNode in $bdnNodes) {
    $proxyNodes = stringArrayCatenate(
      $proxyNodes,
      getDestConnections($bdnNode, {"outputRotate"}, "", {}, {})
    );
  }

  clear $nkBdnToolProxyNodes;
  executeUIControl("textScrollList", "-ra", $proxyNodeList);

  for ($proxyNode in $proxyNodes) {
    $nkBdnToolProxyNodes[`size $nkBdnToolProxyNodes`] = $proxyNode;
    eString("textScrollList", "-a", toShortName($proxyNode), $proxyNodeList);
  }
}

/*-
@param $bdnNodes <string[]>
@returns <>
*/
proc updateTargetNodeList(string $bdnNodes[]) {
  print("updateTargetNodeList\n"); // debug
  print("  bdnNodes:{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n");
  global string $nkBdnToolTargetNodes[];
  string $targetNodeList = getUIControl("nkBdnToolWindow", "targetNodeList");

  string $targetNodes[];
  for ($bdnNode in $bdnNodes) {
    $targetNodes = stringArrayCatenate(
      $targetNodes,
      getSourceConnections($bdnNode, {"rotationOffset"}, "", {}, {})
    );
  }

  clear $nkBdnToolTargetNodes;
  executeUIControl("textScrollList", "-ra", $targetNodeList);

  for ($targetNode in $targetNodes) {
    $nkBdnToolTargetNodes[`size $nkBdnToolTargetNodes`] = $targetNode;
    eString("textScrollList", "-a", toShortName($targetNode), $targetNodeList);
  }
}

/*-
@param $bdnNodes <string[]>
@returns <>
*/
proc updateInfluencedColliderNodeList(string $bdnNodes[]) {
  print("updateInfluencedColliderNodeList\n"); // debug
  print("  bdnNodes:{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n");
  global string $nkBdnToolInfluencedColliderNodes[];
  string $influencedColliderNodeList = getUIControl("nkBdnToolWindow", "influencedColliderNodeList");

  /*
  ToDo
  bdnTypeによる判定ではなく全ての入力アトリビュートを調べてより汎用的な処理にする。
  */
  string $influencedColliderNodes[];
  for ($bdnNode in $bdnNodes) {
    string $sourceNodes[] = getSourceConnections($bdnNode, {}, "", {}, {});
    for ($sourceNode in $sourceNodes) {
      if (!isBdnType($sourceNode, "collider")) continue;

      $influencedColliderNodes[`size $influencedColliderNodes`] = $sourceNode;
    }
  }
  $influencedColliderNodes = stringArrayRemoveDuplicates($influencedColliderNodes);
  print("  influencedColliderNodes:{\n    " + stringArrayToString($influencedColliderNodes, ",\n    ") + "\n  }\n");

  clear $nkBdnToolInfluencedColliderNodes;
  executeUIControl("textScrollList", "-ra", $influencedColliderNodeList);

  for ($influencedColliderNode in $influencedColliderNodes) {
    $nkBdnToolInfluencedColliderNodes[`size $nkBdnToolInfluencedColliderNodes`] = $influencedColliderNode;
    eString("textScrollList", "-a", toShortName($influencedColliderNode), $influencedColliderNodeList);
  }
}

/*-
@returns <>
*/
proc updateAllColliderNodeList() {
  print("updateAllColliderNodeList\n"); // debug
  global string $nkBdnToolAllColliderNodes[];
  string $allColliderNodeList = getUIControl("nkBdnToolWindow", "allColliderNodeList");

  string $allColliderNodes[] = gatherColliderNodes(false);
  print("  allColliderNodes:{\n    " + stringArrayToString($allColliderNodes, ",\n    ") + "\n  }\n");

  clear $nkBdnToolAllColliderNodes;
  executeUIControl("textScrollList", "-ra", $allColliderNodeList);

  for ($allColliderNode in $allColliderNodes) {
    $nkBdnToolAllColliderNodes[`size $nkBdnToolAllColliderNodes`] = $allColliderNode;
    eString("textScrollList", "-a", toShortName($allColliderNode), $allColliderNodeList);
  }
}

/*-
@param $bdnNodes <string[]>
@returns <>
*/
proc updateMeshNodeList(string $bdnNodes[]) {
  print("updateMeshNodeList\n"); // debug
  print("  bdnNodes:{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n");
  global string $nkBdnToolMeshNodes[];
  string $meshNodeList = getUIControl("nkBdnToolWindow", "meshNodeList");

  string $meshNodes[];
  for ($bdnNode in $bdnNodes) {
    $meshNodes = stringArrayCatenate(
      $meshNodes,
      getSourceConnections($bdnNode, {"rotationOffset"}, "", {}, {})
    );
  }

  clear $nkBdnToolMeshNodes;
  executeUIControl("textScrollList", "-ra", $meshNodeList);

  for ($meshNode in $meshNodes) {
    $nkBdnToolMeshNodes[`size $nkBdnToolMeshNodes`] = $meshNode;
    eString("textScrollList", "-a", toShortName($meshNode), $meshNodeList);
  }
}

/*-
@param $bdnNodes <string[]>
@returns <>
*/
proc updateForceNodeList(string $bdnNodes[]) {
  print("updateForceNodeList\n"); // debug
  print("  bdnNodes:{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n");
  global string $nkBdnToolForceNodes[];
  string $forceNodeList = getUIControl("nkBdnToolWindow", "forceNodeList");

  string $forceNodes[];
  for ($bdnNode in $bdnNodes) {
    $forceNodes = stringArrayCatenate(
      $forceNodes,
      getSourceConnections($bdnNode, {"rotationOffset"}, "", {}, {})
    );
  }

  clear $nkBdnToolForceNodes;
  executeUIControl("textScrollList", "-ra", $forceNodeList);

  for ($forceNode in $forceNodes) {
    $nkBdnToolForceNodes[`size $nkBdnToolForceNodes`] = $forceNode;
    eString("textScrollList", "-a", toShortName($forceNode), $forceNodeList);
  }
}

/*-
@param $bdnNodes <string[]>
@returns <>
*/
proc updateBindNodeList(string $bdnNodes[]) {
  print("updateBindNodeList\n"); // debug
  print("  bdnNodes:{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n");
  global string $nkBdnToolBindNodes[];
  string $bindNodeList = getUIControl("nkBdnToolWindow", "bindNodeList");

  string $bindNodes[];
  for ($bdnNode in $bdnNodes) {
    $bindNodes = stringArrayCatenate(
      $bindNodes,
      getSourceConnections($bdnNode, {"rotationOffset"}, "", {}, {})
    );
  }

  clear $nkBdnToolBindNodes;
  executeUIControl("textScrollList", "-ra", $bindNodeList);

  for ($bindNode in $bindNodes) {
    $nkBdnToolBindNodes[`size $nkBdnToolBindNodes`] = $bindNode;
    eString("textScrollList", "-a", toShortName($bindNode), $bindNodeList);
  }
}

/*-
@param $shouldUpdateAllColliderNodeList <boolean>
@returns <>
*/
proc updateBdnRelatedNodeList(int $shouldUpdateAllColliderNodeList) {
  print("updateBdnRelatedNodeList\n"); // debug
  print("  shouldUpdateAllColliderNodeList:" + $shouldUpdateAllColliderNodeList + "\n"); // debug
  string $bdnRelatedNodeTab = getUIControl("nkBdnToolWindow", "bdnRelatedNodeTab");
  string $selectedTabIndex = qIndex("tabLayout", "-sti", $bdnRelatedNodeTab);
  print("  selectedTabIndex:" + $selectedTabIndex + "\n");

  string $bdnNodes[] = getSelectedBdnNodes();
  if ($selectedTabIndex == 0) {
    updateProxyNodeList($bdnNodes);
    updateTargetNodeList($bdnNodes);
  }
  else if ($selectedTabIndex == 1) {
    updateInfluencedColliderNodeList($bdnNodes);
    if ($shouldUpdateAllColliderNodeList) {
      updateAllColliderNodeList();
    }
  }
  else if ($selectedTabIndex == 2) {
    updateMeshNodeList($bdnNodes);
  }
  else if ($selectedTabIndex == 3) {
    updateForceNodeList($bdnNodes);
  }
  else if ($selectedTabIndex == 4) {
    updateBindNodeList($bdnNodes);
  }
}

/*-
@returns <>
*/
proc updateBdnNodeList() {
  print("updateBdnNodeList\n"); // debug
  global string $nkBdnToolBdnNodes[];
  string $bdnNodeList = getUIControl("nkBdnToolWindow", "bdnNodeList");

  clear $nkBdnToolBdnNodes;
  executeUIControl("textScrollList", "-ra", $bdnNodeList);

  if (isPluginLoaded()) {
    string $bdnNodes[] = gatherBdnNodes(false);
    for ($bdnNode in $bdnNodes) {
      $nkBdnToolBdnNodes[`size $nkBdnToolBdnNodes`] = $bdnNode;
      eString("textScrollList", "-a", $bdnNode, $bdnNodeList);
    }
  }
  updateBdnRelatedNodeList(true);
}

/*-
@returns <>
*/
proc updateBdnAttributeUI() {
  print("updateBdnAttributeUI\n"); // debug
  string $bdnDampingField = getUIControl("nkBdnToolWindow", "bdnDampingField");
  string $bdnElasticityField = getUIControl("nkBdnToolWindow", "bdnElasticityField");
  string $elasticForceFunctionMenuGrp = getUIControl("nkBdnToolWindow", "elasticForceFunctionMenuGrp");
  string $bdnStiffnessField = getUIControl("nkBdnToolWindow", "bdnStiffnessField");
  string $bdnMassField = getUIControl("nkBdnToolWindow", "bdnMassField");
  string $bdnGravityXField = getUIControl("nkBdnToolWindow", "bdnGravityXField");
  string $bdnGravityYField = getUIControl("nkBdnToolWindow", "bdnGravityYField");
  string $bdnGravityZField = getUIControl("nkBdnToolWindow", "bdnGravityZField");
  string $bdnGravityMultiplyField = getUIControl("nkBdnToolWindow", "bdnGravityMultiplyField");
  string $bdnAdditionalForceScaleField = getUIControl("nkBdnToolWindow", "bdnAdditionalForceScaleField");
  string $bdnEnableTurbulenceCheckBox = getUIControl("nkBdnToolWindow", "bdnEnableTurbulenceCheckBox");
  string $bdnTurbulenceSeedField = getUIControl("nkBdnToolWindow", "bdnTurbulenceSeedField");
  string $bdnTurbulenceStrengthField = getUIControl("nkBdnToolWindow", "bdnTurbulenceStrengthField");
  string $bdnTurbulenceVectorChangeScaleField = getUIControl("nkBdnToolWindow", "bdnTurbulenceVectorChangeScaleField");
  string $bdnTurbulenceVectorChangeMaxField = getUIControl("nkBdnToolWindow", "bdnTurbulenceVectorChangeMaxField");
  string $bdnEnableAngleLimitCheckBox = getUIControl("nkBdnToolWindow", "bdnEnableAngleLimitCheckBox");
  string $bdnAngleLimitField = getUIControl("nkBdnToolWindow", "bdnAngleLimitField");
  string $bdnRadiusField = getUIControl("nkBdnToolWindow", "bdnRadiusField");
  string $bdnIterationsField = getUIControl("nkBdnToolWindow", "bdnIterationsField");
  string $bdnEnableGroundColCheckBox = getUIControl("nkBdnToolWindow", "bdnEnableGroundColCheckBox");
  string $bdnGroundHeightField = getUIControl("nkBdnToolWindow", "bdnGroundHeightField");
  string $bdnMeshColCutoffField = getUIControl("nkBdnToolWindow", "bdnMeshColCutoffField");

  float $damping = 0.1;
  float $elasticity = 30.0;
  int $elasticForceFunction = 0;
  float $stiffness = 0.0;
  float $mass = 1.0;
  float $gravityX = 0.0;
  float $gravityY = -980.0;
  float $gravityZ = 0.0;
  float $gravityMultiply = 0.0;
  float $additionalForceScale = 1.0;
  int $enableTurbulence = false;
  int $turbulenceSeed = 0;
  float $turbulenceStrength = 10.0;
  float $turbulenceVectorChangeScale = 0.05;
  float $turbulenceVectorChangeMax = 0.1;
  int $enableAngleLimit = false;
  float $angleLimit = 60.0;
  float $radius = 0.0;
  int $iterations = 5;
  int $enableGroundCol = false;
  float $groundHeight = 0.0;
  float $meshColCutoff = 10.0;

  string $bdnNodes[] = getSelectedBdnNodes();
  int $numBdnNodes = `size $bdnNodes`;
  if ($numBdnNodes > 0) {
    string $lastNode = $bdnNodes[$numBdnNodes - 1];
    if (isType($lastNode, {"boneDynamicsNode"}, true)) {
      $damping = getFloatAttribute($lastNode, "damping", $damping);
      $elasticity = getFloatAttribute($lastNode, "elasticity", $elasticity);
      $elasticForceFunction = getIntAttribute($lastNode, "elasticForceFunction", $elasticForceFunction);
      $stiffness = getFloatAttribute($lastNode, "stiffness", $stiffness);
      $mass = getFloatAttribute($lastNode, "mass", $mass);
      $gravityX = getFloatAttribute($lastNode, "gravityX", $gravityX);
      $gravityY = getFloatAttribute($lastNode, "gravityY", $gravityY);
      $gravityZ = getFloatAttribute($lastNode, "gravityZ", $gravityZ);
      $gravityMultiply = getFloatAttribute($lastNode, "gravityMultiply", $gravityMultiply);
      $additionalForceScale = getFloatAttribute($lastNode, "additionalForceScale", $additionalForceScale);
      $enableTurbulence = getIntAttribute($lastNode, "enableTurbulence", $enableTurbulence);
      $turbulenceSeed = getIntAttribute($lastNode, "turbulenceSeed", $turbulenceSeed);
      $turbulenceStrength = getFloatAttribute($lastNode, "turbulenceStrength", $turbulenceStrength);
      $turbulenceVectorChangeScale = getFloatAttribute($lastNode, "turbulenceVectorChangeScale", $turbulenceVectorChangeScale);
      $turbulenceVectorChangeMax = getFloatAttribute($lastNode, "turbulenceVectorChangeMax", $turbulenceVectorChangeMax);
      $enableAngleLimit = getIntAttribute($lastNode, "enableAngleLimit", $enableAngleLimit);
      $angleLimit = getFloatAttribute($lastNode, "angleLimit", $angleLimit);
      $radius = getFloatAttribute($lastNode, "radius", $radius);
      $iterations = getIntAttribute($lastNode, "iterations", $iterations);
      $enableGroundCol = getIntAttribute($lastNode, "enableGroundCol", $enableGroundCol);
      $groundHeight = getFloatAttribute($lastNode, "groundHeight", $groundHeight);
      $meshColCutoff = getFloatAttribute($lastNode, "meshColCutoff", $meshColCutoff);
    }
  }

  eFloat("floatFieldGrp", "-v1", $damping, $bdnDampingField);
  eFloat("floatFieldGrp", "-v1", $elasticity, $bdnElasticityField);
  eIndex("optionMenuGrp", "-sl", $elasticForceFunction, $elasticForceFunctionMenuGrp);
  eFloat("floatFieldGrp", "-v1", $stiffness, $bdnStiffnessField);
  eFloat("floatFieldGrp", "-v1", $mass, $bdnMassField);
  eFloat("floatFieldGrp", "-v1", $gravityX, $bdnGravityXField);
  eFloat("floatFieldGrp", "-v1", $gravityY, $bdnGravityYField);
  eFloat("floatFieldGrp", "-v1", $gravityZ, $bdnGravityZField);
  eFloat("floatFieldGrp", "-v1", $gravityMultiply, $bdnGravityMultiplyField);
  eFloat("floatFieldGrp", "-v1", $additionalForceScale, $bdnAdditionalForceScaleField);
  eInt("checkBoxGrp", "-v1", $enableTurbulence, $bdnEnableTurbulenceCheckBox);
  eInt("intFieldGrp", "-v1", $turbulenceSeed, $bdnTurbulenceSeedField);
  eFloat("floatFieldGrp", "-v1", $turbulenceStrength, $bdnTurbulenceStrengthField);
  eFloat("floatFieldGrp", "-v1", $turbulenceVectorChangeScale, $bdnTurbulenceVectorChangeScaleField);
  eFloat("floatFieldGrp", "-v1", $turbulenceVectorChangeMax, $bdnTurbulenceVectorChangeMaxField);
  eInt("checkBoxGrp", "-v1", $enableAngleLimit, $bdnEnableAngleLimitCheckBox);
  eFloat("floatFieldGrp", "-v1", $angleLimit, $bdnAngleLimitField);
  eFloat("floatFieldGrp", "-v1", $radius, $bdnRadiusField);
  eInt("intFieldGrp", "-v1", $iterations, $bdnIterationsField);
  eInt("checkBoxGrp", "-v1", $enableGroundCol, $bdnEnableGroundColCheckBox);
  eFloat("floatFieldGrp", "-v1", $groundHeight, $bdnGroundHeightField);
  eFloat("floatFieldGrp", "-v1", $meshColCutoff, $bdnMeshColCutoffField);
}

/*-
@returns <>
*/
proc updateColliderAttributeUI() {
  print("updateColliderAttributeUI\n"); // debug
  string $infinitePlaneColliderFrame = getUIControl("nkBdnToolWindow", "infinitePlaneColliderFrame");
  string $infinitePlaneColliderWidthField = getUIControl("nkBdnToolWindow", "infinitePlaneColliderWidthField");
  string $infinitePlaneColliderHeightField = getUIControl("nkBdnToolWindow", "infinitePlaneColliderHeightField");
  string $sphereColliderFrame = getUIControl("nkBdnToolWindow", "sphereColliderFrame");
  string $sphereColliderRadiusField = getUIControl("nkBdnToolWindow", "sphereColliderRadiusField");
  string $capsuleColliderFrame = getUIControl("nkBdnToolWindow", "capsuleColliderFrame");
  string $capsuleColliderRadiusAField = getUIControl("nkBdnToolWindow", "capsuleColliderRadiusAField");
  string $capsuleColliderRadiusBField = getUIControl("nkBdnToolWindow", "capsuleColliderRadiusBField");
  string $capsuleColliderLengthField = getUIControl("nkBdnToolWindow", "capsuleColliderLengthField");
  string $capsuleColliderOffsetField = getUIControl("nkBdnToolWindow", "capsuleColliderOffsetField");
  string $capsuleColliderPivotMenuGrp = getUIControl("nkBdnToolWindow", "capsuleColliderPivotMenuGrp");

  string $infinitePlaneColliderNodes[];
  string $sphereColliderNodes[];
  string $capsuleColliderNodes[];

  string $colliderNodes[] = getSelectedAllColliderNodes();
  for ($colliderNode in $colliderNodes) {
    string $colliderType = getColliderType($colliderNode);
    if ($colliderType == "infinitePlane") {
      $infinitePlaneColliderNodes[`size $infinitePlaneColliderNodes`] = $colliderNode;
    }
    else if ($colliderType == "sphere") {
      $sphereColliderNodes[`size $sphereColliderNodes`] = $colliderNode;
    }
    else if ($colliderType == "capsule") {
      $capsuleColliderNodes[`size $capsuleColliderNodes`] = $colliderNode;
    }
  }

  int $numInfinitePlaneColliderNodes = `size $infinitePlaneColliderNodes`;
  int $numSphereColliderNodes = `size $sphereColliderNodes`;
  int $numCapsuleColliderNodes = `size $capsuleColliderNodes`;
  print("  numInfinitePlaneColliderNodes:" + $numInfinitePlaneColliderNodes + "\n"); // debug
  print("  numSphereColliderNodes       :" + $numSphereColliderNodes + "\n"); // debug
  print("  numCapsuleColliderNodes      :" + $numCapsuleColliderNodes + "\n"); // debug

  int $containsInfinitePlane = $numInfinitePlaneColliderNodes > 0;
  int $containsSphere = $numSphereColliderNodes > 0;
  int $containsCapsule = $numCapsuleColliderNodes > 0;
  eInt("frameLayout", "-vis", $containsInfinitePlane, $infinitePlaneColliderFrame);
  eInt("frameLayout", "-vis", $containsSphere, $sphereColliderFrame);
  eInt("frameLayout", "-vis", $containsCapsule, $capsuleColliderFrame);

  float $infinitePlaneWidth = 1.0;
  float $infinitePlaneHeight = 1.0;
  if ($containsInfinitePlane) {
    string $lastNode = $infinitePlaneColliderNodes[$numInfinitePlaneColliderNodes - 1];
    $infinitePlaneWidth = getFloatAttribute($lastNode, "colliderWidth", $infinitePlaneWidth);
    $infinitePlaneHeight = getFloatAttribute($lastNode, "colliderHeight", $infinitePlaneHeight);
  }
  print("  infinitePlaneWidth :" + $infinitePlaneWidth + "\n"); // debug
  print("  infinitePlaneHeight:" + $infinitePlaneHeight + "\n"); // debug
  eFloat("floatFieldGrp", "-v1", $infinitePlaneWidth, $infinitePlaneColliderWidthField);
  eFloat("floatFieldGrp", "-v1", $infinitePlaneHeight, $infinitePlaneColliderHeightField);

  float $sphereRadius = 0.5;
  if ($containsSphere) {
    string $lastNode = $sphereColliderNodes[$numSphereColliderNodes - 1];
    $sphereRadius = getFloatAttribute($lastNode, "colliderRadius", $sphereRadius);
  }
  print("  sphereRadius:" + $sphereRadius + "\n"); // debug
  eFloat("floatFieldGrp", "-v1", $sphereRadius, $sphereColliderRadiusField);

  float $capsuleRadiusA = 0.5;
  float $capsuleRadiusB = 0.5;
  float $capsuleLength = 2.0;
  float $capsuleOffset = 0.0;
  int $capsulePivot = 0;
  if ($containsCapsule) {
    string $lastNode = $capsuleColliderNodes[$numCapsuleColliderNodes - 1];
    $capsuleRadiusA = getFloatAttribute($lastNode, "colliderRadiusA", $capsuleRadiusA);
    $capsuleRadiusB = getFloatAttribute($lastNode, "colliderRadiusB", $capsuleRadiusB);
    $capsuleLength = getFloatAttribute($lastNode, "colliderLength", $capsuleLength);
    $capsuleOffset = getFloatAttribute($lastNode, "colliderOffset", $capsuleOffset);
    $capsulePivot = getIntAttribute($lastNode, "colliderPivot", $capsulePivot);
  }
  print("  capsuleRadiusA:" + $capsuleRadiusA + "\n"); // debug
  print("  capsuleRadiusB:" + $capsuleRadiusB + "\n"); // debug
  print("  capsuleLength :" + $capsuleLength + "\n"); // debug
  print("  capsuleOffset :" + $capsuleOffset + "\n"); // debug
  print("  capsulePivot  :" + $capsulePivot + "\n"); // debug
  eFloat("floatFieldGrp", "-v1", $capsuleRadiusA, $capsuleColliderRadiusAField);
  eFloat("floatFieldGrp", "-v1", $capsuleRadiusB, $capsuleColliderRadiusBField);
  eFloat("floatFieldGrp", "-v1", $capsuleLength, $capsuleColliderLengthField);
  eFloat("floatFieldGrp", "-v1", $capsuleOffset, $capsuleColliderOffsetField);
  eIndex("optionMenuGrp", "-sl", $capsulePivot, $capsuleColliderPivotMenuGrp);
}

/*-
@param $bdnNodes[] <string[]>
@param $attribute <string>
@param $value <float>
@returns <>
*/
proc setFloatBdnAttribute(string $bdnNodes[], string $attribute, float $value) {
  print("setFloatBdnAttribute\n"); // debug
  print("  bdnNodes :{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n"); // debug
  print("  attribute:" + $attribute + "\n"); // debug
  print("  value    :" + $value + "\n"); // debug
  if (!isPluginLoaded()) return;

  batchSetFloatAttribute($bdnNodes, $attribute, $value);
  // updateBdnAttributeUI();
}

/*-
@param $bdnNodes[] <string[]>
@param $attribute <string>
@param $value <int>
@returns <>
*/
proc setIntBdnAttribute(string $bdnNodes[], string $attribute, int $value) {
  print("setIntBdnAttribute\n"); // debug
  print("  bdnNodes :{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n"); // debug
  print("  attribute:" + $attribute + "\n"); // debug
  print("  value    :" + $value + "\n"); // debug
  if (!isPluginLoaded()) return;

  batchSetIntAttribute($bdnNodes, $attribute, $value);
  // updateBdnAttributeUI();
}

/*-
@param $colliderNodes[] <string[]>
@param $colliderType <string>
@param $attribute <string>
@param $value <float>
@returns <>
*/
proc setFloatColliderAttribute(
  string $colliderNodes[],
  string $colliderType,
  string $attribute,
  float $value
) {
  print("setFloatColliderAttribute\n"); // debug
  print("  colliderNodes:{\n    " + stringArrayToString($colliderNodes, ",\n    ") + "\n  }\n"); // debug
  print("  colliderType :" + $colliderType + "\n"); // debug
  print("  attribute    :" + $attribute + "\n"); // debug
  print("  value        :" + $value + "\n"); // debug
  for ($colliderNode in $colliderNodes) {
    if (!isColliderType($colliderNode, $colliderType)) continue;

    setFloatAttribute($colliderNode, $attribute, $value);
  }
  // updateColliderAttributeUI();
}

/*-
@param $colliderNodes[] <string[]>
@param $colliderType <string>
@param $attribute <string>
@param $value <int>
@returns <>
*/
proc setIntColliderAttribute(
  string $colliderNodes[],
  string $colliderType,
  string $attribute,
  int $value
) {
  print("setIntColliderAttribute\n"); // debug
  print("  colliderNodes:{\n    " + stringArrayToString($colliderNodes, ",\n    ") + "\n  }\n"); // debug
  print("  colliderType :" + $colliderType + "\n"); // debug
  print("  attribute    :" + $attribute + "\n"); // debug
  print("  value        :" + $value + "\n"); // debug
  for ($colliderNode in $colliderNodes) {
    if (!isColliderType($colliderNode, $colliderType)) continue;

    setIntAttribute($colliderNode, $attribute, $value);
  }
  // updateColliderAttributeUI();
}

/*-
@param $bdnNodes[] <string[]>
@returns <>
*/
proc copyBdnAttributes(string $bdnNodes[]) {
  print("copyBdnAttributes\n"); // debug
  print("  bdnNodes:{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n"); // debug
  global string $nkBdnToolBdnAttributeCache;
  if (!isPluginLoaded()) return;

  int $numBdnNodes = `size $bdnNodes`;
  if ($numBdnNodes == 0) return;

  string $lastNode = $bdnNodes[$numBdnNodes - 1];
  $nkBdnToolBdnAttributeCache = bdnAttributesToDict($lastNode);
  print("nkBdnToolBdnAttributeCache:" + $nkBdnToolBdnAttributeCache + "\n");
}

/*-
@param $bdnNodes[] <string[]>
@returns <>
*/
proc pasteBdnAttributes(string $bdnNodes[]) {
  print("pasteBdnAttributes\n"); // debug
  print("  bdnNodes:{\n    " + stringArrayToString($bdnNodes, ",\n    ") + "\n  }\n"); // debug
  global string $nkBdnToolBdnAttributeCache;
  if (!isPluginLoaded()) return;

  applyDictToBdnAttributes($nkBdnToolBdnAttributeCache, $bdnNodes);
}

// -----------------------------------------------------------------------------
// UIコントロールイベントハンドラ
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc nkBdnToolWindowClosed() {
  print("nkBdnToolWindowClosed\n"); // debug
  // unsubscribeMainWindowObservers();
  removeUIControls("nkBdnToolWindow", "");
  // nkBdnToolEditorWindowClosed();
}

// /*-
// @returns <>
// */
// proc nkBdnToolEditorWindowClosed() {
//   print("nkBdnToolEditorWindowClosed\n"); // debug
//   removeUIControls("nkBdnToolEditorWindow", "");
//   setEditorWindowVisibility(false);
// }

/*-
@returns <>
*/
proc resetWindowMenuItemSelected() {
  print("resetWindowMenuItemSelected\n"); // debug
  // windowPrefRemove("window", "nkBdnToolEditorWindow");
  windowPrefRemove("window", "nkBdnToolWindow");
  nkBdnTool();
}

// /*-
// @returns <>
// */
// proc closeMenuItemSelected() {
//   print("closeMenuItemSelected\n"); // debug
//   string $nkBdnToolEditorWindow = getUIControl("nkBdnToolEditorWindow", "nkBdnToolEditorWindow");
//   print("  nkBdnToolEditorWindow:" + $nkBdnToolEditorWindow + "\n"); // debug
//   windowClose($nkBdnToolEditorWindow);
// }

/*-
@returns <>
*/
proc quitMenuItemSelected() {
  print("quitMenuItemSelected\n"); // debug
  string $nkBdnToolWindow = getUIControl("nkBdnToolWindow", "nkBdnToolWindow");
  print("  nkBdnToolWindow:" + $nkBdnToolWindow + "\n"); // debug
  windowClose($nkBdnToolWindow);
}

/*-
@returns <>
*/
proc refreshMenuItemSelected() {
  print("refreshMenuItemSelected\n"); // debug
  updateBdnNodeList();
}

/*-
@returns <>
*/
proc aboutMenuItemSelected() {
  print("aboutMenuItemSelected\n"); // debug
  confirmDialog
      -b "OK"
      -db "OK"
      -m (
        "nkBdnTool " + (nkBdnToolVersion())
            + "\n\nMIT License\nhttps://github.com/imaoki/nkBdnTool"
            + "\n\nboneDynamicsNode\nhttps://github.com/akasaki1211/boneDynamicsNode"
      )
      -p (getParentableWindow("nkBdnToolWindow"))
      -t "About - nkBdnTool";
}

/*-
@returns <>
*/
proc bdnPluginLoadButtonPressed() {
  print("bdnPluginLoadButtonPressed\n"); // debug
  loadBdnPlugin();
}

/*-
@returns <>
*/
proc bdnPluginUnloadButtonPressed() {
  print("bdnPluginUnloadButtonPressed\n"); // debug
  unloadBdnPlugin();
}

/*-
@returns <>
*/
proc deleteAllButtonPressed() {
  print("deleteAllButtonPressed\n"); // debug
  deleteAllBdnNodes();
}

/*-
@returns <>
*/
proc bdnNodeListDoubleClicked() {
  print("bdnNodeListDoubleClicked\n"); // debug
  select -r (getSelectedBdnNodes());
}

/*-
@returns <>
*/
proc bdnNodeListSelected() {
  print("bdnNodeListSelected\n"); // debug
  updateBdnAttributeUI();
  updateBdnRelatedNodeList(false);
}

/*-
@returns <>
*/
proc selectBdnNodesButtonPressed() {
  print("selectBdnNodesButtonPressed\n"); // debug
  select -r (getSelectedBdnNodes());
}

/*-
@returns <>
*/
proc bdnAttributeInitializeButtonPressed() {
  print("bdnAttributeInitializeButtonPressed\n"); // debug
  initializeBdnAttributes(getSelectedBdnNodes());
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnAttributeCopyButtonPressed() {
  print("bdnAttributeCopyButtonPressed\n"); // debug
  copyBdnAttributes(getSelectedBdnNodes());
}

/*-
@returns <>
*/
proc bdnAttributePasteButtonPressed() {
  print("bdnAttributePasteButtonPressed\n"); // debug
  pasteBdnAttributes(getSelectedBdnNodes());
}

/*-
@returns <>
*/
proc bdnDampingFieldChanged() {
  print("bdnDampingFieldChanged\n"); // debug
  string $bdnDampingField = getUIControl("nkBdnToolWindow", "bdnDampingField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "damping",
    qFloat("floatFieldGrp", "-v1", $bdnDampingField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnElasticityFieldChanged() {
  print("bdnElasticityFieldChanged\n"); // debug
  string $bdnElasticityField = getUIControl("nkBdnToolWindow", "bdnElasticityField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "elasticity",
    qFloat("floatFieldGrp", "-v1", $bdnElasticityField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc elasticForceFunctionMenuGrpChanged() {
  print("elasticForceFunctionMenuGrpChanged\n"); // debug
  string $elasticForceFunctionMenuGrp = getUIControl("nkBdnToolWindow", "elasticForceFunctionMenuGrp");
  setIntBdnAttribute(
    getSelectedBdnNodes(),
    "elasticForceFunction",
    qIndex("optionMenuGrp", "-sl", $elasticForceFunctionMenuGrp)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnStiffnessFieldChanged() {
  print("bdnStiffnessFieldChanged\n"); // debug
  string $bdnStiffnessField = getUIControl("nkBdnToolWindow", "bdnStiffnessField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "stiffness",
    qFloat("floatFieldGrp", "-v1", $bdnStiffnessField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnMassFieldChanged() {
  print("bdnMassFieldChanged\n"); // debug
  string $bdnMassField = getUIControl("nkBdnToolWindow", "bdnMassField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "mass",
    qFloat("floatFieldGrp", "-v1", $bdnMassField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnGravityXFieldChanged() {
  print("bdnGravityXFieldChanged\n"); // debug
  string $bdnGravityXField = getUIControl("nkBdnToolWindow", "bdnGravityXField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "gravityX",
    qFloat("floatFieldGrp", "-v1", $bdnGravityXField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnGravityYFieldChanged() {
  print("bdnGravityYFieldChanged\n"); // debug
  string $bdnGravityYField = getUIControl("nkBdnToolWindow", "bdnGravityYField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "gravityY",
    qFloat("floatFieldGrp", "-v1", $bdnGravityYField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnGravityZFieldChanged() {
  print("bdnGravityZFieldChanged\n"); // debug
  string $bdnGravityZField = getUIControl("nkBdnToolWindow", "bdnGravityZField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "gravityZ",
    qFloat("floatFieldGrp", "-v1", $bdnGravityZField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnGravityMultiplyFieldChanged() {
  print("bdnGravityMultiplyFieldChanged\n"); // debug
  string $bdnGravityMultiplyField = getUIControl("nkBdnToolWindow", "bdnGravityMultiplyField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "gravityMultiply",
    qFloat("floatFieldGrp", "-v1", $bdnGravityMultiplyField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnAdditionalForceScaleFieldChanged() {
  print("bdnAdditionalForceScaleFieldChanged\n"); // debug
  string $bdnAdditionalForceScaleField = getUIControl("nkBdnToolWindow", "bdnAdditionalForceScaleField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "additionalForceScale",
    qFloat("floatFieldGrp", "-v1", $bdnAdditionalForceScaleField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnEnableTurbulenceCheckBoxChanged() {
  print("bdnEnableTurbulenceCheckBoxChanged\n"); // debug
  string $bdnEnableTurbulenceCheckBox = getUIControl("nkBdnToolWindow", "bdnEnableTurbulenceCheckBox");
  setIntBdnAttribute(
    getSelectedBdnNodes(),
    "enableTurbulence",
    qInt("checkBoxGrp", "-v1", $bdnEnableTurbulenceCheckBox)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnTurbulenceSeedFieldChanged() {
  print("bdnTurbulenceSeedFieldChanged\n"); // debug
  string $bdnTurbulenceSeedField = getUIControl("nkBdnToolWindow", "bdnTurbulenceSeedField");
  setIntBdnAttribute(
    getSelectedBdnNodes(),
    "turbulenceSeed",
    qInt("intFieldGrp", "-v1", $bdnTurbulenceSeedField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnTurbulenceStrengthFieldChanged() {
  print("bdnTurbulenceStrengthFieldChanged\n"); // debug
  string $bdnTurbulenceStrengthField = getUIControl("nkBdnToolWindow", "bdnTurbulenceStrengthField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "turbulenceStrength",
    qFloat("floatFieldGrp", "-v1", $bdnTurbulenceStrengthField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnTurbulenceVectorChangeScaleFieldChanged() {
  print("bdnTurbulenceVectorChangeScaleFieldChanged\n"); // debug
  string $bdnTurbulenceVectorChangeScaleField = getUIControl("nkBdnToolWindow", "bdnTurbulenceVectorChangeScaleField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "turbulenceVectorChangeScale",
    qFloat("floatFieldGrp", "-v1", $bdnTurbulenceVectorChangeScaleField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnTurbulenceVectorChangeMaxFieldChanged() {
  print("bdnTurbulenceVectorChangeMaxFieldChanged\n"); // debug
  string $bdnTurbulenceVectorChangeMaxField = getUIControl("nkBdnToolWindow", "bdnTurbulenceVectorChangeMaxField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "turbulenceVectorChangeMax",
    qFloat("floatFieldGrp", "-v1", $bdnTurbulenceVectorChangeMaxField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnEnableAngleLimitCheckBoxChanged() {
  print("bdnEnableAngleLimitCheckBoxChanged\n"); // debug
  string $bdnEnableAngleLimitCheckBox = getUIControl("nkBdnToolWindow", "bdnEnableAngleLimitCheckBox");
  setIntBdnAttribute(
    getSelectedBdnNodes(),
    "enableAngleLimit",
    qInt("checkBoxGrp", "-v1", $bdnEnableAngleLimitCheckBox)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnAngleLimitFieldChanged() {
  print("bdnAngleLimitFieldChanged\n"); // debug
  string $bdnAngleLimitField = getUIControl("nkBdnToolWindow", "bdnAngleLimitField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "angleLimit",
    qFloat("floatFieldGrp", "-v1", $bdnAngleLimitField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnRadiusFieldChanged() {
  print("bdnRadiusFieldChanged\n"); // debug
  string $bdnRadiusField = getUIControl("nkBdnToolWindow", "bdnRadiusField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "radius",
    qFloat("floatFieldGrp", "-v1", $bdnRadiusField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnIterationsFieldChanged() {
  print("bdnIterationsFieldChanged\n"); // debug
  string $bdnIterationsField = getUIControl("nkBdnToolWindow", "bdnIterationsField");
  setIntBdnAttribute(
    getSelectedBdnNodes(),
    "iterations",
    qInt("intFieldGrp", "-v1", $bdnIterationsField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnEnableGroundColCheckBoxChanged() {
  print("bdnEnableGroundColCheckBoxChanged\n"); // debug
  string $bdnEnableGroundColCheckBox = getUIControl("nkBdnToolWindow", "bdnEnableGroundColCheckBox");
  setIntBdnAttribute(
    getSelectedBdnNodes(),
    "enableGroundCol",
    qInt("checkBoxGrp", "-v1", $bdnEnableGroundColCheckBox)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnGroundHeightFieldChanged() {
  print("bdnGroundHeightFieldChanged\n"); // debug
  string $bdnGroundHeightField = getUIControl("nkBdnToolWindow", "bdnGroundHeightField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "groundHeight",
    qFloat("floatFieldGrp", "-v1", $bdnGroundHeightField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnMeshColCutoffFieldChanged() {
  print("bdnMeshColCutoffFieldChanged\n"); // debug
  string $bdnMeshColCutoffField = getUIControl("nkBdnToolWindow", "bdnMeshColCutoffField");
  setFloatBdnAttribute(
    getSelectedBdnNodes(),
    "meshColCutoff",
    qFloat("floatFieldGrp", "-v1", $bdnMeshColCutoffField)
  );
  updateBdnAttributeUI();
}

/*-
@returns <>
*/
proc bdnRelatedNodeTabChanged() {
  print("bdnRelatedNodeTabChanged\n"); // debug
  // string $bdnRelatedNodeTab = getUIControl("nkBdnToolWindow", "bdnRelatedNodeTab");
  // print("  bdnRelatedNodeTab:" + $bdnRelatedNodeTab + "\n");
  updateBdnRelatedNodeList(true);
}

/*-
@returns <>
*/
proc generateDynamicsUnitButtonPressed() {
  print("generateDynamicsUnitButtonPressed\n"); // debug
  string $dynamicsUnitBranchAimVectorRadioButton = getUIControl("nkBdnToolWindow", "dynamicsUnitBranchAimVectorRadioButton");
  string $dynamicsUnitBranchUpVectorRadioButton = getUIControl("nkBdnToolWindow", "dynamicsUnitBranchUpVectorRadioButton");
  string $dynamicsUnitBranchInvertAimVectorCheckBox = getUIControl("nkBdnToolWindow", "dynamicsUnitBranchInvertAimVectorCheckBox");
  string $dynamicsUnitEndJointOffsetField = getUIControl("nkBdnToolWindow", "dynamicsUnitEndJointOffsetField");

  string $bdnBaseName = getBdnBaseName();
  string $sourceNodes[] = gatherNodes({"transform"}, false, true, "");
  int $branchAimVectorIndex = qIndex("radioButtonGrp", "-sl", $dynamicsUnitBranchAimVectorRadioButton);
  int $branchUpVectorIndex = qIndex("radioButtonGrp", "-sl", $dynamicsUnitBranchUpVectorRadioButton);
  int $branchInvertAimVector = qInt("checkBoxGrp", "-v1", $dynamicsUnitBranchInvertAimVectorCheckBox);
  float $endJointOffset[] = qFloatArray("floatFieldGrp", "-v", $dynamicsUnitEndJointOffsetField);

  float $branchAimVector[] = {0.0, 0.0, 0.0};
  float $branchUpVector[] = {0.0, 0.0, 0.0};
  $branchAimVector[$branchAimVectorIndex] = ($branchInvertAimVector) ? -1.0 : 1.0;
  $branchUpVector[$branchUpVectorIndex] = 1.0;

  string $dynamicsNodes[] = generateDynamicsUnit(
    $bdnBaseName,
    $sourceNodes,
    $branchAimVector,
    $branchUpVector,
    $endJointOffset
  );
  print("  dynamicsNodes:{\n    " + stringArrayToString($dynamicsNodes, ",\n    ") + "\n  }\n"); // debug
  select -r $dynamicsNodes;
}

/*-
@returns <>
*/
proc proxyNodeListDoubleClicked() {
  print("proxyNodeListDoubleClicked\n"); // debug
  select -r (getSelectedProxyNodes());
}

/*-
@returns <>
*/
proc proxyNodeListSelected() {
  print("proxyNodeListSelected\n"); // debug
}

/*-
@returns <>
*/
proc selectProxyNodesButtonPressed() {
  print("selectProxyNodesButtonPressed\n"); // debug
  select -r (getSelectedProxyNodes());
}

/*-
@returns <>
*/
proc targetNodeListDoubleClicked() {
  print("targetNodeListDoubleClicked\n"); // debug
  select -r (getSelectedTargetNodes());
}

/*-
@returns <>
*/
proc targetNodeListSelected() {
  print("targetNodeListSelected\n"); // debug
}

/*-
@returns <>
*/
proc selectTargetNodesButtonPressed() {
  print("selectTargetNodesButtonPressed\n"); // debug
  select -r (getSelectedTargetNodes());
}

/*-
@returns <>
*/
proc createColliderInfinitePlaneButtonPressed() {
  // print("createColliderInfinitePlaneButtonPressed\n"); // debug
  string $bdnBaseName = getBdnBaseName();
  string $sourceNodes[] = gatherNodes({"transform"}, false, true, "");
  string $colliderNodes[] = createInfinitePlaneCollider($bdnBaseName, $sourceNodes);
  print("  colliderNodes:{\n    " + stringArrayToString($colliderNodes, ",\n    ") + "\n  }\n"); // debug
  select -r $colliderNodes;
}

/*-
@returns <>
*/
proc createColliderSphereButtonPressed() {
  // print("createColliderSphereButtonPressed\n"); // debug
  string $bdnBaseName = getBdnBaseName();
  string $sourceNodes[] = gatherNodes({"transform"}, false, true, "");
  string $colliderNodes[] = createSphereCollider($bdnBaseName, $sourceNodes);
  print("  colliderNodes:{\n    " + stringArrayToString($colliderNodes, ",\n    ") + "\n  }\n"); // debug
  select -r $colliderNodes;
}

/*-
@returns <>
*/
proc createColliderCapsuleButtonPressed() {
  // print("createColliderCapsuleButtonPressed\n"); // debug
  string $bdnBaseName = getBdnBaseName();
  string $sourceNodes[] = gatherNodes({"transform"}, false, true, "");
  string $colliderNodes[] = createCapsuleCollider($bdnBaseName, $sourceNodes);
  print("  colliderNodes:{\n    " + stringArrayToString($colliderNodes, ",\n    ") + "\n  }\n"); // debug
  select -r $colliderNodes;
}

/*-
@returns <>
*/
proc influencedColliderNodeListDoubleClicked() {
  print("influencedColliderNodeListDoubleClicked\n"); // debug
  select -r (getSelectedInfluencedColliderNodes());
}

/*-
@returns <>
*/
proc influencedColliderNodeListSelected() {
  print("influencedColliderNodeListSelected\n"); // debug
}

/*-
@returns <>
*/
proc removeColliderButtonPressed() {
  print("removeColliderButtonPressed\n"); // debug
  removeCollider(
    getSelectedInfluencedColliderNodes(),
    getSelectedBdnNodes()
  );
}

/*-
@returns <>
*/
proc selectInfluencedColliderNodesButtonPressed() {
  print("selectInfluencedColliderNodesButtonPressed\n"); // debug
  select -r (getSelectedInfluencedColliderNodes());
}

/*-
@returns <>
*/
proc allColliderNodeListDoubleClicked() {
  print("allColliderNodeListDoubleClicked\n"); // debug
  select -r (getSelectedAllColliderNodes());
}

/*-
@returns <>
*/
proc allColliderNodeListSelected() {
  print("allColliderNodeListSelected\n"); // debug
  updateColliderAttributeUI();
}

/*-
@returns <>
*/
proc appendColliderButtonPressed() {
  print("appendColliderButtonPressed\n"); // debug
  appendCollider(
    getSelectedAllColliderNodes(),
    getSelectedBdnNodes()
  );
}

/*-
@returns <>
*/
proc selectAllColliderNodesButtonPressed() {
  print("selectAllColliderNodesButtonPressed\n"); // debug
  select -r (getSelectedAllColliderNodes());
}

/*-
@returns <>
*/
proc infinitePlaneColliderWidthFieldChanged() {
  print("infinitePlaneColliderWidthFieldChanged\n"); // debug
  string $infinitePlaneColliderWidthField = getUIControl("nkBdnToolWindow", "infinitePlaneColliderWidthField");
  setFloatColliderAttribute(
    getSelectedAllColliderNodes(),
    "infinitePlane",
    "colliderWidth",
    qFloat("floatFieldGrp", "-v1", $infinitePlaneColliderWidthField)
  );
  updateColliderAttributeUI();
}

/*-
@returns <>
*/
proc infinitePlaneColliderHeightFieldChanged() {
  print("infinitePlaneColliderHeightFieldChanged\n"); // debug
  string $infinitePlaneColliderHeightField = getUIControl("nkBdnToolWindow", "infinitePlaneColliderHeightField");
  setFloatColliderAttribute(
    getSelectedAllColliderNodes(),
    "infinitePlane",
    "colliderHeight",
    qFloat("floatFieldGrp", "-v1", $infinitePlaneColliderHeightField)
  );
  updateColliderAttributeUI();
}

/*-
@returns <>
*/
proc sphereColliderRadiusFieldChanged() {
  print("sphereColliderRadiusFieldChanged\n"); // debug
  string $sphereColliderRadiusField = getUIControl("nkBdnToolWindow", "sphereColliderRadiusField");
  setFloatColliderAttribute(
    getSelectedAllColliderNodes(),
    "sphere",
    "colliderRadius",
    qFloat("floatFieldGrp", "-v1", $sphereColliderRadiusField)
  );
  updateColliderAttributeUI();
}

/*-
@returns <>
*/
proc capsuleColliderRadiusAFieldChanged() {
  print("capsuleColliderRadiusAFieldChanged\n"); // debug
  string $capsuleColliderRadiusAField = getUIControl("nkBdnToolWindow", "capsuleColliderRadiusAField");
  setFloatColliderAttribute(
    getSelectedAllColliderNodes(),
    "capsule",
    "colliderRadiusA",
    qFloat("floatFieldGrp", "-v1", $capsuleColliderRadiusAField)
  );
  updateColliderAttributeUI();
}

/*-
@returns <>
*/
proc capsuleColliderRadiusBFieldChanged() {
  print("capsuleColliderRadiusBFieldChanged\n"); // debug
  string $capsuleColliderRadiusBField = getUIControl("nkBdnToolWindow", "capsuleColliderRadiusBField");
  setFloatColliderAttribute(
    getSelectedAllColliderNodes(),
    "capsule",
    "colliderRadiusB",
    qFloat("floatFieldGrp", "-v1", $capsuleColliderRadiusBField)
  );
  updateColliderAttributeUI();
}

/*-
@returns <>
*/
proc capsuleColliderLengthFieldChanged() {
  print("capsuleColliderLengthFieldChanged\n"); // debug
  string $capsuleColliderLengthField = getUIControl("nkBdnToolWindow", "capsuleColliderLengthField");
  setFloatColliderAttribute(
    getSelectedAllColliderNodes(),
    "capsule",
    "colliderLength",
    qFloat("floatFieldGrp", "-v1", $capsuleColliderLengthField)
  );
  updateColliderAttributeUI();
}

/*-
@returns <>
*/
proc capsuleColliderOffsetFieldChanged() {
  print("capsuleColliderOffsetFieldChanged\n"); // debug
  string $capsuleColliderOffsetField = getUIControl("nkBdnToolWindow", "capsuleColliderOffsetField");
  setFloatColliderAttribute(
    getSelectedAllColliderNodes(),
    "capsule",
    "colliderOffset",
    qFloat("floatFieldGrp", "-v1", $capsuleColliderOffsetField)
  );
  updateColliderAttributeUI();
}

/*-
@returns <>
*/
proc capsuleColliderPivotMenuGrpChanged() {
  print("capsuleColliderPivotMenuGrpChanged\n"); // debug
  string $capsuleColliderPivotMenuGrp = getUIControl("nkBdnToolWindow", "capsuleColliderPivotMenuGrp");
  setIntColliderAttribute(
    getSelectedAllColliderNodes(),
    "capsule",
    "colliderPivot",
    qIndex("optionMenuGrp", "-sl", $capsuleColliderPivotMenuGrp)
  );
  updateColliderAttributeUI();
}

/*-
@returns <>
*/
proc meshNodeListDoubleClicked() {
  print("meshNodeListDoubleClicked\n"); // debug
  select -r (getSelectedMeshNodes());
}

/*-
@returns <>
*/
proc meshNodeListSelected() {
  print("meshNodeListSelected\n"); // debug
}

/*-
@returns <>
*/
proc addMeshNodesButtonPressed() {
  print("addMeshNodesButtonPressed\n"); // debug
  // select -r (getSelectedMeshNodes());
}

/*-
@returns <>
*/
proc removeMeshNodesButtonPressed() {
  print("removeMeshNodesButtonPressed\n"); // debug
  // select -r (getSelectedMeshNodes());
}

/*-
@returns <>
*/
proc selectMeshNodesButtonPressed() {
  print("selectMeshNodesButtonPressed\n"); // debug
  select -r (getSelectedMeshNodes());
}

/*-
@returns <>
*/
proc forceNodeListDoubleClicked() {
  print("forceNodeListDoubleClicked\n"); // debug
  select -r (getSelectedForceNodes());
}

/*-
@returns <>
*/
proc forceNodeListSelected() {
  print("forceNodeListSelected\n"); // debug
}

/*-
@returns <>
*/
proc addForceNodesButtonPressed() {
  print("addForceNodesButtonPressed\n"); // debug
  // select -r (getSelectedForceNodes());
}

/*-
@returns <>
*/
proc removeForceNodesButtonPressed() {
  print("removeForceNodesButtonPressed\n"); // debug
  // select -r (getSelectedForceNodes());
}

/*-
@returns <>
*/
proc selectForceNodesButtonPressed() {
  print("selectForceNodesButtonPressed\n"); // debug
  select -r (getSelectedForceNodes());
}

/*-
@returns <>
*/
proc bindNodeListDoubleClicked() {
  print("bindNodeListDoubleClicked\n"); // debug
  select -r (getSelectedBindNodes());
}

/*-
@returns <>
*/
proc bindNodeListSelected() {
  print("bindNodeListSelected\n"); // debug
}

/*-
@returns <>
*/
proc selectBindNodesButtonPressed() {
  print("selectBindNodesButtonPressed\n"); // debug
  select -r (getSelectedBindNodes());
}

/*-
@returns <>
*/
proc bakeButtonPressed() {
  print("bakeButtonPressed\n"); // debug
}

// /*-
// @returns <>
// */
// proc toggleEditorWindowCheckBoxChanged() {
//   print("toggleEditorWindowCheckBoxChanged\n"); // debug
//   string $toggleEditorWindowCheckBox = getUIControl("nkBdnToolWindow", "toggleEditorWindowCheckBox");
//   // $toggleEditorWindowCheckBox = `substitute "||" $toggleEditorWindowCheckBox "|"`;
//   // print("toggleEditorWindowCheckBox:" + $toggleEditorWindowCheckBox + "\n");
//   // string $isChecked = qInt("iconTextCheckBox", "-v", $toggleEditorWindowCheckBox);
//   // string $isChecked = `iconTextCheckBox -q -v $toggleEditorWindowCheckBox`;
//   // string $isChecked = `eval "iconTextCheckBox" "-q" "-v" $toggleEditorWindowCheckBox`;
//   // print("isChecked:" + $isChecked + "\n");
//   setEditorWindowVisibility(
//     qInt("iconTextCheckBox", "-v", $toggleEditorWindowCheckBox)
//   );
//   // setEditorWindowVisibility(`iconTextCheckBox -q -v $toggleEditorWindowCheckBox`);
// }

// /*-
// @returns <>
// */
// proc selectTimeNodeButtonPressed() {
//   print("selectTimeNodeButtonPressed\n"); // debug
//   string $timeNodes[];
//   string $timeNode = getTimeNode();
//   if (`objExists $timeNode`) {
//     $timeNodes[`size $timeNodes`] = $timeNode;
//   }
//   select -r $timeNode;
// }

// /*-
// @returns <>
// */
// proc selectBdnNodesFromDynamicsJointsButtonPressed() {
//   print("selectBdnNodesFromDynamicsJointsButtonPressed\n"); // debug
// }

// /*-
// @returns <>
// */
// proc selectTargetJointsFromDynamicsJointsButtonPressed() {
//   print("selectTargetJointsFromDynamicsJointsButtonPressed\n"); // debug
// }

// /*-
// @returns <>
// */
// proc controlNodeTextPressed() {
//   // print("controlNodeTextPressed\n"); // debug
//   string $controlNodeText = getUIControl("nkBdnToolWindow", "controlNodeText");
//   eString("textFieldButtonGrp", "-tx", nodesAsCSV({"transform"}, true, true, "", false), $controlNodeText);
// }

// /*-
// @returns <>
// */
// proc generateTargetButtonPressed() {
//   print("generateTargetButtonPressed\n"); // debug
//   // string $controlNodeText = getUIControl("nkBdnToolWindow", "controlNodeText");
//   // string $generateTargetJointCheckBox = getUIControl("nkBdnToolWindow", "generateTargetJointCheckBox");
//   // string $generateEndJointCheckBox = getUIControl("nkBdnToolWindow", "generateEndJointCheckBox");
//   // string $dynamicsUnitEndJointOffsetField = getUIControl("nkBdnToolWindow", "dynamicsUnitEndJointOffsetField");
//   string $dynamicsUnitBranchAimVectorRadioButton = getUIControl("nkBdnToolWindow", "dynamicsUnitBranchAimVectorRadioButton");
//   string $dynamicsUnitBranchUpVectorRadioButton = getUIControl("nkBdnToolWindow", "dynamicsUnitBranchUpVectorRadioButton");
//   string $dynamicsUnitBranchInvertAimVectorCheckBox = getUIControl("nkBdnToolWindow", "dynamicsUnitBranchInvertAimVectorCheckBox");
//   // string $generateRadiusSphereCheckBox = getUIControl("nkBdnToolWindow", "generateRadiusSphereCheckBox");

//   string $bdnBaseName = getBdnBaseName();
//   // string $sourceNodes[] = csvAsNodes(qString("textFieldButtonGrp", "-tx", $controlNodeText));
//   string $sourceNodes[] = gatherNodes({"transform"}, false, true, "");
//   // int $generateTargetJoint = qInt("checkBox", "-v", $generateTargetJointCheckBox);
//   // int $generateEndJoint = qInt("checkBox", "-v", $generateEndJointCheckBox);
//   int $branchAimVectorIndex = qIndex("radioButtonGrp", "-sl", $dynamicsUnitBranchAimVectorRadioButton);
//   int $branchUpVectorIndex = qIndex("radioButtonGrp", "-sl", $dynamicsUnitBranchUpVectorRadioButton);
//   int $branchInvertAimVector = qInt("checkBox", "-v", $dynamicsUnitBranchInvertAimVectorCheckBox);
//   // float $endJointOffset[] = qFloatArray("floatFieldGrp", "-v", $dynamicsUnitEndJointOffsetField);
//   // int $generateRadiusSphere = qInt("checkBox", "-v", $generateRadiusSphereCheckBox);

//   float $branchAimVector[] = {0.0, 0.0, 0.0};
//   float $branchUpVector[] = {0.0, 0.0, 0.0};
//   $branchAimVector[$branchAimVectorIndex] = ($branchInvertAimVector) ? -1.0 : 1.0;
//   $branchUpVector[$branchUpVectorIndex] = 1.0;

//   string $targetNodes[] = generateTarget(
//     $bdnBaseName,
//     $sourceNodes,
//     // $generateTargetJoint,
//     // $generateEndJoint,
//     $branchAimVector,
//     $branchUpVector
//     // $endJointOffset,
//     // $generateRadiusSphere
//   );
//   print("  targetNodes:{\n    " + stringArrayToString($targetNodes, ",\n    ") + "\n  }\n"); // debug
//   select -r $targetNodes;
// }

// /*-
// @returns <>
// */
// proc reparentIdtButtonPressed() {
//   print("reparentIdtButtonPressed\n"); // debug
// }

// /*-
// @returns <>
// */
// proc saveColliderSetButtonPressed() {
//   print("saveColliderSetButtonPressed\n"); // debug
// }

// /*-
// @returns <>
// */
// proc loadColliderSetButtonPressed() {
//   print("loadColliderSetButtonPressed\n"); // debug
// }

// /*-
// @returns <>
// */
// proc bdnNodeTextPressed() {
//   print("bdnNodeTextPressed\n"); // debug
//   if (!isPluginLoaded()) return;

//   string $bdnNodeText = getUIControl("nkBdnToolWindow", "bdnNodeText");
//   eString("textFieldButtonGrp", "-tx", nodesAsCSV({"boneDynamicsNode"}, true, true, "", false), $bdnNodeText);
// }

// /*-
// @returns <>
// */
// proc appendColliderToBdnButtonPressed() {
//   print("appendColliderToBdnButtonPressed\n"); // debug
//   string $bdnNodeText = getUIControl("nkBdnToolWindow", "bdnNodeText");

//   appendCollider(
//     gatherColliderNodes(true),
//     csvAsNodes(qString("textFieldButtonGrp", "-tx", $bdnNodeText))
//   );
// }

// /*-
// @returns <>
// */
// proc removeColliderFromBdnButtonPressed() {
//   print("removeColliderFromBdnButtonPressed\n"); // debug
//   string $bdnNodeText = getUIControl("nkBdnToolWindow", "bdnNodeText");

//   removeCollider(
//     gatherColliderNodes(true),
//     csvAsNodes(qString("textFieldButtonGrp", "-tx", $bdnNodeText))
//   );
// }

// -----------------------------------------------------------------------------
// ウィンドウ定義
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
// proc buildEditorWindow() {
//   print("buildEditorWindow\n"); // debug
//   windowClose("nkBdnToolEditorWindow");
proc buildMainWindow() {
  print("buildMainWindow\n"); // debug
  windowClose("nkBdnToolWindow");

  // string $nkBdnToolEditorWindow = `window
  //     -mxb false
  //     -mnb false
  //     -p (getUIControl("nkBdnToolWindow", "nkBdnToolWindow"))
  //     -s true
  //     -t "Editor - nkBdnTool"
  //     "nkBdnToolEditorWindow"`;
  string $nkBdnToolWindow = `window
      // -dc "topLeft" "left"
      // -ds
      // -nde false
      -mxb false
      -mnb false
      -s true
      -t "nkBdnTool"
      "nkBdnToolWindow"`;
    string $outerForm = `formLayout "outerForm"`;
      string $menuBar = `menuBarLayout
          // -bgc 0.25 0.5 0.25
          "menuBar"`;
        string $fileMenu = `menu
            -l "File"
            "fileMenu"`;
          string $resetWindowMenuItem = `menuItem
              -l "Reset Window"
              "resetWindowMenuItem"`;
          menuItem -d true;
          // string $closeMenuItem = `menuItem
          //     -l "Close"
          //     "closeMenuItem"`;
          string $quitMenuItem = `menuItem
              -l "Quit"
              "quitMenuItem"`;
        string $viewMenu = `menu
            -l "View"
            "viewMenu"`;
          string $refreshMenuItem = `menuItem
              -l "Refresh"
              "refreshMenuItem"`;
        string $helpMenu = `menu
            -hm true
            -l "Help"
            "helpMenu"`;
          string $aboutMenuItem = `menuItem
              -l "About nkBdnTool"
              "aboutMenuItem"`;
      setParent ..;

      string $outerPane = `paneLayout
          -cn "vertical2"
          -ps 1 40 100
          -ps 2 60 100
          "outerPane"`;

        string $bdnForm = `formLayout "bdnForm"`;
          string $bdnGeneralFrame = `frameLayout -bgs true -cll false -cl false -l "General" -mh 4 -mw 8 "bdnGeneralFrame"`;
            string $bdnGeneralColumn = `columnLayout -adj true -cat "both" 0 -rs 4 "bdnGeneralColumn"`;
              string $bdnBaseNameText = `textFieldGrp
                  -adj 2
                  -cat 2 "right" -5
                  -cw2 90 10
                  -l "BDN BaseName"
                  -tx ""
                  "bdnBaseNameText"`;
              string $bdnPluginRow = `rowLayout
                  -adj 2
                  -cw2 90 10
                  -cat 1 "both" 0
                  -cat 2 "both" 0
                  -nc 2
                  "bdnPluginRow"`;
                text -al "right" -l "Plug-in";
                string $bdnPluginForm = `formLayout "bdnPluginForm"`;
                  string $bdnPluginLoadButton = `button -l "Load" "bdnPluginLoadButton"`;
                  string $bdnPluginUnloadButton = `button -l "Unload" "bdnPluginUnloadButton"`;
                setParent ..;
              setParent ..;
              string $deleteAllButton = `button -l "Delete All" "deleteAllButton"`;
            setParent ..;
          setParent ..;

          string $bdnListFrame = `frameLayout -bgs true -cll false -cl false -l "BoneDynamicsNode List" -mh 4 -mw 8 "bdnListFrame"`;
            string $bdnListPane = `paneLayout
                -cn "horizontal2"
                -ps 1 100 40
                -ps 2 100 60
                "bdnListPane"`;

              string $bdnListForm = `formLayout "bdnListForm"`;
                // string $bdnNodeLabel = `text -al "left" -l "BoneDynamicsNode" "bdnNodeLabel"`;
                string $bdnNodeList = `textScrollList -ams true -ekf false "bdnNodeList"`;
                string $selectBdnNodesButton = `button -l "Select Objects" "selectBdnNodesButton"`;
              setParent ..;

              string $bdnAttributeForm = `formLayout "bdnAttributeForm"`;
                string $bdnAttributeFrame = `frameLayout -bgs false -cll false -cl false -l "BDN Attributes" -nbg true "bdnAttributeFrame"`;
                  string $bdnAttributeScroll = `scrollLayout -cr true -pe true -vsb true -w 320 "bdnAttributeScroll"`;
                    string $bdnAttributeColumn = `columnLayout -adj true -rs 0 "bdnAttributeColumn"`;
                      string $bdnAttributeToolRow = `rowLayout -adj 2 -nc 4 "bdnAttributeToolRow"`;
                        string $bdnAttributeInitializeButton = `iconTextButton
                            -ann "Initialize"
                            -i "hsClearView.png"
                            -w 23
                            "bdnAttributeInitButton"`;
                        separator -st "none" -vis false;
                        string $bdnAttributeCopyButton = `iconTextButton
                            -ann "Copy"
                            -i "polyCopyUV.png"
                            -w 23
                            "bdnAttributeCopyButton"`;
                        string $bdnAttributePasteButton = `iconTextButton
                            -ann "Paste"
                            -i "polyPasteUV.png"
                            -w 23
                            "bdnAttributePasteButton"`;
                      setParent ..;
                      separator -h 2 -nbg false -st "none";
                      string $bdnDampingField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Damping"
                          -nf 1
                          -pre 3
                          -tze false
                          -s 1.0
                          -v1 0.1
                          "bdnDampingField"`;
                      string $bdnElasticityField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Elasticity"
                          -nf 1
                          -pre 3
                          -tze false
                          -v1 30
                          "bdnElasticityField"`;
                      string $elasticForceFunctionMenuGrp = `optionMenuGrp
                          -adj 2
                          -ct2 "both" "both"
                          -cw2 170 10
                          -l "Elastic Force Function"
                          "elasticForceFunctionMenuGrp"`;
                        string $elasticForceFunction1MenuItem = `menuItem -l "Linear" "elasticForceFunction1MenuItem"`;
                        string $elasticForceFunction2MenuItem = `menuItem -l "Quadratic" "elasticForceFunction2MenuItem"`;
                        string $elasticForceFunction3MenuItem = `menuItem -l "Cubic" "elasticForceFunction3MenuItem"`;
                      optionMenuGrp -e -sl 1 $elasticForceFunctionMenuGrp;
                      string $bdnStiffnessField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Stiffness"
                          -nf 1
                          -pre 3
                          -tze false
                          -s 1.0
                          -v1 0
                          "bdnStiffnessField"`;
                      string $bdnMassField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Mass"
                          -nf 1
                          -pre 3
                          -tze false
                          -v1 1
                          "bdnMassField"`;
                      string $bdnGravityXField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Gravity X"
                          -nf 1
                          -pre 3
                          -tze false
                          -v1 0
                          "bdnGravityXField"`;
                      string $bdnGravityYField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Gravity Y"
                          -nf 1
                          -pre 3
                          -tze false
                          -v1 -980
                          "bdnGravityYField"`;
                      string $bdnGravityZField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Gravity Z"
                          -nf 1
                          -pre 3
                          -tze false
                          -v1 0
                          "bdnGravityZField"`;
                      string $bdnGravityMultiplyField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Gravity Multiply"
                          -nf 1
                          -pre 3
                          -tze false
                          -s 1.0
                          -v1 0
                          "bdnGravityMultiplyField"`;
                      separator -h 2 -nbg false -st "none";
                      string $bdnAdditionalForceScaleField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Additional Force Scale"
                          -nf 1
                          -pre 3
                          -tze false
                          -v1 1
                          "bdnAdditionalForceScaleField"`;
                      separator -h 2 -nbg false -st "none";
                      // string $bdnEnableTurbulenceCheckBox = `checkBox
                      //     -l "Enable Turbulence"
                      //     -v false
                      //     "bdnEnableTurbulenceCheckBox"`;
                      string $bdnEnableTurbulenceCheckBox = `checkBoxGrp
                          -adj 2
                          -cw2 170 50
                          -l ""
                          -l1 "Enable Turbulence"
                          -ncb 1
                          -v1 false
                          "bdnEnableTurbulenceCheckBox"`;
                      string $bdnTurbulenceSeedField = `intFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Turbulence Seed"
                          -nf 1
                          -v1 0
                          "bdnTurbulenceSeedField"`;
                      string $bdnTurbulenceStrengthField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Turbulence Strength"
                          -nf 1
                          -pre 3
                          -tze false
                          -v1 10
                          "bdnTurbulenceStrengthField"`;
                      string $bdnTurbulenceVectorChangeScaleField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Turbulence Vector Change Scale"
                          -nf 1
                          -pre 3
                          -tze false
                          -s 0.1
                          -v1 0.05
                          "bdnTurbulenceVectorChangeScaleField"`;
                      string $bdnTurbulenceVectorChangeMaxField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Turbulence Vector Change Max"
                          -nf 1
                          -pre 3
                          -tze false
                          -s 1.0
                          -v1 0.1
                          "bdnTurbulenceVectorChangeMaxField"`;
                      separator -h 2 -nbg false -st "none";
                      // string $bdnEnableAngleLimitCheckBox = `checkBox
                      //     -l "Enable Angle Limit"
                      //     -v false
                      //     "bdnEnableAngleLimitCheckBox"`;
                      string $bdnEnableAngleLimitCheckBox = `checkBoxGrp
                          -adj 2
                          -cw2 170 50
                          -l ""
                          -l1 "Enable Angle Limit"
                          -ncb 1
                          -v1 false
                          "bdnEnableAngleLimitCheckBox"`;
                      string $bdnAngleLimitField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Angle Limit"
                          -nf 1
                          -pre 3
                          -tze false
                          -v1 60
                          "bdnAngleLimitField"`;
                      separator -h 2 -nbg false -st "none";
                      string $bdnRadiusField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Radius"
                          -nf 1
                          -pre 3
                          -tze false
                          -v1 0
                          "bdnRadiusField"`;
                      string $bdnIterationsField = `intFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Iterations"
                          -nf 1
                          // -pre 3
                          // -tze false
                          -v1 5
                          "bdnIterationsField"`;
                      // string $bdnEnableGroundColCheckBox = `checkBox
                      //     -l "Enable Ground Col"
                      //     -v false
                      //     "bdnEnableGroundColCheckBox"`;
                      string $bdnEnableGroundColCheckBox = `checkBoxGrp
                          -adj 2
                          -cw2 170 50
                          -l ""
                          -l1 "Enable Ground Col"
                          -ncb 1
                          -v1 false
                          "bdnEnableGroundColCheckBox"`;
                      string $bdnGroundHeightField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Ground Height"
                          -nf 1
                          -pre 3
                          -tze false
                          -v1 0
                          "bdnGroundHeightField"`;
                      separator -h 2 -nbg false -st "none";
                      string $bdnMeshColCutoffField = `floatFieldGrp
                          -adj 2
                          -cw2 170 50
                          -l "Mesh Col Cutoff"
                          -nf 1
                          -pre 3
                          -tze false
                          -v1 10
                          "bdnMeshColCutoffField"`;
                    setParent ..;
                  setParent ..;
                setParent ..;
              setParent ..;

            setParent ..;
          setParent ..;
        setParent ..;

        string $bdnRelatedNodeTab = `tabLayout -bs "none" -stb false -w 360 "bdnRelatedNodeTab"`;

          string $dynamicsUnitForm = `formLayout "dynamicsUnitForm"`;
            string $dynamicsUnitBuildFrame = `frameLayout -bgs true -cll false -cl false -l "Build" -mh 4 -mw 8 "dynamicsUnitBuildFrame"`;
              string $dynamicsUnitBuildColumn = `columnLayout -adj true -rs 4 "dynamicsUnitBuildColumn"`;
                string $dynamicsUnitBranchColumn = `columnLayout -adj true -rs 4 "dynamicsUnitBranchColumn"`;
                  text -al "left" -l "Branch Handling";
                  string $dynamicsUnitBranchAimVectorRadioButton = `radioButtonGrp
                      -cw4 90 50 50 50
                      -l "Aim Vector"
                      -la3 "X" "Y" "Z"
                      -nrb 3
                      -sl 1
                      "dynamicsUnitBranchAimVectorRadioButton"`;
                  string $dynamicsUnitBranchUpVectorRadioButton = `radioButtonGrp
                      -cw4 90 50 50 50
                      -l "Up Vector"
                      -la3 "X" "Y" "Z"
                      -nrb 3
                      -sl 2
                      "dynamicsUnitBranchUpVectorRadioButton"`;
                  // string $dynamicsUnitBranchInvertAimVectorCheckBox = `checkBox
                  //     -l "Invert Aim Vector"
                  //     -v false
                  //     "dynamicsUnitBranchInvertAimVectorCheckBox"`;
                  string $dynamicsUnitBranchInvertAimVectorCheckBox = `checkBoxGrp
                      -adj 2
                      -cw2 90 50
                      -l ""
                      -l1 "Invert Aim Vector"
                      -ncb 1
                      -v1 false
                      "dynamicsUnitBranchInvertAimVectorCheckBox"`;
                setParent ..;
                separator -h 2 -nbg false -st "none";
                string $dynamicsUnitEndJointOffsetField = `floatFieldGrp
                    -adj 0
                    -cw4 90 49 49 49
                    -l "End Joint Offset"
                    -nf 3
                    -pre 3
                    -tze true
                    -v1 1.0 -v2 0.0 -v3 0.0
                    "dynamicsUnitEndJointOffsetField"`;
                string $generateDynamicsUnitButton = `button -l "Generate Dynamics Unit" "generateDynamicsUnitButton"`;
              setParent ..;
            setParent ..;

            string $dynamicsUnitListFrame = `frameLayout -bgs true -cll false -cl false -l "Joint List" -mh 4 -mw 8 "dynamicsUnitListFrame"`;
              string $dynamicsUnitListForm = `formLayout "dynamicsUnitListForm"`;
              // string $proxyForm = `formLayout "proxyForm"`;
                string $proxyNodeListLabel = `text -al "left" -l "Proxy" "proxyNodeListLabel"`;
                string $proxyNodeList = `textScrollList -ams true -ekf false "proxyNodeList"`;
                string $selectProxyNodesButton = `button -l "Select Objects" "selectProxyNodesButton"`;
              // setParent ..;

              // string $targetForm = `formLayout "targetForm"`;
                string $targetNodeListLabel = `text -al "left" -l "Target" "targetNodeListLabel"`;
                string $targetNodeList = `textScrollList -ams true -ekf false "targetNodeList"`;
                string $selectTargetNodesButton = `button -l "Select Objects" "selectTargetNodesButton"`;
              // setParent ..;
              setParent ..;
            setParent ..;
          setParent ..;

          string $colliderForm = `formLayout "colliderForm"`;
            string $colliderBuildFrame = `frameLayout -bgs true -cll false -cl false -l "Build" -mh 4 -mw 8 "colliderBuildFrame"`;
              string $colliderBuildColumn = `columnLayout -adj true -rs 4 "colliderBuildColumn"`;
                string $createColliderInfinitePlaneButton = `button -l "Infinite Plane" "createColliderInfinitePlaneButton"`;
                string $createColliderSphereButton = `button -l "Sphere" "createColliderSphereButton"`;
                string $createColliderCapsuleButton = `button -l "Capsule" "createColliderCapsuleButton"`;
              setParent ..;
            setParent ..;

            string $colliderListFrame = `frameLayout -bgs true -cll false -cl false -l "Collider List" -mh 4 -mw 8 "colliderListFrame"`;
              string $colliderListPane = `paneLayout
                  -cn "horizontal2"
                  -ps 1 100 50
                  -ps 2 100 50
                  "colliderListPane"`;
                string $colliderListForm = `formLayout "colliderListForm"`;
                  string $influencedColliderNodeLabel = `text -al "left" -l "Influenced" "influencedColliderNodeLabel"`;
                  string $influencedColliderNodeList = `textScrollList -ams true -ekf false "influencedColliderNodeList"`;
                  string $removeColliderButton = `button -l "Remove >" "removeColliderButton"`;
                  string $selectInfluencedColliderNodesButton = `button -l "Select Objects" "selectInfluencedColliderNodesButton"`;

                  string $allColliderNodeLabel = `text -al "left" -l "All" "allColliderNodeLabel"`;
                  string $allColliderNodeList = `textScrollList -ams true -ekf false "allColliderNodeList"`;
                  string $appendColliderButton = `button -l "< Append" "appendColliderButton"`;
                  string $selectAllColliderNodesButton = `button -l "Select Objects" "selectAllColliderNodesButton"`;
                setParent ..;

                string $colliderAttributeForm = `formLayout "colliderAttributeForm"`;
                  string $colliderAttributeFrame = `frameLayout -bgs false -cll false -cl false -l "Collider Attributes" -nbg true "colliderAttributeFrame"`;
                    string $colliderAttributeScroll = `scrollLayout -cr true -pe true -vsb true -w 286 "colliderAttributeScroll"`;

                      string $infinitePlaneColliderFrame = `frameLayout -bgs false -cll false -cl false -l "Infinite Plane" -vis false "infinitePlaneColliderFrame"`;
                        string $infinitePlaneColliderColumn = `columnLayout -adj true -rs 0 "infinitePlaneColliderColumn"`;
                          string $infinitePlaneColliderWidthField = `floatFieldGrp
                              -adj 2
                              -cw2 180 50
                              -l "Collider Width"
                              -nf 1
                              -pre 3
                              -tze false
                              -v1 1
                              "infinitePlaneColliderWidthField"`;
                          string $infinitePlaneColliderHeightField = `floatFieldGrp
                              -adj 2
                              -cw2 180 50
                              -l "Collider Height"
                              -nf 1
                              -pre 3
                              -tze false
                              -v1 1
                              "infinitePlaneColliderHeightField"`;
                        setParent ..;
                      setParent ..;

                      string $sphereColliderFrame = `frameLayout -bgs false -cll false -cl false -l "Sphere" -vis false "sphereColliderFrame"`;
                        string $sphereColliderColumn = `columnLayout -adj true -rs 0 "sphereColliderColumn"`;
                          string $sphereColliderRadiusField = `floatFieldGrp
                              -adj 2
                              -cw2 180 50
                              -l "Collider Radius"
                              -nf 1
                              -pre 3
                              -tze false
                              -s 1.0
                              -v1 0.5
                              "sphereColliderRadiusField"`;
                        setParent ..;
                      setParent ..;

                      string $capsuleColliderFrame = `frameLayout -bgs false -cll false -cl false -l "Capsule" -vis false "capsuleColliderFrame"`;
                        string $capsuleColliderColumn = `columnLayout -adj true -rs 0 "capsuleColliderColumn"`;
                          string $capsuleColliderRadiusAField = `floatFieldGrp
                              -adj 2
                              -cw2 180 50
                              -l "Collider Radius A"
                              -nf 1
                              -pre 3
                              -tze false
                              -s 1.0
                              -v1 0.5
                              "capsuleColliderRadiusAField"`;
                          string $capsuleColliderRadiusBField = `floatFieldGrp
                              -adj 2
                              -cw2 180 50
                              -l "Collider Radius B"
                              -nf 1
                              -pre 3
                              -tze false
                              -s 1.0
                              -v1 0.5
                              "capsuleColliderRadiusBField"`;
                          string $capsuleColliderLengthField = `floatFieldGrp
                              -adj 2
                              -cw2 180 50
                              -l "Collider Length"
                              -nf 1
                              -pre 3
                              -tze false
                              -v1 2
                              "capsuleColliderLengthField"`;
                          string $capsuleColliderOffsetField = `floatFieldGrp
                              -adj 2
                              -cw2 180 50
                              -l "Collider Offset"
                              -nf 1
                              -pre 3
                              -tze false
                              -v1 0
                              "capsuleColliderOffsetField"`;
                          string $capsuleColliderPivotMenuGrp = `optionMenuGrp
                              -adj 2
                              -ct2 "both" "both"
                              -cw2 180 10
                              -l "Collider Pivot"
                              "capsuleColliderPivotMenuGrp"`;
                            string $capsuleColliderPivot1MenuItem = `menuItem -l "A" "capsuleColliderPivot1MenuItem"`;
                            string $capsuleColliderPivot2MenuItem = `menuItem -l "Center" "capsuleColliderPivot2MenuItem"`;
                            string $capsuleColliderPivot3MenuItem = `menuItem -l "B" "capsuleColliderPivot3MenuItem"`;
                          optionMenuGrp -e -sl 1 $capsuleColliderPivotMenuGrp;
                        setParent ..;
                      setParent ..;

                    setParent ..;
                  setParent ..;
                setParent ..;
              setParent ..;
            setParent ..;
          setParent ..;

          string $meshForm = `formLayout "meshForm"`;
            string $meshListFrame = `frameLayout -bgs true -cll false -cl false -l "Mesh List" -mh 4 -mw 8 "meshListFrame"`;
              string $meshListForm = `formLayout "meshListForm"`;
                // string $meshNodeLabel = `text -al "left" -l "Mesh Node" "meshNodeLabel"`;
                string $meshNodeList = `textScrollList -ams true -ekf false "meshNodeList"`;
                string $addMeshNodesButton = `button -l "Add" "addMeshNodesButton"`;
                string $removeMeshNodesButton = `button -l "Remove" "removeMeshNodesButton"`;
                string $selectMeshNodesButton = `button -l "Select Objects" "selectMeshNodesButton"`;
              setParent ..;
            setParent ..;
          setParent ..;

          string $forceForm = `formLayout "forceForm"`;
            string $forceListFrame = `frameLayout -bgs true -cll false -cl false -l "Force List" -mh 4 -mw 8 "forceListFrame"`;
              string $forceListForm = `formLayout "forceListForm"`;
                // string $forceNodeLabel = `text -al "left" -l "Force Node" "forceNodeLabel"`;
                string $forceNodeList = `textScrollList -ams true -ekf false "forceNodeList"`;
                string $addForceNodesButton = `button -l "Add" "addForceNodesButton"`;
                string $removeForceNodesButton = `button -l "Remove" "removeForceNodesButton"`;
                string $selectForceNodesButton = `button -l "Select Objects" "selectForceNodesButton"`;
              setParent ..;
            setParent ..;
          setParent ..;

          string $bakeForm = `formLayout "bakeForm"`;
            string $bakeListFrame = `frameLayout -bgs true -cll false -cl false -l "Bind List" -mh 4 -mw 8 "bakeListFrame"`;
              string $bakeListForm = `formLayout "bakeListForm"`;
                // string $bindNodeLabel = `text -al "left" -l "Bind Node" "bindNodeLabel"`;
                string $bindNodeList = `textScrollList -ams true -ekf false "bindNodeList"`;
                string $selectBindNodesButton = `button -l "Select Objects" "selectBindNodesButton"`;

                string $bakeFrame = `frameLayout -bgs false -cll false -cl false -l "Bake" -nbg true "bakeFrame"`;
                  string $bakeColumn = `columnLayout -adj true -rs 4 "bakeColumn"`;
                    string $bakeTimeRangeRadioButton = `radioButtonGrp
                        -cw3 90 78 78
                        -l "Time Range"
                        -la2 "Time Slider" "Start/End"
                        -nrb 2
                        -sl 1
                        "bakeTimeRangeRadioButton"`;
                    string $bakeStartEndField = `floatFieldGrp
                        -adj 0
                        -cw3 90 74 74
                        -l "Start/End"
                        -nf 2
                        -pre 3
                        -tze true
                        -v1 0.0 -v2 30.0
                        "bakeStartEndField"`;
                    string $bakeButton = `button
                        -l "Bake"
                        "bakeButton"`;
                  setParent ..;
                setParent ..;
              setParent ..;
            setParent ..;
          setParent ..;
        setParent ..;

      setParent ..;
    setParent ..;

  // dockControl
  //   -aa "left" -aa "right"
  //   -a "right"
  //   -content $nkBdnToolEditorWindow
  //   -ds (getUIControl("nkBdnToolWindow", "nkBdnToolWindow"))
  //   -fl false;

  tabLayout -e -tli 1 "Dynamics Unit" $bdnRelatedNodeTab;
  tabLayout -e -tli 2 "Collider" $bdnRelatedNodeTab;
  tabLayout -e -tli 3 "Mesh Col" $bdnRelatedNodeTab;
  tabLayout -e -tli 4 "Force" $bdnRelatedNodeTab;
  tabLayout -e -tli 5 "Bake" $bdnRelatedNodeTab;
  tabLayout -e -sti 1 $bdnRelatedNodeTab;

  formLayout -e
      -af $menuBar "top" 0
      -af $menuBar "left" 0
      -af $menuBar "right" 0
      -ac $outerPane "top" 0 $menuBar
      -af $outerPane "left" 4
      -af $outerPane "right" 4
      -af $outerPane "bottom" 4
      $outerForm;

  formLayout -e
      -af $bdnGeneralFrame "top" 0
      -af $bdnGeneralFrame "left" 0
      -af $bdnGeneralFrame "right" 0
      -ac $bdnListFrame "top" 2 $bdnGeneralFrame
      -af $bdnListFrame "left" 0
      -af $bdnListFrame "right" 0
      -af $bdnListFrame "bottom" 0
      $bdnForm;

  formLayout -e
      -af $bdnPluginLoadButton "top" 0
      -af $bdnPluginLoadButton "left" 0
      -ap $bdnPluginLoadButton "right" 2 50
      -af $bdnPluginUnloadButton "top" 0
      -ap $bdnPluginUnloadButton "left" 2 50
      -af $bdnPluginUnloadButton "right" 0
      $bdnPluginForm;

  formLayout -e
      // -af $bdnNodeLabel "top" 0
      // -af $bdnNodeLabel "left" 0
      // -af $bdnNodeLabel "right" 0
      -af $selectBdnNodesButton "left" 0
      -af $selectBdnNodesButton "right" 0
      -af $selectBdnNodesButton "bottom" 2
      -af $bdnNodeList "top" 0
      -af $bdnNodeList "left" 0
      -af $bdnNodeList "right" 0
      -ac $bdnNodeList "bottom" 4 $selectBdnNodesButton
      $bdnListForm;

  formLayout -e
      -af $bdnAttributeFrame "top" 2
      -af $bdnAttributeFrame "left" 0
      -af $bdnAttributeFrame "right" 0
      -af $bdnAttributeFrame "bottom" 0
      $bdnAttributeForm;

  formLayout -e
      -af $dynamicsUnitBuildFrame "top" 0
      -af $dynamicsUnitBuildFrame "left" 0
      -af $dynamicsUnitBuildFrame "right" 0
      -ac $dynamicsUnitListFrame "top" 2 $dynamicsUnitBuildFrame
      -af $dynamicsUnitListFrame "left" 0
      -af $dynamicsUnitListFrame "right" 0
      -af $dynamicsUnitListFrame "bottom" 0
      $dynamicsUnitForm;

  formLayout -e
      -af $proxyNodeListLabel "top" 0
      -af $proxyNodeListLabel "left" 0
      -ap $proxyNodeListLabel "right" 2 50
      -af $selectProxyNodesButton "left" 0
      -ap $selectProxyNodesButton "right" 2 50
      -af $selectProxyNodesButton "bottom" 0
      -ac $proxyNodeList "top" 2 $proxyNodeListLabel
      -af $proxyNodeList "left" 0
      -ap $proxyNodeList "right" 2 50
      -ac $proxyNodeList "bottom" 4 $selectProxyNodesButton

      -af $targetNodeListLabel "top" 0
      -ap $targetNodeListLabel "left" 2 50
      -af $targetNodeListLabel "right" 0
      -ap $selectTargetNodesButton "left" 2 50
      -af $selectTargetNodesButton "right" 0
      -af $selectTargetNodesButton "bottom" 0
      -ac $targetNodeList "top" 2 $targetNodeListLabel
      -ap $targetNodeList "left" 2 50
      -af $targetNodeList "right" 0
      -ac $targetNodeList "bottom" 4 $selectTargetNodesButton
      $dynamicsUnitListForm;

  formLayout -e
      -af $colliderBuildFrame "top" 0
      -af $colliderBuildFrame "left" 0
      -af $colliderBuildFrame "right" 0
      -ac $colliderListFrame "top" 2 $colliderBuildFrame
      -af $colliderListFrame "left" 0
      -af $colliderListFrame "right" 0
      -af $colliderListFrame "bottom" 0
      $colliderForm;

  formLayout -e
      -af $influencedColliderNodeLabel "top" 0
      -af $influencedColliderNodeLabel "left" 0
      -ap $influencedColliderNodeLabel "right" 2 50
      -af $removeColliderButton "left" 0
      -ap $removeColliderButton "right" 2 50
      -ac $removeColliderButton "bottom" 4 $selectInfluencedColliderNodesButton
      -af $selectInfluencedColliderNodesButton "left" 0
      -ap $selectInfluencedColliderNodesButton "right" 2 50
      -af $selectInfluencedColliderNodesButton "bottom" 2
      -ac $influencedColliderNodeList "top" 2 $influencedColliderNodeLabel
      -af $influencedColliderNodeList "left" 0
      -ap $influencedColliderNodeList "right" 2 50
      -ac $influencedColliderNodeList "bottom" 4 $removeColliderButton

      -af $allColliderNodeLabel "top" 0
      -ap $allColliderNodeLabel "left" 2 50
      -af $allColliderNodeLabel "right" 0
      -ap $appendColliderButton "left" 2 50
      -af $appendColliderButton "right" 0
      -ac $appendColliderButton "bottom" 4 $selectAllColliderNodesButton
      -ap $selectAllColliderNodesButton "left" 2 50
      -af $selectAllColliderNodesButton "right" 0
      -af $selectAllColliderNodesButton "bottom" 2
      -ac $allColliderNodeList "top" 2 $allColliderNodeLabel
      -ap $allColliderNodeList "left" 2 50
      -af $allColliderNodeList "right" 0
      -ac $allColliderNodeList "bottom" 4 $appendColliderButton
      $colliderListForm;

  formLayout -e
      -af $colliderAttributeFrame "top" 2
      -af $colliderAttributeFrame "left" 0
      -af $colliderAttributeFrame "right" 0
      -af $colliderAttributeFrame "bottom" 0
      $colliderAttributeForm;

  formLayout -e
      -af $meshListFrame "top" 0
      -af $meshListFrame "left" 0
      -af $meshListFrame "right" 0
      -af $meshListFrame "bottom" 0
      $meshForm;

  formLayout -e
      // -af $meshNodeLabel "top" 0
      // -af $meshNodeLabel "left" 0
      // -af $meshNodeLabel "right" 0
      -af $selectMeshNodesButton "left" 0
      -af $selectMeshNodesButton "right" 0
      -af $selectMeshNodesButton "bottom" 0
      -af $addMeshNodesButton "left" 0
      -ap $addMeshNodesButton "right" 2 50
      -ac $addMeshNodesButton "bottom" 4 $selectMeshNodesButton
      -ap $removeMeshNodesButton "left" 2 50
      -af $removeMeshNodesButton "right" 0
      -ac $removeMeshNodesButton "bottom" 4 $selectMeshNodesButton
      -af $meshNodeList "top" 0
      -af $meshNodeList "left" 0
      -af $meshNodeList "right" 0
      -ac $meshNodeList "bottom" 4 $addMeshNodesButton
      $meshListForm;

  formLayout -e
      -af $forceListFrame "top" 0
      -af $forceListFrame "left" 0
      -af $forceListFrame "right" 0
      -af $forceListFrame "bottom" 0
      $forceForm;

  formLayout -e
      // -af $forceNodeLabel "top" 0
      // -af $forceNodeLabel "left" 0
      // -af $forceNodeLabel "right" 0
      -af $selectForceNodesButton "left" 0
      -af $selectForceNodesButton "right" 0
      -af $selectForceNodesButton "bottom" 0
      -af $addForceNodesButton "left" 0
      -ap $addForceNodesButton "right" 2 50
      -ac $addForceNodesButton "bottom" 4 $selectForceNodesButton
      -ap $removeForceNodesButton "left" 2 50
      -af $removeForceNodesButton "right" 0
      -ac $removeForceNodesButton "bottom" 4 $selectForceNodesButton
      -af $forceNodeList "top" 0
      -af $forceNodeList "left" 0
      -af $forceNodeList "right" 0
      -ac $forceNodeList "bottom" 4 $addForceNodesButton
      $forceListForm;

  formLayout -e
      -af $bakeListFrame "top" 0
      -af $bakeListFrame "left" 0
      -af $bakeListFrame "right" 0
      -af $bakeListFrame "bottom" 0
      $bakeForm;

  formLayout -e
      -af $bakeFrame "left" 0
      -af $bakeFrame "right" 0
      -af $bakeFrame "bottom" 0

      // -af $bindNodeLabel "top" 0
      // -af $bindNodeLabel "left" 0
      // -af $bindNodeLabel "right" 0
      -af $selectBindNodesButton "left" 0
      -af $selectBindNodesButton "right" 0
      -ac $selectBindNodesButton "bottom" 4 $bakeFrame
      -af $bindNodeList "top" 0
      -af $bindNodeList "left" 0
      -af $bindNodeList "right" 0
      -ac $bindNodeList "bottom" 4 $selectBindNodesButton
      $bakeListForm;

  window -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"nkBdnToolWindow\");" $nkBdnToolWindow;
  menuItem -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"resetWindowMenuItem\");" $resetWindowMenuItem;
  // menuItem -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"closeMenuItem\");" $closeMenuItem;
  menuItem -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"quitMenuItem\");" $quitMenuItem;
  menuItem -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"refreshMenuItem\");" $refreshMenuItem;
  menuItem -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"aboutMenuItem\");" $aboutMenuItem;

  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"bdnPluginLoadButton\");" $bdnPluginLoadButton;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"bdnPluginUnloadButton\");" $bdnPluginUnloadButton;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"deleteAllButton\");" $deleteAllButton;

  textScrollList -e -dcc "nkBdnToolEventController(\"nkBdnToolWindow\", \"dcc\", \"bdnNodeList\");" $bdnNodeList;
  textScrollList -e -sc "nkBdnToolEventController(\"nkBdnToolWindow\", \"sc\", \"bdnNodeList\");" $bdnNodeList;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"selectBdnNodesButton\");" $selectBdnNodesButton;

  iconTextButton -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"bdnAttributeInitializeButton\");" $bdnAttributeInitializeButton;
  iconTextButton -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"bdnAttributeCopyButton\");" $bdnAttributeCopyButton;
  iconTextButton -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"bdnAttributePasteButton\");" $bdnAttributePasteButton;

  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnDampingField\");" $bdnDampingField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnElasticityField\");" $bdnElasticityField;
  optionMenuGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"elasticForceFunctionMenuGrp\");" $elasticForceFunctionMenuGrp;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnStiffnessField\");" $bdnStiffnessField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnMassField\");" $bdnMassField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnGravityXField\");" $bdnGravityXField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnGravityYField\");" $bdnGravityYField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnGravityZField\");" $bdnGravityZField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnGravityMultiplyField\");" $bdnGravityMultiplyField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnAdditionalForceScaleField\");" $bdnAdditionalForceScaleField;
  checkBoxGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnEnableTurbulenceCheckBox\");" $bdnEnableTurbulenceCheckBox;
  intFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnTurbulenceSeedField\");" $bdnTurbulenceSeedField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnTurbulenceStrengthField\");" $bdnTurbulenceStrengthField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnTurbulenceVectorChangeScaleField\");" $bdnTurbulenceVectorChangeScaleField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnTurbulenceVectorChangeMaxField\");" $bdnTurbulenceVectorChangeMaxField;
  checkBoxGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnEnableAngleLimitCheckBox\");" $bdnEnableAngleLimitCheckBox;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnAngleLimitField\");" $bdnAngleLimitField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnRadiusField\");" $bdnRadiusField;
  intFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnIterationsField\");" $bdnIterationsField;
  checkBoxGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnEnableGroundColCheckBox\");" $bdnEnableGroundColCheckBox;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnGroundHeightField\");" $bdnGroundHeightField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnMeshColCutoffField\");" $bdnMeshColCutoffField;

  tabLayout -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"bdnRelatedNodeTab\");" $bdnRelatedNodeTab;

  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"generateDynamicsUnitButton\");" $generateDynamicsUnitButton;

  textScrollList -e -dcc "nkBdnToolEventController(\"nkBdnToolWindow\", \"dcc\", \"proxyNodeList\");" $proxyNodeList;
  textScrollList -e -sc "nkBdnToolEventController(\"nkBdnToolWindow\", \"sc\", \"proxyNodeList\");" $proxyNodeList;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"selectProxyNodesButton\");" $selectProxyNodesButton;

  textScrollList -e -dcc "nkBdnToolEventController(\"nkBdnToolWindow\", \"dcc\", \"targetNodeList\");" $targetNodeList;
  textScrollList -e -sc "nkBdnToolEventController(\"nkBdnToolWindow\", \"sc\", \"targetNodeList\");" $targetNodeList;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"selectTargetNodesButton\");" $selectTargetNodesButton;

  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"createColliderInfinitePlaneButton\");" $createColliderInfinitePlaneButton;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"createColliderSphereButton\");" $createColliderSphereButton;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"createColliderCapsuleButton\");" $createColliderCapsuleButton;

  textScrollList -e -dcc "nkBdnToolEventController(\"nkBdnToolWindow\", \"dcc\", \"influencedColliderNodeList\");" $influencedColliderNodeList;
  textScrollList -e -sc "nkBdnToolEventController(\"nkBdnToolWindow\", \"sc\", \"influencedColliderNodeList\");" $influencedColliderNodeList;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"removeColliderButton\");" $removeColliderButton;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"selectInfluencedColliderNodesButton\");" $selectInfluencedColliderNodesButton;

  textScrollList -e -dcc "nkBdnToolEventController(\"nkBdnToolWindow\", \"dcc\", \"allColliderNodeList\");" $allColliderNodeList;
  textScrollList -e -sc "nkBdnToolEventController(\"nkBdnToolWindow\", \"sc\", \"allColliderNodeList\");" $allColliderNodeList;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"appendColliderButton\");" $appendColliderButton;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"selectAllColliderNodesButton\");" $selectAllColliderNodesButton;

  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"infinitePlaneColliderWidthField\");" $infinitePlaneColliderWidthField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"infinitePlaneColliderHeightField\");" $infinitePlaneColliderHeightField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"sphereColliderRadiusField\");" $sphereColliderRadiusField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"capsuleColliderRadiusAField\");" $capsuleColliderRadiusAField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"capsuleColliderRadiusBField\");" $capsuleColliderRadiusBField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"capsuleColliderLengthField\");" $capsuleColliderLengthField;
  floatFieldGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"capsuleColliderOffsetField\");" $capsuleColliderOffsetField;
  optionMenuGrp -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"capsuleColliderPivotMenuGrp\");" $capsuleColliderPivotMenuGrp;

  textScrollList -e -dcc "nkBdnToolEventController(\"nkBdnToolWindow\", \"dcc\", \"meshNodeList\");" $meshNodeList;
  textScrollList -e -sc "nkBdnToolEventController(\"nkBdnToolWindow\", \"sc\", \"meshNodeList\");" $meshNodeList;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"addMeshNodesButton\");" $addMeshNodesButton;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"removeMeshNodesButton\");" $removeMeshNodesButton;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"selectMeshNodesButton\");" $selectMeshNodesButton;

  textScrollList -e -dcc "nkBdnToolEventController(\"nkBdnToolWindow\", \"dcc\", \"forceNodeList\");" $forceNodeList;
  textScrollList -e -sc "nkBdnToolEventController(\"nkBdnToolWindow\", \"sc\", \"forceNodeList\");" $forceNodeList;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"addForceNodesButton\");" $addForceNodesButton;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"removeForceNodesButton\");" $removeForceNodesButton;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"selectForceNodesButton\");" $selectForceNodesButton;

  textScrollList -e -dcc "nkBdnToolEventController(\"nkBdnToolWindow\", \"dcc\", \"bindNodeList\");" $bindNodeList;
  textScrollList -e -sc "nkBdnToolEventController(\"nkBdnToolWindow\", \"sc\", \"bindNodeList\");" $bindNodeList;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"selectBindNodesButton\");" $selectBindNodesButton;
  button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"bakeButton\");" $bakeButton;

  appendUIControls({
    // $nkBdnToolEditorWindow,
    $nkBdnToolWindow,

    $bdnBaseNameText,
    $bdnNodeList,

    $bdnDampingField,
    $bdnElasticityField,
    $elasticForceFunctionMenuGrp,
    $bdnStiffnessField,
    $bdnMassField,
    $bdnGravityXField,
    $bdnGravityYField,
    $bdnGravityZField,
    $bdnGravityMultiplyField,
    $bdnAdditionalForceScaleField,
    $bdnEnableTurbulenceCheckBox,
    $bdnTurbulenceSeedField,
    $bdnTurbulenceStrengthField,
    $bdnTurbulenceVectorChangeScaleField,
    $bdnTurbulenceVectorChangeMaxField,
    $bdnEnableAngleLimitCheckBox,
    $bdnAngleLimitField,
    $bdnRadiusField,
    $bdnIterationsField,
    $bdnEnableGroundColCheckBox,
    $bdnGroundHeightField,
    $bdnMeshColCutoffField,

    $bdnRelatedNodeTab,

    $dynamicsUnitBranchAimVectorRadioButton,
    $dynamicsUnitBranchUpVectorRadioButton,
    $dynamicsUnitBranchInvertAimVectorCheckBox,
    $dynamicsUnitEndJointOffsetField,
    $proxyNodeList,
    $targetNodeList,

    $influencedColliderNodeList,
    $allColliderNodeList,

    $infinitePlaneColliderFrame,
    $infinitePlaneColliderWidthField,
    $infinitePlaneColliderHeightField,

    $sphereColliderFrame,
    $sphereColliderRadiusField,

    $capsuleColliderFrame,
    $capsuleColliderRadiusAField,
    $capsuleColliderRadiusBField,
    $capsuleColliderLengthField,
    $capsuleColliderOffsetField,
    $capsuleColliderPivotMenuGrp,

    $meshNodeList,
    $forceNodeList,

    $bindNodeList,
    $bakeTimeRangeRadioButton,
    $bakeStartEndField
  });

  updateBdnNodeList();
  // showWindow $nkBdnToolEditorWindow;
  // setFocus $nkBdnToolEditorWindow;

  // subscribeMainWindowObservers();
  showWindow $nkBdnToolWindow;
  setFocus $nkBdnToolWindow;
}

/*-
@returns <>
*/
// proc buildMainWindow() {
//   print("buildMainWindow\n"); // debug
//   windowClose("nkBdnToolWindow");

//   // if (`uiTemplate -ex "nkBdnToolTemplateNarrow"`) deleteUI -uit "nkBdnToolTemplateNarrow";
//   // if (`uiTemplate -ex "nkBdnToolTemplateFrameList"`) deleteUI -uit "nkBdnToolTemplateFrameList";
//   // if (`uiTemplate -ex "nkBdnToolTemplateSubFrame"`) deleteUI -uit "nkBdnToolTemplateSubFrame";
//   // if (`uiTemplate -ex "nkBdnToolTemplateFlat"`) deleteUI -uit "nkBdnToolTemplateFlat";
//   // uiTemplate "nkBdnToolTemplateNarrow";
//   // uiTemplate "nkBdnToolTemplateFrameList";
//   // uiTemplate "nkBdnToolTemplateSubFrame";
//   // uiTemplate "nkBdnToolTemplateFlat";
//   // columnLayout -dt "nkBdnToolTemplateNarrow" -adj true -rs 0;
//   // frameLayout -dt "nkBdnToolTemplateFrameList" -bgs true -cll true -cl true -mh 0 -mw 4;
//   // columnLayout -dt "nkBdnToolTemplateFrameList" -adj true -rs 0;
//   // frameLayout -dt "nkBdnToolTemplateSubFrame" -bgs true -cll true -cl true -mh 4 -mw 0;
//   // columnLayout -dt "nkBdnToolTemplateSubFrame" -adj true -rs 4;
//   // frameLayout -dt "nkBdnToolTemplateFlat" -bgs true -cll true -cl true -mh 4 -mw 4;
//   // columnLayout -dt "nkBdnToolTemplateFlat" -adj true -rs 4;

//   string $nkBdnToolWindow = `window
//       // -dc "topLeft" "left"
//       // -ds
//       // -nde false
//       -mxb false
//       -mnb false
//       -s false
//       -t "nkBdnTool"
//       "nkBdnToolWindow"`;
//     string $outerForm = `formLayout "outerForm"`;
//       string $menuBar = `menuBarLayout
//           // -bgc 0.25 0.5 0.25
//           "menuBar"`;
//         string $fileMenu = `menu
//             -l "File"
//             "fileMenu"`;
//           string $resetWindowMenuItem = `menuItem
//               -l "Reset Window"
//               "resetWindowMenuItem"`;
//           menuItem -d true;
//           string $quitMenuItem = `menuItem
//               -l "Quit"
//               "quitMenuItem"`;
//         string $helpMenu = `menu
//             -hm true
//             -l "Help"
//             "helpMenu"`;
//           string $aboutMenuItem = `menuItem
//               -l "About nkBdnTool"
//               "aboutMenuItem"`;
//       setParent ..;

//       string $topToolRow = `rowLayout
//           -adj 1
//           // -bgc 0.5 0.25 0.25
//           -nc 2
//           "topToolRow"`;
//         separator -st "none" -vis false;
//         string $toggleEditorWindowCheckBox = `iconTextCheckBox
//             -ann "Toggle editor window"
//             // -bgc 0.36 0.36 0.36
//             -fla true
//             -i "passSetRelationEditor.png"
//             // -l "Connection Editor"
//             -st "iconOnly"
//             -v false
//             // -w 23
//             "toggleEditorWindowCheckBox"`;
//       setParent ..;

//       // string $column = `columnLayout -adj true -rs 3 "column"`;
//       //   string $button = `button -l "Button" "button"`;
//       // setParent ..;

//       // setUITemplate -pst "nkBdnToolTemplateNarrow";
//       // setUITemplate -pst "nkBdnToolTemplateFlat";

//       // string $scroll = `scrollLayout -cr true -pe true -vsb true -w 277 "scroll"`;
//       string $innerForm = `formLayout "innerForm"`;
//         string $column = `columnLayout -adj true -rs 4 "column"`;

//           // setUITemplate -pst "nkBdnToolTemplateFlat";

//           // string $generalFrame = `frameLayout -l "General" -cl false "generalFrame"`;
//             string $generalColumn = `columnLayout -adj true -cat "both" 0 -rs 4 "generalColumn"`;
//               string $bdnBaseNameText = `textFieldGrp
//                   -adj 2
//                   // -ann "Suffix of BDN root node"
//                   -cat 2 "right" -5
//                   -cw2 90 10
//                   -l "BDN BaseName:"
//                   -tx ""
//                   "bdnBaseNameText"`;
//               // separator;
//               // string $loadPluginButton = `button
//               //     -l "Load Plug-in"
//               //     "loadPluginButton"`;
//               // string $unloadPluginButton = `button
//               //     -l "Unload Plug-in"
//               //     "unloadPluginButton"`;
//               string $bdnPluginRow = `rowLayout
//                   -adj 2
//                   // -ann "Set boneDynamicsNode.mll loading status"
//                   // -bgc 0 0 0.4
//                   -cw2 90 10
//                   -cat 1 "both" 0
//                   -cat 2 "both" 0
//                   // -cat 3 "both" 0
//                   -nc 2
//                   "bdnPluginRow"`;
//                 text -al "right" -l "Plug-in:";
//                 string $bdnPluginForm = `formLayout "bdnPluginForm"`;
//                   string $bdnPluginLoadButton = `button -l "Load" "bdnPluginLoadButton"`;
//                   string $bdnPluginUnloadButton = `button -l "Unload" "bdnPluginUnloadButton"`;
//                 setParent ..;
//               setParent ..;
//               // separator;
//               string $deleteAllButton = `button
//                   -l "Delete All"
//                   "deleteAllButton"`;
//             setParent ..;
//           // setParent ..;

//           // setUITemplate -pst "nkBdnToolTemplateFlat";

//           // string $selectFrame = `frameLayout -l "Select" -cl false "selectFrame"`;
//           //   string $selectColumn = `columnLayout "selectColumn"`;
//           //     string $selectTimeNodeButton = `button
//           //         -l "Time node"
//           //         "selectTimeNodeButton"`;
//           //     string $selectBdnNodesFromDynamicsJointsButton = `button
//           //         -l "BDN nodes from dynamics joints"
//           //         "selectBdnNodesFromDynamicsJointsButton"`;
//           //     string $selectTargetJointsFromDynamicsJointsButton = `button
//           //         -l "Target joints from dynamics joints"
//           //         "selectTargetJointsFromDynamicsJointsButton"`;
//           //   setParent ..;
//           // setParent ..;

//           // setUITemplate -pst "nkBdnToolTemplateFlat";

//           string $buildTab = `tabLayout -bs "none" -stb false "buildTab"`;

//           // string $dynamicsUnitFrame = `frameLayout -l "Dynamics Unit" -cl false "dynamicsUnitFrame"`;
//             string $dynamicsUnitColumn = `columnLayout -adj true -rs 4 "dynamicsUnitColumn"`;
//               // string $controlNodeText = `textFieldButtonGrp
//               //     -adj 2
//               //     -bl "<"
//               //     -ct3 "both" "both" "both"
//               //     -cw3 90 10 20
//               //     -l "Control Nodes:"
//               //     -tx ""
//               //     "controlNodeText"`;
//               // text -al "left" -l "Selected control nodes is the target";
//               // string $generateTargetJointCheckBox = `checkBox
//               //     -l "Generate Target Joint"
//               //     -v false
//               //     "generateTargetJointCheckBox"`;
//               // string $generateEndJointCheckBox = `checkBox
//               //     -l "Generate End Joint"
//               //     -v false
//               //     "generateEndJointCheckBox"`;
//               // string $generateModeRadioButton = `radioButtonGrp
//               //     -cw3 90 75 75
//               //     -l "Mode:"
//               //     -la2 "Hierarchy" "Selection"
//               //     -nrb 2
//               //     -sl 1
//               //     "generateModeRadioButton"`;
//               // separator;
//               string $dynamicsUnitBranchColumn = `columnLayout -adj true -rs 4 "dynamicsUnitBranchColumn"`;
//                 text -al "left" -l "Branch Handling:";
//                 string $dynamicsUnitBranchAimVectorRadioButton = `radioButtonGrp
//                     -cw4 90 50 50 50
//                     -l "Aim Vector:"
//                     -la3 "X" "Y" "Z"
//                     -nrb 3
//                     -sl 1
//                     "dynamicsUnitBranchAimVectorRadioButton"`;
//                 string $dynamicsUnitBranchUpVectorRadioButton = `radioButtonGrp
//                     -cw4 90 50 50 50
//                     -l "Up Vector:"
//                     -la3 "X" "Y" "Z"
//                     -nrb 3
//                     -sl 2
//                     "dynamicsUnitBranchUpVectorRadioButton"`;
//                 string $dynamicsUnitBranchInvertAimVectorCheckBox = `checkBox
//                     -l "Invert Aim Vector"
//                     -v false
//                     "dynamicsUnitBranchInvertAimVectorCheckBox"`;
//               setParent ..;
//               separator;
//               string $dynamicsUnitEndJointOffsetField = `floatFieldGrp
//                   -adj 0
//                   -cw4 90 49 49 49
//                   -l "End Joint Offset:"
//                   -nf 3
//                   -pre 3
//                   -tze true
//                   -v1 1.0 -v2 0.0 -v3 0.0
//                   "dynamicsUnitEndJointOffsetField"`;
//               // string $generateRadiusSphereCheckBox = `checkBox
//               //     -l "Generate Radius Sphere"
//               //     -v false
//               //     "generateRadiusSphereCheckBox"`;
//               // string $constraintTypeRadioButton = `radioButtonGrp
//               //     -cw3 90 60 60
//               //     -l "Constraint Type:"
//               //     -la2 "Parent" "Orient"
//               //     -nrb 2
//               //     -sl 1
//               //     "constraintTypeRadioButton"`;
//               string $generateDynamicsUnitButton = `button -l "Generate Dynamics Unit" "generateDynamicsUnitButton"`;
//               // string $generateTargetButton = `button -l "Generate Target" "generateTargetButton"`;
//               // separator;
//               // string $reparentIdtButton = `button -l "Reparent SPC" "reparentIdtButton"`;
//             setParent ..;
//           // setParent ..;

//           // setUITemplate -pst "nkBdnToolTemplateFlat";

//           // string $colliderFrame = `frameLayout -l "Collider" -cl false "colliderFrame"`;
//             string $colliderColumn = `columnLayout
//                 -adj true
//                 // -ann "If a transform node is selected, it will be created and constrained by the transformation of the selected node. If it is not selected, it will be created at the origin."
//                 -rs 4
//                 "colliderColumn"`;
//               string $createColliderInfinitePlaneButton = `button -l "Infinite Plane" "createColliderInfinitePlaneButton"`;
//               string $createColliderSphereButton = `button -l "Sphere" "createColliderSphereButton"`;
//               string $createColliderCapsuleButton = `button -l "Capsule" "createColliderCapsuleButton"`;
//               // separator;
//               // string $saveColliderSetButton = `button
//               //     -l "Save Collider Set"
//               //     "saveColliderSetButton"`;
//               // string $loadColliderSetButton = `button
//               //     -l "Load Collider Set"
//               //     "loadColliderSetButton"`;
//               separator;
//               string $bdnNodeText = `textFieldButtonGrp
//                   -adj 2
//                   -bl "<"
//                   -ct3 "both" "both" "both"
//                   -cw3 90 10 20
//                   -l "BDN Nodes:"
//                   -tx ""
//                   "bdnNodeText"`;
//               string $appendColliderToBdnButton = `button
//                   -l "Append Collider to BDN"
//                   "appendColliderToBdnButton"`;
//               string $removeColliderFromBdnButton = `button
//                   -l "Remove Collider from BDN"
//                   "removeColliderFromBdnButton"`;
//             setParent ..;
//           // setParent ..;

//           // setUITemplate -pst "nkBdnToolTemplateFlat";

//           // string $bakeFrame = `frameLayout -l "Bake" -cl false "bakeFrame"`;
//             string $bakeColumn = `columnLayout -adj true -rs 4 "bakeColumn"`;
//               string $bakeTimeRangeRadioButton = `radioButtonGrp
//                   -cw3 90 78 78
//                   -l "Time Range:"
//                   -la2 "Time Slider" "Start/End"
//                   -nrb 2
//                   -sl 1
//                   "bakeTimeRangeRadioButton"`;
//               string $bakeStartEndField = `floatFieldGrp
//                   -adj 0
//                   -cw3 90 74 74
//                   -l "Start/End:"
//                   -nf 2
//                   -pre 3
//                   -tze true
//                   -v1 0.0 -v2 30.0
//                   "bakeStartEndField"`;
//               string $bakeButton = `button
//                   -l "Bake Selected"
//                   "bakeButton"`;
//             setParent ..;
//           // setParent ..;

//         setParent ..;
//       setParent ..;
//     setParent ..;

//   // setUITemplate -ppt;

//   tabLayout -e -tli 1 "Dynamics Unit" $buildTab;
//   tabLayout -e -tli 2 "Collider" $buildTab;
//   tabLayout -e -tli 3 "Bake" $buildTab;

//   formLayout -e
//       -af $menuBar "top" 0
//       -af $menuBar "left" 0
//       -af $menuBar "right" 0
//       -ac $topToolRow "top" 0 $menuBar
//       -af $topToolRow "left" 5
//       -af $topToolRow "right" 5
//       // -ac $scroll "top" 0 $topToolRow
//       // -af $scroll "left" 0
//       // -af $scroll "right" 0
//       // -af $scroll "bottom" 0
//       -ac $innerForm "top" 0 $topToolRow
//       -af $innerForm "left" 0
//       -af $innerForm "right" 0
//       -af $innerForm "bottom" 0
//       $outerForm;

//   formLayout -e
//       -af $column "top" 0
//       -af $column "left" 5
//       -af $column "right" 5
//       -af $column "bottom" 0
//       $innerForm;

//   formLayout -e
//       -af $bdnPluginLoadButton "top" 0
//       -af $bdnPluginLoadButton "left" 0
//       -ap $bdnPluginLoadButton "right" 2 50
//       -af $bdnPluginUnloadButton "top" 0
//       -ap $bdnPluginUnloadButton "left" 2 50
//       -af $bdnPluginUnloadButton "right" 0
//       $bdnPluginForm;

//   window -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"nkBdnToolWindow\");" $nkBdnToolWindow;
//   menuItem -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"resetWindowMenuItem\");" $resetWindowMenuItem;
//   menuItem -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"quitMenuItem\");" $quitMenuItem;
//   menuItem -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"aboutMenuItem\");" $aboutMenuItem;

//   iconTextCheckBox -e -cc "nkBdnToolEventController(\"nkBdnToolWindow\", \"cc\", \"toggleEditorWindowCheckBox\");" $toggleEditorWindowCheckBox;

//   button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"bdnPluginLoadButton\");" $bdnPluginLoadButton;
//   button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"bdnPluginUnloadButton\");" $bdnPluginUnloadButton;
//   button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"deleteAllButton\");" $deleteAllButton;

//   // button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"selectTimeNodeButton\");" $selectTimeNodeButton;
//   // button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"selectBdnNodesFromDynamicsJointsButton\");" $selectBdnNodesFromDynamicsJointsButton;
//   // button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"selectTargetJointsFromDynamicsJointsButton\");" $selectTargetJointsFromDynamicsJointsButton;

//   // textFieldButtonGrp -e -bc "nkBdnToolEventController(\"nkBdnToolWindow\", \"bc\", \"controlNodeText\");" $controlNodeText;
//   button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"generateDynamicsUnitButton\");" $generateDynamicsUnitButton;
//   // button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"generateTargetButton\");" $generateTargetButton;
//   // button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"reparentIdtButton\");" $reparentIdtButton;

//   button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"createColliderInfinitePlaneButton\");" $createColliderInfinitePlaneButton;
//   button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"createColliderSphereButton\");" $createColliderSphereButton;
//   button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"createColliderCapsuleButton\");" $createColliderCapsuleButton;
//   // button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"saveColliderSetButton\");" $saveColliderSetButton;
//   // button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"loadColliderSetButton\");" $loadColliderSetButton;
//   textFieldButtonGrp -e -bc "nkBdnToolEventController(\"nkBdnToolWindow\", \"bc\", \"bdnNodeText\");" $bdnNodeText;
//   button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"appendColliderToBdnButton\");" $appendColliderToBdnButton;
//   button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"removeColliderFromBdnButton\");" $removeColliderFromBdnButton;

//   button -e -c "nkBdnToolEventController(\"nkBdnToolWindow\", \"c\", \"bakeButton\");" $bakeButton;

//   appendUIControls({
//     $nkBdnToolWindow,
//     $toggleEditorWindowCheckBox,
//     $bdnBaseNameText,
//     // $controlNodeText,
//     // $generateTargetJointCheckBox,
//     // $generateEndJointCheckBox,
//     $dynamicsUnitBranchAimVectorRadioButton,
//     $dynamicsUnitBranchUpVectorRadioButton,
//     $dynamicsUnitBranchInvertAimVectorCheckBox,
//     $dynamicsUnitEndJointOffsetField,
//     // $generateRadiusSphereCheckBox,
//     // $constraintTypeRadioButton,
//     $bdnNodeText,
//     $bakeTimeRangeRadioButton,
//     $bakeStartEndField
//   });

//   subscribeMainWindowObservers();
//   showWindow $nkBdnToolWindow;
//   setFocus $nkBdnToolWindow;
// }

// -----------------------------------------------------------------------------
// イベントコントローラ
// -----------------------------------------------------------------------------
/*-
@param $window <string>
@param $event <string>
@param $control <string>
@returns <>
*/
global proc nkBdnToolEventController(
  string $window,
  string $event,
  string $control
) {
  // print("nkBdnToolEventController\n"); // debug
  // print("  window :" + $window + "\n"); // debug
  // print("  event  :" + $event + "\n"); // debug
  // print("  control:" + $control + "\n"); // debug
  switch ($window) {
    // case "nkBdnToolEditorWindow":
    case "nkBdnToolWindow":
      switch ($event) {
        case "c":
          switch ($control) {
            case "resetWindowMenuItem": resetWindowMenuItemSelected(); break;
            // case "closeMenuItem": closeMenuItemSelected(); break;
            case "quitMenuItem": quitMenuItemSelected(); break;
            case "refreshMenuItem": refreshMenuItemSelected(); break;
            case "aboutMenuItem": aboutMenuItemSelected(); break;

            case "bdnPluginLoadButton": bdnPluginLoadButtonPressed(); break;
            case "bdnPluginUnloadButton": bdnPluginUnloadButtonPressed(); break;
            case "deleteAllButton": deleteAllButtonPressed(); break;

            case "selectBdnNodesButton": selectBdnNodesButtonPressed(); break;

            case "bdnAttributeInitializeButton": bdnAttributeInitializeButtonPressed(); break;
            case "bdnAttributeCopyButton": bdnAttributeCopyButtonPressed(); break;
            case "bdnAttributePasteButton": bdnAttributePasteButtonPressed(); break;

            case "generateDynamicsUnitButton": generateDynamicsUnitButtonPressed(); break;

            case "selectProxyNodesButton": selectProxyNodesButtonPressed(); break;
            case "selectTargetNodesButton": selectTargetNodesButtonPressed(); break;

            case "createColliderInfinitePlaneButton": createColliderInfinitePlaneButtonPressed(); break;
            case "createColliderSphereButton": createColliderSphereButtonPressed(); break;
            case "createColliderCapsuleButton": createColliderCapsuleButtonPressed(); break;

            case "removeColliderButton": removeColliderButtonPressed(); break;
            case "selectInfluencedColliderNodesButton": selectInfluencedColliderNodesButtonPressed(); break;
            case "appendColliderButton": appendColliderButtonPressed(); break;
            case "selectAllColliderNodesButton": selectAllColliderNodesButtonPressed(); break;

            case "addMeshNodesButton": addMeshNodesButtonPressed(); break;
            case "removeMeshNodesButton": removeMeshNodesButtonPressed(); break;
            case "selectMeshNodesButton": selectMeshNodesButtonPressed(); break;

            case "addForceNodesButton": addForceNodesButtonPressed(); break;
            case "removeForceNodesButton": removeForceNodesButtonPressed(); break;
            case "selectForceNodesButton": selectForceNodesButtonPressed(); break;

            case "selectBindNodesButton": selectBindNodesButtonPressed(); break;
            case "bakeButton": bakeButtonPressed(); break;
          }
          break;
        case "cc":
          switch ($control) {
            // case "nkBdnToolEditorWindow": nkBdnToolEditorWindowClosed(); break;
            case "nkBdnToolWindow": nkBdnToolWindowClosed(); break;
            case "bdnRelatedNodeTab": bdnRelatedNodeTabChanged(); break;

            case "bdnDampingField": bdnDampingFieldChanged(); break;
            case "bdnElasticityField": bdnElasticityFieldChanged(); break;
            case "elasticForceFunctionMenuGrp": elasticForceFunctionMenuGrpChanged(); break;
            case "bdnStiffnessField": bdnStiffnessFieldChanged(); break;
            case "bdnMassField": bdnMassFieldChanged(); break;
            case "bdnGravityXField": bdnGravityXFieldChanged(); break;
            case "bdnGravityYField": bdnGravityYFieldChanged(); break;
            case "bdnGravityZField": bdnGravityZFieldChanged(); break;
            case "bdnGravityMultiplyField": bdnGravityMultiplyFieldChanged(); break;
            case "bdnAdditionalForceScaleField": bdnAdditionalForceScaleFieldChanged(); break;
            case "bdnEnableTurbulenceCheckBox": bdnEnableTurbulenceCheckBoxChanged(); break;
            case "bdnTurbulenceSeedField": bdnTurbulenceSeedFieldChanged(); break;
            case "bdnTurbulenceStrengthField": bdnTurbulenceStrengthFieldChanged(); break;
            case "bdnTurbulenceVectorChangeScaleField": bdnTurbulenceVectorChangeScaleFieldChanged(); break;
            case "bdnTurbulenceVectorChangeMaxField": bdnTurbulenceVectorChangeMaxFieldChanged(); break;
            case "bdnEnableAngleLimitCheckBox": bdnEnableAngleLimitCheckBoxChanged(); break;
            case "bdnAngleLimitField": bdnAngleLimitFieldChanged(); break;
            case "bdnRadiusField": bdnRadiusFieldChanged(); break;
            case "bdnIterationsField": bdnIterationsFieldChanged(); break;
            case "bdnEnableGroundColCheckBox": bdnEnableGroundColCheckBoxChanged(); break;
            case "bdnGroundHeightField": bdnGroundHeightFieldChanged(); break;
            case "bdnMeshColCutoffField": bdnMeshColCutoffFieldChanged(); break;

            case "infinitePlaneColliderWidthField": infinitePlaneColliderWidthFieldChanged(); break;
            case "infinitePlaneColliderHeightField": infinitePlaneColliderHeightFieldChanged(); break;
            case "sphereColliderRadiusField": sphereColliderRadiusFieldChanged(); break;
            case "capsuleColliderRadiusAField": capsuleColliderRadiusAFieldChanged(); break;
            case "capsuleColliderRadiusBField": capsuleColliderRadiusBFieldChanged(); break;
            case "capsuleColliderLengthField": capsuleColliderLengthFieldChanged(); break;
            case "capsuleColliderOffsetField": capsuleColliderOffsetFieldChanged(); break;
            case "capsuleColliderPivotMenuGrp": capsuleColliderPivotMenuGrpChanged(); break;
            default: break;
          }
          break;
        case "dcc":
          switch ($control) {
            case "bdnNodeList": bdnNodeListDoubleClicked(); break;
            case "proxyNodeList": proxyNodeListDoubleClicked(); break;
            case "targetNodeList": targetNodeListDoubleClicked(); break;
            case "influencedColliderNodeList": influencedColliderNodeListDoubleClicked(); break;
            case "allColliderNodeList": allColliderNodeListDoubleClicked(); break;
            case "meshNodeList": meshNodeListDoubleClicked(); break;
            case "forceNodeList": forceNodeListDoubleClicked(); break;
            case "bindNodeList": bindNodeListDoubleClicked(); break;
            default: break;
          }
          break;
        case "sc":
          switch ($control) {
            case "bdnNodeList": bdnNodeListSelected(); break;
            case "proxyNodeList": proxyNodeListSelected(); break;
            case "targetNodeList": targetNodeListSelected(); break;
            case "influencedColliderNodeList": influencedColliderNodeListSelected(); break;
            case "allColliderNodeList": allColliderNodeListSelected(); break;
            case "meshNodeList": meshNodeListSelected(); break;
            case "forceNodeList": forceNodeListSelected(); break;
            case "bindNodeList": bindNodeListSelected(); break;
            default: break;
          }
          break;
        default: break;
      }
      break;
    // case "nkBdnToolWindow":
    //   switch ($event) {
    //     case "bc":
    //       switch ($control) {
    //         // case "controlNodeText": controlNodeTextPressed(); break;
    //         case "bdnNodeText": bdnNodeTextPressed(); break;
    //         default: break;
    //       }
    //       break;
    //     case "c":
    //       switch ($control) {
    //         case "resetWindowMenuItem": resetWindowMenuItemSelected(); break;
    //         case "quitMenuItem": quitMenuItemSelected(); break;
    //         case "aboutMenuItem": aboutMenuItemSelected(); break;

    //         case "bdnPluginLoadButton": bdnPluginLoadButtonPressed(); break;
    //         case "bdnPluginUnloadButton": bdnPluginUnloadButtonPressed(); break;
    //         case "deleteAllButton": deleteAllButtonPressed(); break;

    //         // case "selectTimeNodeButton": selectTimeNodeButtonPressed(); break;
    //         // case "selectBdnNodesFromDynamicsJointsButton": selectBdnNodesFromDynamicsJointsButtonPressed(); break;
    //         // case "selectTargetJointsFromDynamicsJointsButton": selectTargetJointsFromDynamicsJointsButtonPressed(); break;

    //         case "generateDynamicsUnitButton": generateDynamicsUnitButtonPressed(); break;
    //         // case "generateTargetButton": generateTargetButtonPressed(); break;
    //         // case "reparentIdtButton": reparentIdtButtonPressed(); break;

    //         case "createColliderInfinitePlaneButton": createColliderInfinitePlaneButtonPressed(); break;
    //         case "createColliderSphereButton": createColliderSphereButtonPressed(); break;
    //         case "createColliderCapsuleButton": createColliderCapsuleButtonPressed(); break;
    //         // case "saveColliderSetButton": saveColliderSetButtonPressed(); break;
    //         // case "loadColliderSetButton": loadColliderSetButtonPressed(); break;
    //         case "appendColliderToBdnButton": appendColliderToBdnButtonPressed(); break;
    //         case "removeColliderFromBdnButton": removeColliderFromBdnButtonPressed(); break;

    //         case "bakeButton": bakeButtonPressed(); break;
    //         default: break;
    //       }
    //       break;
    //     case "cc":
    //       switch ($control) {
    //         case "nkBdnToolWindow": nkBdnToolWindowClosed(); break;
    //         case "toggleEditorWindowCheckBox": toggleEditorWindowCheckBoxChanged(); break;
    //         default: break;
    //       }
    //       break;
    //     default: break;
    //   }
    //   break;
    default: break;
  }
}

// /////////////////////////////////////////////////////////////////////////////
// オブザーバ
// /////////////////////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------------
// ドメインオブザーバ
// -----------------------------------------------------------------------------
// /*-
// @param $state <boolean>
// @returns <>
// */
// global proc nkBdnToolEditorWindowVisibilityChanged(string $state) {
//   print("nkBdnToolEditorWindowVisibilityChanged\n"); // debug
//   print("  state:" + $state + "\n"); // debug
//   if ($state) {
//     initializeEditorParameters();
//     buildEditorWindow();
//   }
//   else {
//     closeEditorWindow();
//   }
//   updateToggleEditorWindowCheckBox($state);
// }

// -----------------------------------------------------------------------------
// イベントオブザーバ
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// ノードオブザーバ
// -----------------------------------------------------------------------------

// /////////////////////////////////////////////////////////////////////////////
// メイン
// /////////////////////////////////////////////////////////////////////////////
/*-
@returns <string>
*/
global proc string nkBdnToolVersion() {
  return "0.3.0";
}

/*-
@returns <>
*/
global proc nkBdnTool() {
  buildMainWindow();
  // registerEventJob();
}

// initializeEditorWindowParameters();

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/dev/nkBdnTool/nkBdnTool.mel\"");
nkBdnTool;
*/

// /////////////////////////////////////////////////////////////////////////////
// テスト
// /////////////////////////////////////////////////////////////////////////////
/*-
@returns <>
@remarks プラグイン。
*/
proc test0() {
  print("test0 start\n");
  string $r;

  // isPluginLoaded / loadBdnPlugin / unloadBdnPlugin
  {
    testNewScene();
    unloadPlugin -f "boneDynamicsNode";

    $r = assertFalse(isPluginLoaded()); if (`size $r`) warning $r;
    loadBdnPlugin();
    $r = assertTrue(isPluginLoaded()); if (`size $r`) warning $r;
    unloadBdnPlugin();
    $r = assertFalse(isPluginLoaded()); if (`size $r`) warning $r;
  }

  print("test0 end\n");
}

/*-
@returns <>
@remarks アトリビュート。
*/
proc test1() {
  print("test1 start\n");
  string $r;
  string $n;

  // appendColliderAffectedBy
  {
    testNewScene();

    string $s1 = longNameOf(`createNode -ss "transform"`);
    string $s2 = longNameOf(`createNode -ss "transform"`);
    string $dest = longNameOf(`createNode -ss "transform"`);

    $r = assertFalse(existsAttribute($dest, "colliderAffectedBy")); if (`size $r`) warning $r;
    appendColliderAffectedBy({$s1, $s2}, $dest);
    $r = assertTrue(existsAttribute($dest, "colliderAffectedBy")); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$s1, $s2}, getSourceConnections($dest, {"colliderAffectedBy"}, "", {}, {})); if (`size $r`) warning $r;

    if (`objExists $s1`) delete $s1;
    if (`objExists $s2`) delete $s2;
    if (`objExists $dest`) delete $dest;
  }

  // unlockTransformAttributes
  {
    testNewScene();

    $n = longNameOf(`createNode -ss "transform"`);

    $r = assertTrue(unlockTransformAttributes($n)); if (`size $r`) warning $r;
    $r = assertFalse(`getAttr -l ($n + ".tx")`); if (`size $r`) warning $r;
    $r = assertFalse(`getAttr -l ($n + ".ty")`); if (`size $r`) warning $r;
    $r = assertFalse(`getAttr -l ($n + ".tz")`); if (`size $r`) warning $r;
    $r = assertFalse(`getAttr -l ($n + ".rx")`); if (`size $r`) warning $r;
    $r = assertFalse(`getAttr -l ($n + ".ry")`); if (`size $r`) warning $r;
    $r = assertFalse(`getAttr -l ($n + ".rz")`); if (`size $r`) warning $r;

    batchSetAttributeLock({$n}, {"tx", "ty", "tz", "rx", "ry", "rz"}, true);
    $r = assertTrue(`getAttr -l ($n + ".tx")`); if (`size $r`) warning $r;
    $r = assertTrue(`getAttr -l ($n + ".ty")`); if (`size $r`) warning $r;
    $r = assertTrue(`getAttr -l ($n + ".tz")`); if (`size $r`) warning $r;
    $r = assertTrue(`getAttr -l ($n + ".rx")`); if (`size $r`) warning $r;
    $r = assertTrue(`getAttr -l ($n + ".ry")`); if (`size $r`) warning $r;
    $r = assertTrue(`getAttr -l ($n + ".rz")`); if (`size $r`) warning $r;

    $r = assertTrue(unlockTransformAttributes($n)); if (`size $r`) warning $r;
    $r = assertFalse(`getAttr -l ($n + ".tx")`); if (`size $r`) warning $r;
    $r = assertFalse(`getAttr -l ($n + ".ty")`); if (`size $r`) warning $r;
    $r = assertFalse(`getAttr -l ($n + ".tz")`); if (`size $r`) warning $r;
    $r = assertFalse(`getAttr -l ($n + ".rx")`); if (`size $r`) warning $r;
    $r = assertFalse(`getAttr -l ($n + ".ry")`); if (`size $r`) warning $r;
    $r = assertFalse(`getAttr -l ($n + ".rz")`); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  // bdnAttributesToDict
  {
    testNewScene();

    loadBdnPlugin();

    $n = longNameOf(`createNode -ss "transform"`);
    string $bdn = longNameOf(`createNode -ss "boneDynamicsNode"`);
    string $defaultDict = "damping=0.1;elasticity=30.0;elasticForceFunction=0;stiffness=0.0;mass=1.0;gravityX=0.0;gravityY=-980.0;gravityZ=0.0;gravityMultiply=0.0;additionalForceScale=1.0;enableTurbulence=false;turbulenceSeed=0;turbulenceStrength=10.0;turbulenceVectorChangeScale=0.05;turbulenceVectorChangeMax=0.1;enableAngleLimit=false;angleLimit=60.0;radius=0.0;iterations=5;enableGroundCol=false;groundHeight=0.0;meshColCutoff=10.0;";

    $r = assertStringEqual("", bdnAttributesToDict($n)); if (`size $r`) warning $r;
    $r = assertStringEqual($defaultDict, bdnAttributesToDict($bdn)); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
    if (`objExists $bdn`) delete $bdn;
  }

  // bdnAttributesToDict
  {
    testNewScene();

    loadBdnPlugin();

    string $bdn = longNameOf(`createNode -ss "boneDynamicsNode"`);
    string $defaultDict = "damping=0.1;elasticity=30.0;elasticForceFunction=0;stiffness=0.0;mass=1.0;gravityX=0.0;gravityY=-980.0;gravityZ=0.0;gravityMultiply=0.0;additionalForceScale=1.0;enableTurbulence=false;turbulenceSeed=0;turbulenceStrength=10.0;turbulenceVectorChangeScale=0.05;turbulenceVectorChangeMax=0.1;enableAngleLimit=false;angleLimit=60.0;radius=0.0;iterations=5;enableGroundCol=false;groundHeight=0.0;meshColCutoff=10.0;";

    setAttr ($bdn + ".damping") 0.9;
    setAttr ($bdn + ".elasticity") 45.0;
    setAttr ($bdn + ".elasticForceFunction") 2;
    setAttr ($bdn + ".stiffness") 0.3;
    setAttr ($bdn + ".mass") 1.5;
    setAttr ($bdn + ".gravityX") 10.0;
    setAttr ($bdn + ".gravityY") -780.0;
    setAttr ($bdn + ".gravityZ") 30.0;
    setAttr ($bdn + ".gravityMultiply") 0.2;
    setAttr ($bdn + ".additionalForceScale") 1.2;
    setAttr ($bdn + ".enableTurbulence") true;
    setAttr ($bdn + ".turbulenceSeed") 123;
    setAttr ($bdn + ".turbulenceStrength") 35.7;
    setAttr ($bdn + ".turbulenceVectorChangeScale") 1.25;
    setAttr ($bdn + ".turbulenceVectorChangeMax") 3.3;
    setAttr ($bdn + ".enableAngleLimit") true;
    setAttr ($bdn + ".angleLimit") 120.4;
    setAttr ($bdn + ".radius") 4.5;
    setAttr ($bdn + ".iterations") 3;
    setAttr ($bdn + ".enableGroundCol") true;
    setAttr ($bdn + ".groundHeight") 25.3;
    setAttr ($bdn + ".meshColCutoff") 12.8;
    $r = assertFloatEqual(0.9, `getAttr ($bdn + ".damping")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(45.0, `getAttr ($bdn + ".elasticity")`, 0.001); if (`size $r`) warning $r;;
    $r = assertIntEqual(2, `getAttr ($bdn + ".elasticForceFunction")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.3, `getAttr ($bdn + ".stiffness")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(1.5, `getAttr ($bdn + ".mass")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(10.0, `getAttr ($bdn + ".gravityX")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(-780.0, `getAttr ($bdn + ".gravityY")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(30.0, `getAttr ($bdn + ".gravityZ")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.2, `getAttr ($bdn + ".gravityMultiply")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(1.2, `getAttr ($bdn + ".additionalForceScale")`, 0.001); if (`size $r`) warning $r;;
    $r = assertTrue(`getAttr ($bdn + ".enableTurbulence")`); if (`size $r`) warning $r;;
    $r = assertIntEqual(123, `getAttr ($bdn + ".turbulenceSeed")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(35.7, `getAttr ($bdn + ".turbulenceStrength")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(1.25, `getAttr ($bdn + ".turbulenceVectorChangeScale")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(3.3, `getAttr ($bdn + ".turbulenceVectorChangeMax")`, 0.001); if (`size $r`) warning $r;;
    $r = assertTrue(`getAttr ($bdn + ".enableAngleLimit")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(120.4, `getAttr ($bdn + ".angleLimit")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(4.5, `getAttr ($bdn + ".radius")`, 0.001); if (`size $r`) warning $r;;
    $r = assertIntEqual(3, `getAttr ($bdn + ".iterations")`); if (`size $r`) warning $r;;
    $r = assertTrue(`getAttr ($bdn + ".enableGroundCol")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(25.3, `getAttr ($bdn + ".groundHeight")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(12.8, `getAttr ($bdn + ".meshColCutoff")`, 0.001); if (`size $r`) warning $r;;

    applyDictToBdnAttributes($defaultDict, {$bdn});
    $r = assertFloatEqual(0.1, `getAttr ($bdn + ".damping")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(30.0, `getAttr ($bdn + ".elasticity")`, 0.001); if (`size $r`) warning $r;;
    $r = assertIntEqual(0, `getAttr ($bdn + ".elasticForceFunction")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.0, `getAttr ($bdn + ".stiffness")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(1.0, `getAttr ($bdn + ".mass")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.0, `getAttr ($bdn + ".gravityX")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(-980.0, `getAttr ($bdn + ".gravityY")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.0, `getAttr ($bdn + ".gravityZ")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.0, `getAttr ($bdn + ".gravityMultiply")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(1.0, `getAttr ($bdn + ".additionalForceScale")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFalse(`getAttr ($bdn + ".enableTurbulence")`); if (`size $r`) warning $r;;
    $r = assertIntEqual(0, `getAttr ($bdn + ".turbulenceSeed")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(10.0, `getAttr ($bdn + ".turbulenceStrength")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.05, `getAttr ($bdn + ".turbulenceVectorChangeScale")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.1, `getAttr ($bdn + ".turbulenceVectorChangeMax")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFalse(`getAttr ($bdn + ".enableAngleLimit")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(60.0, `getAttr ($bdn + ".angleLimit")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.0, `getAttr ($bdn + ".radius")`, 0.001); if (`size $r`) warning $r;;
    $r = assertIntEqual(5, `getAttr ($bdn + ".iterations")`); if (`size $r`) warning $r;;
    $r = assertFalse(`getAttr ($bdn + ".enableGroundCol")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.0, `getAttr ($bdn + ".groundHeight")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(10.0, `getAttr ($bdn + ".meshColCutoff")`, 0.001); if (`size $r`) warning $r;;

    if (`objExists $bdn`) delete $bdn;
  }

  // bdnAttributesToDict
  {
    testNewScene();

    loadBdnPlugin();

    string $bdn = longNameOf(`createNode -ss "boneDynamicsNode"`);

    setAttr ($bdn + ".damping") 0.9;
    setAttr ($bdn + ".elasticity") 45.0;
    setAttr ($bdn + ".elasticForceFunction") 2;
    setAttr ($bdn + ".stiffness") 0.3;
    setAttr ($bdn + ".mass") 1.5;
    setAttr ($bdn + ".gravityX") 10.0;
    setAttr ($bdn + ".gravityY") -780.0;
    setAttr ($bdn + ".gravityZ") 30.0;
    setAttr ($bdn + ".gravityMultiply") 0.2;
    setAttr ($bdn + ".additionalForceScale") 1.2;
    setAttr ($bdn + ".enableTurbulence") true;
    setAttr ($bdn + ".turbulenceSeed") 123;
    setAttr ($bdn + ".turbulenceStrength") 35.7;
    setAttr ($bdn + ".turbulenceVectorChangeScale") 1.25;
    setAttr ($bdn + ".turbulenceVectorChangeMax") 3.3;
    setAttr ($bdn + ".enableAngleLimit") true;
    setAttr ($bdn + ".angleLimit") 120.4;
    setAttr ($bdn + ".radius") 4.5;
    setAttr ($bdn + ".iterations") 3;
    setAttr ($bdn + ".enableGroundCol") true;
    setAttr ($bdn + ".groundHeight") 25.3;
    setAttr ($bdn + ".meshColCutoff") 12.8;
    $r = assertFloatEqual(0.9, `getAttr ($bdn + ".damping")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(45.0, `getAttr ($bdn + ".elasticity")`, 0.001); if (`size $r`) warning $r;;
    $r = assertIntEqual(2, `getAttr ($bdn + ".elasticForceFunction")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.3, `getAttr ($bdn + ".stiffness")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(1.5, `getAttr ($bdn + ".mass")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(10.0, `getAttr ($bdn + ".gravityX")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(-780.0, `getAttr ($bdn + ".gravityY")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(30.0, `getAttr ($bdn + ".gravityZ")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.2, `getAttr ($bdn + ".gravityMultiply")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(1.2, `getAttr ($bdn + ".additionalForceScale")`, 0.001); if (`size $r`) warning $r;;
    $r = assertTrue(`getAttr ($bdn + ".enableTurbulence")`); if (`size $r`) warning $r;;
    $r = assertIntEqual(123, `getAttr ($bdn + ".turbulenceSeed")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(35.7, `getAttr ($bdn + ".turbulenceStrength")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(1.25, `getAttr ($bdn + ".turbulenceVectorChangeScale")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(3.3, `getAttr ($bdn + ".turbulenceVectorChangeMax")`, 0.001); if (`size $r`) warning $r;;
    $r = assertTrue(`getAttr ($bdn + ".enableAngleLimit")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(120.4, `getAttr ($bdn + ".angleLimit")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(4.5, `getAttr ($bdn + ".radius")`, 0.001); if (`size $r`) warning $r;;
    $r = assertIntEqual(3, `getAttr ($bdn + ".iterations")`); if (`size $r`) warning $r;;
    $r = assertTrue(`getAttr ($bdn + ".enableGroundCol")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(25.3, `getAttr ($bdn + ".groundHeight")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(12.8, `getAttr ($bdn + ".meshColCutoff")`, 0.001); if (`size $r`) warning $r;;

    initializeBdnAttributes({$bdn});
    $r = assertFloatEqual(0.1, `getAttr ($bdn + ".damping")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(30.0, `getAttr ($bdn + ".elasticity")`, 0.001); if (`size $r`) warning $r;;
    $r = assertIntEqual(0, `getAttr ($bdn + ".elasticForceFunction")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.0, `getAttr ($bdn + ".stiffness")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(1.0, `getAttr ($bdn + ".mass")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.0, `getAttr ($bdn + ".gravityX")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(-980.0, `getAttr ($bdn + ".gravityY")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.0, `getAttr ($bdn + ".gravityZ")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.0, `getAttr ($bdn + ".gravityMultiply")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(1.0, `getAttr ($bdn + ".additionalForceScale")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFalse(`getAttr ($bdn + ".enableTurbulence")`); if (`size $r`) warning $r;;
    $r = assertIntEqual(0, `getAttr ($bdn + ".turbulenceSeed")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(10.0, `getAttr ($bdn + ".turbulenceStrength")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.05, `getAttr ($bdn + ".turbulenceVectorChangeScale")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.1, `getAttr ($bdn + ".turbulenceVectorChangeMax")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFalse(`getAttr ($bdn + ".enableAngleLimit")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(60.0, `getAttr ($bdn + ".angleLimit")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.0, `getAttr ($bdn + ".radius")`, 0.001); if (`size $r`) warning $r;;
    $r = assertIntEqual(5, `getAttr ($bdn + ".iterations")`); if (`size $r`) warning $r;;
    $r = assertFalse(`getAttr ($bdn + ".enableGroundCol")`); if (`size $r`) warning $r;;
    $r = assertFloatEqual(0.0, `getAttr ($bdn + ".groundHeight")`, 0.001); if (`size $r`) warning $r;;
    $r = assertFloatEqual(10.0, `getAttr ($bdn + ".meshColCutoff")`, 0.001); if (`size $r`) warning $r;;

    if (`objExists $bdn`) delete $bdn;
  }

  print("test1 end\n");
}

/*-
@returns <>
@remarks ノード。
*/
proc test2() {
  print("test2 start\n");
  string $r;
  string $n;

  // getTimeNode
  {
    testNewScene();

    string $t = getTimeNode();
    $r = assertStringEqual("time1", $t); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $t`); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  print("test2 end\n");
}

/*-
@returns <>
@remarks BDNノード。
*/
proc test3() {
  print("test3 start\n");
  string $r;
  string $n;

  // initBDNNode
  {
    testNewScene();

    $n = longNameOf(`createNode -ss "transform"`);

    $r = assertStringEqual($n, initBDNNode($n)); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $n`); if (`size $r`) warning $r;
    $r = assertStringEqual("type=\"bdn\";", getDictValue($n, "bdnData")); if (`size $r`) warning $r;
    $r = assertTrue(`getAttr -l ($n + ".bdnData")`); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  // initGroupNode
  {
    testNewScene();

    $n = longNameOf(`createNode -ss "transform"`);

    $r = assertStringEqual($n, initGroupNode($n, "x")); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $n`); if (`size $r`) warning $r;
    $r = assertStringEqual("type=\"xGroup\";", getDictValue($n, "bdnData")); if (`size $r`) warning $r;
    $r = assertTrue(`getAttr -l ($n + ".bdnData")`); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  // initSpaceNode
  {
    testNewScene();

    $n = longNameOf(`createNode -ss "transform"`);

    $r = assertStringEqual($n, initSpaceNode($n, "x")); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $n`); if (`size $r`) warning $r;
    $r = assertStringEqual("type=\"space\";spaceType=\"x\";", getDictValue($n, "bdnData")); if (`size $r`) warning $r;
    $r = assertTrue(`getAttr -l ($n + ".bdnData")`); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  // initJointNode
  {
    testNewScene();

    $n = longNameOf(`createNode -ss "transform"`);

    $r = assertStringEqual($n, initJointNode($n, "x", "y")); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $n`); if (`size $r`) warning $r;
    $r = assertStringEqual("type=\"joint\";jointKind=\"x\";jointType=\"y\";", getDictValue($n, "bdnData")); if (`size $r`) warning $r;
    $r = assertTrue(`getAttr -l ($n + ".bdnData")`); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  // initRadiusNode
  {
    testNewScene();

    $n = longNameOf(`createNode -ss "transform"`);

    $r = assertStringEqual($n, initRadiusNode($n)); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $n`); if (`size $r`) warning $r;
    $r = assertStringEqual("type=\"radius\";", getDictValue($n, "bdnData")); if (`size $r`) warning $r;
    $r = assertTrue(`getAttr -l ($n + ".bdnData")`); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  // initColliderNode
  {
    testNewScene();

    $n = longNameOf(`createNode -ss "transform"`);

    $r = assertStringEqual($n, initColliderNode($n, "x")); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $n`); if (`size $r`) warning $r;
    $r = assertStringEqual("type=\"collider\";colliderType=\"x\";", getDictValue($n, "bdnData")); if (`size $r`) warning $r;
    $r = assertTrue(`getAttr -l ($n + ".bdnData")`); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  // initColliderComponentNode
  {
    testNewScene();

    $n = longNameOf(`createNode -ss "transform"`);

    $r = assertStringEqual($n, initColliderComponentNode($n)); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $n`); if (`size $r`) warning $r;
    $r = assertStringEqual("type=\"colliderComponent\";", getDictValue($n, "bdnData")); if (`size $r`) warning $r;
    $r = assertTrue(`getAttr -l ($n + ".bdnData")`); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  // getBdnType / isBdnType
  {
    testNewScene();

    $n = longNameOf(`createNode -ss "transform"`);

    initBDNNode($n);
    $r = assertStringEqual("bdn", getBdnType($n)); if (`size $r`) warning $r;
    $r = assertTrue(isBdnType($n, "bdn")); if (`size $r`) warning $r;
    initGroupNode($n, "x");
    $r = assertStringEqual("xGroup", getBdnType($n)); if (`size $r`) warning $r;
    $r = assertTrue(isBdnType($n, "xGroup")); if (`size $r`) warning $r;
    initSpaceNode($n, "x");
    $r = assertStringEqual("space", getBdnType($n)); if (`size $r`) warning $r;
    $r = assertTrue(isBdnType($n, "space")); if (`size $r`) warning $r;
    initJointNode($n, "x", "y");
    $r = assertStringEqual("joint", getBdnType($n)); if (`size $r`) warning $r;
    $r = assertTrue(isBdnType($n, "joint")); if (`size $r`) warning $r;
    initRadiusNode($n);
    $r = assertStringEqual("radius", getBdnType($n)); if (`size $r`) warning $r;
    $r = assertTrue(isBdnType($n, "radius")); if (`size $r`) warning $r;
    initColliderNode($n, "x");
    $r = assertStringEqual("collider", getBdnType($n)); if (`size $r`) warning $r;
    $r = assertTrue(isBdnType($n, "collider")); if (`size $r`) warning $r;
    initColliderComponentNode($n);
    $r = assertStringEqual("colliderComponent", getBdnType($n)); if (`size $r`) warning $r;
    $r = assertTrue(isBdnType($n, "colliderComponent")); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  // getSpaceType / isSpaceType
  {
    testNewScene();

    $n = longNameOf(`createNode -ss "transform"`);

    initBDNNode($n);
    $r = assertStringEqual("", getSpaceType($n)); if (`size $r`) warning $r;
    $r = assertFalse(isSpaceType($n, "x")); if (`size $r`) warning $r;
    initGroupNode($n, "x");
    $r = assertStringEqual("", getSpaceType($n)); if (`size $r`) warning $r;
    $r = assertFalse(isSpaceType($n, "x")); if (`size $r`) warning $r;
    initSpaceNode($n, "x");
    $r = assertStringEqual("x", getSpaceType($n)); if (`size $r`) warning $r;
    $r = assertTrue(isSpaceType($n, "x")); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  // getJointKind / isJointKind / getJointType / isJointType
  {
    testNewScene();

    $n = longNameOf(`createNode -ss "transform"`);

    initBDNNode($n);
    $r = assertStringEqual("", getJointKind($n)); if (`size $r`) warning $r;
    $r = assertFalse(isJointKind($n, "x")); if (`size $r`) warning $r;
    $r = assertStringEqual("", getJointType($n)); if (`size $r`) warning $r;
    $r = assertFalse(isJointType($n, "y")); if (`size $r`) warning $r;
    initSpaceNode($n, "x");
    $r = assertStringEqual("", getJointKind($n)); if (`size $r`) warning $r;
    $r = assertFalse(isJointKind($n, "x")); if (`size $r`) warning $r;
    $r = assertStringEqual("", getJointType($n)); if (`size $r`) warning $r;
    $r = assertFalse(isJointType($n, "y")); if (`size $r`) warning $r;
    initJointNode($n, "x", "y");
    $r = assertStringEqual("x", getJointKind($n)); if (`size $r`) warning $r;
    $r = assertTrue(isJointKind($n, "x")); if (`size $r`) warning $r;
    $r = assertStringEqual("y", getJointType($n)); if (`size $r`) warning $r;
    $r = assertTrue(isJointType($n, "y")); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  // getColliderType / isColliderType
  {
    testNewScene();

    $n = longNameOf(`createNode -ss "transform"`);

    initBDNNode($n);
    $r = assertStringEqual("", getColliderType($n)); if (`size $r`) warning $r;
    $r = assertFalse(isColliderType($n, "x")); if (`size $r`) warning $r;
    initSpaceNode($n, "x");
    $r = assertStringEqual("", getColliderType($n)); if (`size $r`) warning $r;
    $r = assertFalse(isColliderType($n, "x")); if (`size $r`) warning $r;
    initColliderNode($n, "x");
    $r = assertStringEqual("x", getColliderType($n)); if (`size $r`) warning $r;
    $r = assertTrue(isColliderType($n, "x")); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  print("test3 end\n");
}

/*-
@returns <>
@remarks
*/
proc test4() {
  print("test4 start\n");
  string $r;

  print("test4 end\n");
}

/*-
@param $flags <boolean[]>
@returns <>
*/
global proc nkBdnToolTest(int $flags[]) {
  if ($flags[0]) test0();
  if ($flags[1]) test1();
  if ($flags[2]) test2();
  if ($flags[3]) test3();
  // if ($flags[4]) test4();
}

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/dev/nkBdnTool/nkBdnTool.mel\"");
nkBdnToolTest({1, 1, 1, 1});
*/
